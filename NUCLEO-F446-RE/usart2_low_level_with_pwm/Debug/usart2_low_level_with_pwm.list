
usart2_low_level_with_pwm.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000003a8  080001c4  080001c4  000011c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000034  0800056c  0800056c  0000156c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080005a0  080005a0  00002004  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  080005a0  080005a0  00002004  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  080005a0  080005a0  00002004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080005a0  080005a0  000015a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080005a4  080005a4  000015a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000004  20000000  080005a8  00002000  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000020  20000004  080005ac  00002004  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000024  080005ac  00002024  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00002004  2**0
                  CONTENTS, READONLY
 12 .debug_info   000014a9  00000000  00000000  00002034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000565  00000000  00000000  000034dd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000001f8  00000000  00000000  00003a48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000163  00000000  00000000  00003c40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018f6e  00000000  00000000  00003da3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00001ffc  00000000  00000000  0001cd11  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c15c0  00000000  00000000  0001ed0d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000e02cd  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000628  00000000  00000000  000e0310  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000070  00000000  00000000  000e0938  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	@ (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	@ (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	@ (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	20000004 	.word	0x20000004
 80001e0:	00000000 	.word	0x00000000
 80001e4:	08000554 	.word	0x08000554

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	@ (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	@ (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	@ (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000008 	.word	0x20000008
 8000200:	08000554 	.word	0x08000554

08000204 <rcc_init>:
        __NOP();
    }
}

void rcc_init(void)
{
 8000204:	b480      	push	{r7}
 8000206:	af00      	add	r7, sp, #0
	RCC->AHB1ENR |= RCC_AHB1ENR_GPIOAEN;
 8000208:	4b0b      	ldr	r3, [pc, #44]	@ (8000238 <rcc_init+0x34>)
 800020a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800020c:	4a0a      	ldr	r2, [pc, #40]	@ (8000238 <rcc_init+0x34>)
 800020e:	f043 0301 	orr.w	r3, r3, #1
 8000212:	6313      	str	r3, [r2, #48]	@ 0x30

	RCC->APB1ENR |= RCC_APB1ENR_TIM2EN;
 8000214:	4b08      	ldr	r3, [pc, #32]	@ (8000238 <rcc_init+0x34>)
 8000216:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000218:	4a07      	ldr	r2, [pc, #28]	@ (8000238 <rcc_init+0x34>)
 800021a:	f043 0301 	orr.w	r3, r3, #1
 800021e:	6413      	str	r3, [r2, #64]	@ 0x40

	RCC->APB1ENR |= RCC_APB1ENR_USART2EN;
 8000220:	4b05      	ldr	r3, [pc, #20]	@ (8000238 <rcc_init+0x34>)
 8000222:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000224:	4a04      	ldr	r2, [pc, #16]	@ (8000238 <rcc_init+0x34>)
 8000226:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800022a:	6413      	str	r3, [r2, #64]	@ 0x40
}
 800022c:	bf00      	nop
 800022e:	46bd      	mov	sp, r7
 8000230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000234:	4770      	bx	lr
 8000236:	bf00      	nop
 8000238:	40023800 	.word	0x40023800

0800023c <usart2_gpio_init>:

void usart2_gpio_init(void)
{
 800023c:	b480      	push	{r7}
 800023e:	af00      	add	r7, sp, #0
	// SETTING MODER FOR PIN FUNCTIONS
	GPIOA->MODER &= ~(GPIO_MODER_MODER2_Msk | GPIO_MODER_MODER3_Msk);
 8000240:	4b1f      	ldr	r3, [pc, #124]	@ (80002c0 <usart2_gpio_init+0x84>)
 8000242:	681b      	ldr	r3, [r3, #0]
 8000244:	4a1e      	ldr	r2, [pc, #120]	@ (80002c0 <usart2_gpio_init+0x84>)
 8000246:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800024a:	6013      	str	r3, [r2, #0]

	GPIOA->MODER |= (MODER_AF << (GPIO_MODER_MODER2_Pos));
 800024c:	4b1c      	ldr	r3, [pc, #112]	@ (80002c0 <usart2_gpio_init+0x84>)
 800024e:	681b      	ldr	r3, [r3, #0]
 8000250:	4a1b      	ldr	r2, [pc, #108]	@ (80002c0 <usart2_gpio_init+0x84>)
 8000252:	f043 0320 	orr.w	r3, r3, #32
 8000256:	6013      	str	r3, [r2, #0]
	
	GPIOA->MODER |= (MODER_AF << GPIO_MODER_MODER3_Pos);
 8000258:	4b19      	ldr	r3, [pc, #100]	@ (80002c0 <usart2_gpio_init+0x84>)
 800025a:	681b      	ldr	r3, [r3, #0]
 800025c:	4a18      	ldr	r2, [pc, #96]	@ (80002c0 <usart2_gpio_init+0x84>)
 800025e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000262:	6013      	str	r3, [r2, #0]

	// SETTING FUCTIONS FOR SPEED AND PULL UP DOWN CONFIG
	GPIOA->OTYPER &= ~(GPIO_OTYPER_OT2 | GPIO_OTYPER_OT3);
 8000264:	4b16      	ldr	r3, [pc, #88]	@ (80002c0 <usart2_gpio_init+0x84>)
 8000266:	685b      	ldr	r3, [r3, #4]
 8000268:	4a15      	ldr	r2, [pc, #84]	@ (80002c0 <usart2_gpio_init+0x84>)
 800026a:	f023 030c 	bic.w	r3, r3, #12
 800026e:	6053      	str	r3, [r2, #4]

	GPIOA->OSPEEDR |= (OSPEEDR_HIGHSPEED << GPIO_OSPEEDR_OSPEED2_Pos) |  (OSPEEDR_HIGHSPEED << GPIO_OSPEEDR_OSPEED3_Pos);
 8000270:	4b13      	ldr	r3, [pc, #76]	@ (80002c0 <usart2_gpio_init+0x84>)
 8000272:	689b      	ldr	r3, [r3, #8]
 8000274:	4a12      	ldr	r2, [pc, #72]	@ (80002c0 <usart2_gpio_init+0x84>)
 8000276:	f043 03f0 	orr.w	r3, r3, #240	@ 0xf0
 800027a:	6093      	str	r3, [r2, #8]

	GPIOA->PUPDR &= ~(GPIO_PUPDR_PUPD2_Msk | GPIO_PUPDR_PUPD3_Msk);
 800027c:	4b10      	ldr	r3, [pc, #64]	@ (80002c0 <usart2_gpio_init+0x84>)
 800027e:	68db      	ldr	r3, [r3, #12]
 8000280:	4a0f      	ldr	r2, [pc, #60]	@ (80002c0 <usart2_gpio_init+0x84>)
 8000282:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8000286:	60d3      	str	r3, [r2, #12]

	GPIOA->PUPDR |= (0U << GPIO_PUPDR_PUPD2_Pos) | (0U << GPIO_PUPDR_PUPD3_Pos);
 8000288:	4b0d      	ldr	r3, [pc, #52]	@ (80002c0 <usart2_gpio_init+0x84>)
 800028a:	4a0d      	ldr	r2, [pc, #52]	@ (80002c0 <usart2_gpio_init+0x84>)
 800028c:	68db      	ldr	r3, [r3, #12]
 800028e:	60d3      	str	r3, [r2, #12]

	// SETTING THE ALTERNATE FUCNTION
	GPIOA->AFR[0] &= ~(GPIO_AFRL_AFSEL2_Msk | GPIO_AFRL_AFSEL3_Msk);
 8000290:	4b0b      	ldr	r3, [pc, #44]	@ (80002c0 <usart2_gpio_init+0x84>)
 8000292:	6a1b      	ldr	r3, [r3, #32]
 8000294:	4a0a      	ldr	r2, [pc, #40]	@ (80002c0 <usart2_gpio_init+0x84>)
 8000296:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800029a:	6213      	str	r3, [r2, #32]
	
	GPIOA->AFR[0] |= (USART2_AF << (GPIO_AFRL_AFSEL2_Pos ));
 800029c:	4b08      	ldr	r3, [pc, #32]	@ (80002c0 <usart2_gpio_init+0x84>)
 800029e:	6a1b      	ldr	r3, [r3, #32]
 80002a0:	4a07      	ldr	r2, [pc, #28]	@ (80002c0 <usart2_gpio_init+0x84>)
 80002a2:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80002a6:	6213      	str	r3, [r2, #32]

	GPIOA->AFR[0] |= (USART2_AF << (GPIO_AFRL_AFSEL3_Pos));
 80002a8:	4b05      	ldr	r3, [pc, #20]	@ (80002c0 <usart2_gpio_init+0x84>)
 80002aa:	6a1b      	ldr	r3, [r3, #32]
 80002ac:	4a04      	ldr	r2, [pc, #16]	@ (80002c0 <usart2_gpio_init+0x84>)
 80002ae:	f443 43e0 	orr.w	r3, r3, #28672	@ 0x7000
 80002b2:	6213      	str	r3, [r2, #32]
	
}
 80002b4:	bf00      	nop
 80002b6:	46bd      	mov	sp, r7
 80002b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop
 80002c0:	40020000 	.word	0x40020000

080002c4 <usart2_init>:

void usart2_init(uint32_t baudrate)
{
 80002c4:	b480      	push	{r7}
 80002c6:	b085      	sub	sp, #20
 80002c8:	af00      	add	r7, sp, #0
 80002ca:	6078      	str	r0, [r7, #4]
	uint32_t pclk1 = 16000000; // Replace with real APB1 freq
 80002cc:	4b12      	ldr	r3, [pc, #72]	@ (8000318 <usart2_init+0x54>)
 80002ce:	60fb      	str	r3, [r7, #12]

	USART2->BRR = pclk1 / baudrate;
 80002d0:	4912      	ldr	r1, [pc, #72]	@ (800031c <usart2_init+0x58>)
 80002d2:	68fa      	ldr	r2, [r7, #12]
 80002d4:	687b      	ldr	r3, [r7, #4]
 80002d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80002da:	608b      	str	r3, [r1, #8]
	
	USART2->CR1 &= ~(USART_CR1_M_Msk | USART_CR1_PCE_Msk);
 80002dc:	4b0f      	ldr	r3, [pc, #60]	@ (800031c <usart2_init+0x58>)
 80002de:	68db      	ldr	r3, [r3, #12]
 80002e0:	4a0e      	ldr	r2, [pc, #56]	@ (800031c <usart2_init+0x58>)
 80002e2:	f423 53a0 	bic.w	r3, r3, #5120	@ 0x1400
 80002e6:	60d3      	str	r3, [r2, #12]

	USART2->CR2 &= ~(USART_CR2_STOP);
 80002e8:	4b0c      	ldr	r3, [pc, #48]	@ (800031c <usart2_init+0x58>)
 80002ea:	691b      	ldr	r3, [r3, #16]
 80002ec:	4a0b      	ldr	r2, [pc, #44]	@ (800031c <usart2_init+0x58>)
 80002ee:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80002f2:	6113      	str	r3, [r2, #16]

	USART2->CR1 |= USART_CR1_TE | USART_CR1_RE;
 80002f4:	4b09      	ldr	r3, [pc, #36]	@ (800031c <usart2_init+0x58>)
 80002f6:	68db      	ldr	r3, [r3, #12]
 80002f8:	4a08      	ldr	r2, [pc, #32]	@ (800031c <usart2_init+0x58>)
 80002fa:	f043 030c 	orr.w	r3, r3, #12
 80002fe:	60d3      	str	r3, [r2, #12]

	USART2->CR1 |= USART_CR1_UE;
 8000300:	4b06      	ldr	r3, [pc, #24]	@ (800031c <usart2_init+0x58>)
 8000302:	68db      	ldr	r3, [r3, #12]
 8000304:	4a05      	ldr	r2, [pc, #20]	@ (800031c <usart2_init+0x58>)
 8000306:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800030a:	60d3      	str	r3, [r2, #12]
}
 800030c:	bf00      	nop
 800030e:	3714      	adds	r7, #20
 8000310:	46bd      	mov	sp, r7
 8000312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000316:	4770      	bx	lr
 8000318:	00f42400 	.word	0x00f42400
 800031c:	40004400 	.word	0x40004400

08000320 <usart2_write_char>:

void usart2_write_char(char ch)
{
 8000320:	b480      	push	{r7}
 8000322:	b083      	sub	sp, #12
 8000324:	af00      	add	r7, sp, #0
 8000326:	4603      	mov	r3, r0
 8000328:	71fb      	strb	r3, [r7, #7]
	while(!(USART2->SR & USART_SR_TXE));
 800032a:	bf00      	nop
 800032c:	4b0b      	ldr	r3, [pc, #44]	@ (800035c <usart2_write_char+0x3c>)
 800032e:	681b      	ldr	r3, [r3, #0]
 8000330:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000334:	2b00      	cmp	r3, #0
 8000336:	d0f9      	beq.n	800032c <usart2_write_char+0xc>
	USART2->DR = (uint8_t)ch;
 8000338:	4a08      	ldr	r2, [pc, #32]	@ (800035c <usart2_write_char+0x3c>)
 800033a:	79fb      	ldrb	r3, [r7, #7]
 800033c:	6053      	str	r3, [r2, #4]

	while(!(USART2->SR & USART_SR_TC));
 800033e:	bf00      	nop
 8000340:	4b06      	ldr	r3, [pc, #24]	@ (800035c <usart2_write_char+0x3c>)
 8000342:	681b      	ldr	r3, [r3, #0]
 8000344:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000348:	2b00      	cmp	r3, #0
 800034a:	d0f9      	beq.n	8000340 <usart2_write_char+0x20>
}
 800034c:	bf00      	nop
 800034e:	bf00      	nop
 8000350:	370c      	adds	r7, #12
 8000352:	46bd      	mov	sp, r7
 8000354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000358:	4770      	bx	lr
 800035a:	bf00      	nop
 800035c:	40004400 	.word	0x40004400

08000360 <usart2_read_char>:

char usart2_read_char(void)
{
 8000360:	b480      	push	{r7}
 8000362:	af00      	add	r7, sp, #0
	while(!(USART2->SR & USART_SR_RXNE));
 8000364:	bf00      	nop
 8000366:	4b07      	ldr	r3, [pc, #28]	@ (8000384 <usart2_read_char+0x24>)
 8000368:	681b      	ldr	r3, [r3, #0]
 800036a:	f003 0320 	and.w	r3, r3, #32
 800036e:	2b00      	cmp	r3, #0
 8000370:	d0f9      	beq.n	8000366 <usart2_read_char+0x6>
	return((char) USART2->DR & 0xFF);
 8000372:	4b04      	ldr	r3, [pc, #16]	@ (8000384 <usart2_read_char+0x24>)
 8000374:	685b      	ldr	r3, [r3, #4]
 8000376:	b2db      	uxtb	r3, r3
}
 8000378:	4618      	mov	r0, r3
 800037a:	46bd      	mov	sp, r7
 800037c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000380:	4770      	bx	lr
 8000382:	bf00      	nop
 8000384:	40004400 	.word	0x40004400

08000388 <usart2_write_String>:

void usart2_write_String(const char *str)
{
 8000388:	b580      	push	{r7, lr}
 800038a:	b082      	sub	sp, #8
 800038c:	af00      	add	r7, sp, #0
 800038e:	6078      	str	r0, [r7, #4]
	while(*str)
 8000390:	e006      	b.n	80003a0 <usart2_write_String+0x18>
	{
		usart2_write_char(*str++);
 8000392:	687b      	ldr	r3, [r7, #4]
 8000394:	1c5a      	adds	r2, r3, #1
 8000396:	607a      	str	r2, [r7, #4]
 8000398:	781b      	ldrb	r3, [r3, #0]
 800039a:	4618      	mov	r0, r3
 800039c:	f7ff ffc0 	bl	8000320 <usart2_write_char>
	while(*str)
 80003a0:	687b      	ldr	r3, [r7, #4]
 80003a2:	781b      	ldrb	r3, [r3, #0]
 80003a4:	2b00      	cmp	r3, #0
 80003a6:	d1f4      	bne.n	8000392 <usart2_write_String+0xa>
	}
}
 80003a8:	bf00      	nop
 80003aa:	bf00      	nop
 80003ac:	3708      	adds	r7, #8
 80003ae:	46bd      	mov	sp, r7
 80003b0:	bd80      	pop	{r7, pc}
	...

080003b4 <main>:

int main(void)
{
 80003b4:	b580      	push	{r7, lr}
 80003b6:	b082      	sub	sp, #8
 80003b8:	af00      	add	r7, sp, #0
	rcc_init();
 80003ba:	f7ff ff23 	bl	8000204 <rcc_init>
	usart2_gpio_init();
 80003be:	f7ff ff3d 	bl	800023c <usart2_gpio_init>
	usart2_init(115200);
 80003c2:	f44f 30e1 	mov.w	r0, #115200	@ 0x1c200
 80003c6:	f7ff ff7d 	bl	80002c4 <usart2_init>

	while(1)
	{
		usart2_write_String("MA NA VA YA SI\r\n");
 80003ca:	480c      	ldr	r0, [pc, #48]	@ (80003fc <main+0x48>)
 80003cc:	f7ff ffdc 	bl	8000388 <usart2_write_String>

		if(USART2->SR & USART_SR_RXNE)
 80003d0:	4b0b      	ldr	r3, [pc, #44]	@ (8000400 <main+0x4c>)
 80003d2:	681b      	ldr	r3, [r3, #0]
 80003d4:	f003 0320 	and.w	r3, r3, #32
 80003d8:	2b00      	cmp	r3, #0
 80003da:	d0f6      	beq.n	80003ca <main+0x16>
		{
			char c = usart2_read_char();
 80003dc:	f7ff ffc0 	bl	8000360 <usart2_read_char>
 80003e0:	4603      	mov	r3, r0
 80003e2:	71fb      	strb	r3, [r7, #7]
			usart2_write_String("the received char is: ");
 80003e4:	4807      	ldr	r0, [pc, #28]	@ (8000404 <main+0x50>)
 80003e6:	f7ff ffcf 	bl	8000388 <usart2_write_String>
			usart2_write_char(c);
 80003ea:	79fb      	ldrb	r3, [r7, #7]
 80003ec:	4618      	mov	r0, r3
 80003ee:	f7ff ff97 	bl	8000320 <usart2_write_char>
			usart2_write_String("\r\n\r\n");
 80003f2:	4805      	ldr	r0, [pc, #20]	@ (8000408 <main+0x54>)
 80003f4:	f7ff ffc8 	bl	8000388 <usart2_write_String>
		usart2_write_String("MA NA VA YA SI\r\n");
 80003f8:	e7e7      	b.n	80003ca <main+0x16>
 80003fa:	bf00      	nop
 80003fc:	0800056c 	.word	0x0800056c
 8000400:	40004400 	.word	0x40004400
 8000404:	08000580 	.word	0x08000580
 8000408:	08000598 	.word	0x08000598

0800040c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800040c:	b480      	push	{r7}
 800040e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000410:	bf00      	nop
 8000412:	e7fd      	b.n	8000410 <NMI_Handler+0x4>

08000414 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000414:	b480      	push	{r7}
 8000416:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000418:	bf00      	nop
 800041a:	e7fd      	b.n	8000418 <HardFault_Handler+0x4>

0800041c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800041c:	b480      	push	{r7}
 800041e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000420:	bf00      	nop
 8000422:	e7fd      	b.n	8000420 <MemManage_Handler+0x4>

08000424 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000424:	b480      	push	{r7}
 8000426:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000428:	bf00      	nop
 800042a:	e7fd      	b.n	8000428 <BusFault_Handler+0x4>

0800042c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800042c:	b480      	push	{r7}
 800042e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000430:	bf00      	nop
 8000432:	e7fd      	b.n	8000430 <UsageFault_Handler+0x4>

08000434 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000434:	b480      	push	{r7}
 8000436:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000438:	bf00      	nop
 800043a:	46bd      	mov	sp, r7
 800043c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000440:	4770      	bx	lr

08000442 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000442:	b480      	push	{r7}
 8000444:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000446:	bf00      	nop
 8000448:	46bd      	mov	sp, r7
 800044a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800044e:	4770      	bx	lr

08000450 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000450:	b480      	push	{r7}
 8000452:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000454:	bf00      	nop
 8000456:	46bd      	mov	sp, r7
 8000458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800045c:	4770      	bx	lr

0800045e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800045e:	b580      	push	{r7, lr}
 8000460:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000462:	f000 f83f 	bl	80004e4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000466:	bf00      	nop
 8000468:	bd80      	pop	{r7, pc}
	...

0800046c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800046c:	b480      	push	{r7}
 800046e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000470:	4b06      	ldr	r3, [pc, #24]	@ (800048c <SystemInit+0x20>)
 8000472:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000476:	4a05      	ldr	r2, [pc, #20]	@ (800048c <SystemInit+0x20>)
 8000478:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800047c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000480:	bf00      	nop
 8000482:	46bd      	mov	sp, r7
 8000484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000488:	4770      	bx	lr
 800048a:	bf00      	nop
 800048c:	e000ed00 	.word	0xe000ed00

08000490 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000490:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80004c8 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000494:	f7ff ffea 	bl	800046c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000498:	480c      	ldr	r0, [pc, #48]	@ (80004cc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800049a:	490d      	ldr	r1, [pc, #52]	@ (80004d0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800049c:	4a0d      	ldr	r2, [pc, #52]	@ (80004d4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800049e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80004a0:	e002      	b.n	80004a8 <LoopCopyDataInit>

080004a2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80004a2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80004a4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80004a6:	3304      	adds	r3, #4

080004a8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80004a8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80004aa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80004ac:	d3f9      	bcc.n	80004a2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80004ae:	4a0a      	ldr	r2, [pc, #40]	@ (80004d8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80004b0:	4c0a      	ldr	r4, [pc, #40]	@ (80004dc <LoopFillZerobss+0x22>)
  movs r3, #0
 80004b2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80004b4:	e001      	b.n	80004ba <LoopFillZerobss>

080004b6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80004b6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80004b8:	3204      	adds	r2, #4

080004ba <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80004ba:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80004bc:	d3fb      	bcc.n	80004b6 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 80004be:	f000 f825 	bl	800050c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80004c2:	f7ff ff77 	bl	80003b4 <main>
  bx  lr    
 80004c6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80004c8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80004cc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80004d0:	20000004 	.word	0x20000004
  ldr r2, =_sidata
 80004d4:	080005a8 	.word	0x080005a8
  ldr r2, =_sbss
 80004d8:	20000004 	.word	0x20000004
  ldr r4, =_ebss
 80004dc:	20000024 	.word	0x20000024

080004e0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80004e0:	e7fe      	b.n	80004e0 <ADC_IRQHandler>
	...

080004e4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80004e4:	b480      	push	{r7}
 80004e6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80004e8:	4b06      	ldr	r3, [pc, #24]	@ (8000504 <HAL_IncTick+0x20>)
 80004ea:	781b      	ldrb	r3, [r3, #0]
 80004ec:	461a      	mov	r2, r3
 80004ee:	4b06      	ldr	r3, [pc, #24]	@ (8000508 <HAL_IncTick+0x24>)
 80004f0:	681b      	ldr	r3, [r3, #0]
 80004f2:	4413      	add	r3, r2
 80004f4:	4a04      	ldr	r2, [pc, #16]	@ (8000508 <HAL_IncTick+0x24>)
 80004f6:	6013      	str	r3, [r2, #0]
}
 80004f8:	bf00      	nop
 80004fa:	46bd      	mov	sp, r7
 80004fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000500:	4770      	bx	lr
 8000502:	bf00      	nop
 8000504:	20000000 	.word	0x20000000
 8000508:	20000020 	.word	0x20000020

0800050c <__libc_init_array>:
 800050c:	b570      	push	{r4, r5, r6, lr}
 800050e:	4d0d      	ldr	r5, [pc, #52]	@ (8000544 <__libc_init_array+0x38>)
 8000510:	4c0d      	ldr	r4, [pc, #52]	@ (8000548 <__libc_init_array+0x3c>)
 8000512:	1b64      	subs	r4, r4, r5
 8000514:	10a4      	asrs	r4, r4, #2
 8000516:	2600      	movs	r6, #0
 8000518:	42a6      	cmp	r6, r4
 800051a:	d109      	bne.n	8000530 <__libc_init_array+0x24>
 800051c:	4d0b      	ldr	r5, [pc, #44]	@ (800054c <__libc_init_array+0x40>)
 800051e:	4c0c      	ldr	r4, [pc, #48]	@ (8000550 <__libc_init_array+0x44>)
 8000520:	f000 f818 	bl	8000554 <_init>
 8000524:	1b64      	subs	r4, r4, r5
 8000526:	10a4      	asrs	r4, r4, #2
 8000528:	2600      	movs	r6, #0
 800052a:	42a6      	cmp	r6, r4
 800052c:	d105      	bne.n	800053a <__libc_init_array+0x2e>
 800052e:	bd70      	pop	{r4, r5, r6, pc}
 8000530:	f855 3b04 	ldr.w	r3, [r5], #4
 8000534:	4798      	blx	r3
 8000536:	3601      	adds	r6, #1
 8000538:	e7ee      	b.n	8000518 <__libc_init_array+0xc>
 800053a:	f855 3b04 	ldr.w	r3, [r5], #4
 800053e:	4798      	blx	r3
 8000540:	3601      	adds	r6, #1
 8000542:	e7f2      	b.n	800052a <__libc_init_array+0x1e>
 8000544:	080005a0 	.word	0x080005a0
 8000548:	080005a0 	.word	0x080005a0
 800054c:	080005a0 	.word	0x080005a0
 8000550:	080005a4 	.word	0x080005a4

08000554 <_init>:
 8000554:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000556:	bf00      	nop
 8000558:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800055a:	bc08      	pop	{r3}
 800055c:	469e      	mov	lr, r3
 800055e:	4770      	bx	lr

08000560 <_fini>:
 8000560:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000562:	bf00      	nop
 8000564:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000566:	bc08      	pop	{r3}
 8000568:	469e      	mov	lr, r3
 800056a:	4770      	bx	lr
