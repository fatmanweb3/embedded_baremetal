
baremetal_driver_usart_spi_i2c.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000002f8  080001c4  080001c4  000011c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  080004bc  080004bc  000014bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080004dc  080004dc  00002004  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  080004dc  080004dc  00002004  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  080004dc  080004dc  00002004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080004dc  080004dc  000014dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080004e0  080004e0  000014e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000004  20000000  080004e4  00002000  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000020  20000004  080004e8  00002004  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000024  080004e8  00002024  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00002004  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000140f  00000000  00000000  00002034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000004e6  00000000  00000000  00003443  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000001d8  00000000  00000000  00003930  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000014b  00000000  00000000  00003b08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00001590  00000000  00000000  00003c53  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00001e85  00000000  00000000  000051e3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c17c7  00000000  00000000  00007068  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000c882f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000059c  00000000  00000000  000c8874  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000075  00000000  00000000  000c8e10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	@ (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	@ (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	@ (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	20000004 	.word	0x20000004
 80001e0:	00000000 	.word	0x00000000
 80001e4:	080004a4 	.word	0x080004a4

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	@ (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	@ (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	@ (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000008 	.word	0x20000008
 8000200:	080004a4 	.word	0x080004a4

08000204 <usart2_gpio_init>:
// BRR = (24 << 4) | 7 = 0x187

#define USART_BAUD_RATE_115200 (0x08BU)

void usart2_gpio_init(void)
{
 8000204:	b480      	push	{r7}
 8000206:	af00      	add	r7, sp, #0
	// 1. Enable the clock for GPIOA
	// Set the first bit (GPIOAEN) of the AHB1ENR register to 1
	RCC->AHB1ENR |= RCC_AHB1ENR_GPIOA;
 8000208:	4b23      	ldr	r3, [pc, #140]	@ (8000298 <usart2_gpio_init+0x94>)
 800020a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800020c:	4a22      	ldr	r2, [pc, #136]	@ (8000298 <usart2_gpio_init+0x94>)
 800020e:	f043 0301 	orr.w	r3, r3, #1
 8000212:	6313      	str	r3, [r2, #48]	@ 0x30
	RCC->APB1ENR |= RCC_APB1ENR_USART2;
 8000214:	4b20      	ldr	r3, [pc, #128]	@ (8000298 <usart2_gpio_init+0x94>)
 8000216:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000218:	4a1f      	ldr	r2, [pc, #124]	@ (8000298 <usart2_gpio_init+0x94>)
 800021a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800021e:	6413      	str	r3, [r2, #64]	@ 0x40

	GPIOA->MODER &= ~(0b0011 << GPIOA_MODER_PA2_POS);
 8000220:	4b1e      	ldr	r3, [pc, #120]	@ (800029c <usart2_gpio_init+0x98>)
 8000222:	681b      	ldr	r3, [r3, #0]
 8000224:	4a1d      	ldr	r2, [pc, #116]	@ (800029c <usart2_gpio_init+0x98>)
 8000226:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 800022a:	6013      	str	r3, [r2, #0]
	GPIOA->MODER &= ~(3U << GPIOA_MODER_PA3_POS);
 800022c:	4b1b      	ldr	r3, [pc, #108]	@ (800029c <usart2_gpio_init+0x98>)
 800022e:	681b      	ldr	r3, [r3, #0]
 8000230:	4a1a      	ldr	r2, [pc, #104]	@ (800029c <usart2_gpio_init+0x98>)
 8000232:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8000236:	6013      	str	r3, [r2, #0]

	GPIOA->MODER |= (0b0010 << GPIOA_MODER_PA2_POS);
 8000238:	4b18      	ldr	r3, [pc, #96]	@ (800029c <usart2_gpio_init+0x98>)
 800023a:	681b      	ldr	r3, [r3, #0]
 800023c:	4a17      	ldr	r2, [pc, #92]	@ (800029c <usart2_gpio_init+0x98>)
 800023e:	f043 0320 	orr.w	r3, r3, #32
 8000242:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |= (GPIOA_MODER_AF_MODE << GPIOA_MODER_PA3_POS);
 8000244:	4b15      	ldr	r3, [pc, #84]	@ (800029c <usart2_gpio_init+0x98>)
 8000246:	681b      	ldr	r3, [r3, #0]
 8000248:	4a14      	ldr	r2, [pc, #80]	@ (800029c <usart2_gpio_init+0x98>)
 800024a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800024e:	6013      	str	r3, [r2, #0]

	GPIOA->AFRL &= ~(0b1111 << GPIOA_AFRL_PA2_POS);
 8000250:	4b12      	ldr	r3, [pc, #72]	@ (800029c <usart2_gpio_init+0x98>)
 8000252:	6a1b      	ldr	r3, [r3, #32]
 8000254:	4a11      	ldr	r2, [pc, #68]	@ (800029c <usart2_gpio_init+0x98>)
 8000256:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800025a:	6213      	str	r3, [r2, #32]
	GPIOA->AFRL &= ~(15U << GPIOA_AFRL_PA3_POS);
 800025c:	4b0f      	ldr	r3, [pc, #60]	@ (800029c <usart2_gpio_init+0x98>)
 800025e:	6a1b      	ldr	r3, [r3, #32]
 8000260:	4a0e      	ldr	r2, [pc, #56]	@ (800029c <usart2_gpio_init+0x98>)
 8000262:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8000266:	6213      	str	r3, [r2, #32]

	GPIOA->AFRL |= (0b0111 << GPIOA_AFRL_PA2_POS);
 8000268:	4b0c      	ldr	r3, [pc, #48]	@ (800029c <usart2_gpio_init+0x98>)
 800026a:	6a1b      	ldr	r3, [r3, #32]
 800026c:	4a0b      	ldr	r2, [pc, #44]	@ (800029c <usart2_gpio_init+0x98>)
 800026e:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8000272:	6213      	str	r3, [r2, #32]
	GPIOA->AFRL |= (GPIOA_AF_USART2 << GPIOA_AFRL_PA3_POS);
 8000274:	4b09      	ldr	r3, [pc, #36]	@ (800029c <usart2_gpio_init+0x98>)
 8000276:	6a1b      	ldr	r3, [r3, #32]
 8000278:	4a08      	ldr	r2, [pc, #32]	@ (800029c <usart2_gpio_init+0x98>)
 800027a:	f443 43e0 	orr.w	r3, r3, #28672	@ 0x7000
 800027e:	6213      	str	r3, [r2, #32]

	USART2->BRR = USART_BAUD_RATE_115200;
 8000280:	4b07      	ldr	r3, [pc, #28]	@ (80002a0 <usart2_gpio_init+0x9c>)
 8000282:	228b      	movs	r2, #139	@ 0x8b
 8000284:	609a      	str	r2, [r3, #8]

	//configuring the control register
	USART2->CR1 = (1U <<13) | (1U << 3) | (1U << 2);
 8000286:	4b06      	ldr	r3, [pc, #24]	@ (80002a0 <usart2_gpio_init+0x9c>)
 8000288:	f242 020c 	movw	r2, #8204	@ 0x200c
 800028c:	60da      	str	r2, [r3, #12]
}
 800028e:	bf00      	nop
 8000290:	46bd      	mov	sp, r7
 8000292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000296:	4770      	bx	lr
 8000298:	40023800 	.word	0x40023800
 800029c:	40020000 	.word	0x40020000
 80002a0:	40004400 	.word	0x40004400

080002a4 <usart2_transmitchar>:

void usart2_transmitchar(uint8_t data)
{
 80002a4:	b480      	push	{r7}
 80002a6:	b083      	sub	sp, #12
 80002a8:	af00      	add	r7, sp, #0
 80002aa:	4603      	mov	r3, r0
 80002ac:	71fb      	strb	r3, [r7, #7]
	while(!(USART2->SR & (1U << 7)));
 80002ae:	bf00      	nop
 80002b0:	4b0b      	ldr	r3, [pc, #44]	@ (80002e0 <usart2_transmitchar+0x3c>)
 80002b2:	681b      	ldr	r3, [r3, #0]
 80002b4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80002b8:	2b00      	cmp	r3, #0
 80002ba:	d0f9      	beq.n	80002b0 <usart2_transmitchar+0xc>

	USART2->DR = data;
 80002bc:	4a08      	ldr	r2, [pc, #32]	@ (80002e0 <usart2_transmitchar+0x3c>)
 80002be:	79fb      	ldrb	r3, [r7, #7]
 80002c0:	6053      	str	r3, [r2, #4]
	while (!(USART2->SR & (1U << 6))); // Wait for TC
 80002c2:	bf00      	nop
 80002c4:	4b06      	ldr	r3, [pc, #24]	@ (80002e0 <usart2_transmitchar+0x3c>)
 80002c6:	681b      	ldr	r3, [r3, #0]
 80002c8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80002cc:	2b00      	cmp	r3, #0
 80002ce:	d0f9      	beq.n	80002c4 <usart2_transmitchar+0x20>
}
 80002d0:	bf00      	nop
 80002d2:	bf00      	nop
 80002d4:	370c      	adds	r7, #12
 80002d6:	46bd      	mov	sp, r7
 80002d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop
 80002e0:	40004400 	.word	0x40004400

080002e4 <delay>:

void delay(uint32_t milliseconds)
{
 80002e4:	b480      	push	{r7}
 80002e6:	b085      	sub	sp, #20
 80002e8:	af00      	add	r7, sp, #0
 80002ea:	6078      	str	r0, [r7, #4]
    // Adjust this value based on your MCU's clock frequency
    volatile uint32_t i;
    for (; milliseconds > 0; milliseconds--)
 80002ec:	e00c      	b.n	8000308 <delay+0x24>
    {
        for (i = 0; i < 8000; i++);
 80002ee:	2300      	movs	r3, #0
 80002f0:	60fb      	str	r3, [r7, #12]
 80002f2:	e002      	b.n	80002fa <delay+0x16>
 80002f4:	68fb      	ldr	r3, [r7, #12]
 80002f6:	3301      	adds	r3, #1
 80002f8:	60fb      	str	r3, [r7, #12]
 80002fa:	68fb      	ldr	r3, [r7, #12]
 80002fc:	f5b3 5ffa 	cmp.w	r3, #8000	@ 0x1f40
 8000300:	d3f8      	bcc.n	80002f4 <delay+0x10>
    for (; milliseconds > 0; milliseconds--)
 8000302:	687b      	ldr	r3, [r7, #4]
 8000304:	3b01      	subs	r3, #1
 8000306:	607b      	str	r3, [r7, #4]
 8000308:	687b      	ldr	r3, [r7, #4]
 800030a:	2b00      	cmp	r3, #0
 800030c:	d1ef      	bne.n	80002ee <delay+0xa>
    }
}
 800030e:	bf00      	nop
 8000310:	bf00      	nop
 8000312:	3714      	adds	r7, #20
 8000314:	46bd      	mov	sp, r7
 8000316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800031a:	4770      	bx	lr

0800031c <main>:


int main(void)
{
 800031c:	b580      	push	{r7, lr}
 800031e:	b082      	sub	sp, #8
 8000320:	af00      	add	r7, sp, #0
	// Configure PLL for 45 MHz APB1 if needed (consult reference manual)
	usart2_gpio_init();
 8000322:	f7ff ff6f 	bl	8000204 <usart2_gpio_init>
	const char *message = "Hello World\r\n";
 8000326:	4b0b      	ldr	r3, [pc, #44]	@ (8000354 <main+0x38>)
 8000328:	607b      	str	r3, [r7, #4]

	while(1)
	{
		while(*message)
 800032a:	e007      	b.n	800033c <main+0x20>
		{
			usart2_transmitchar(*message);
 800032c:	687b      	ldr	r3, [r7, #4]
 800032e:	781b      	ldrb	r3, [r3, #0]
 8000330:	4618      	mov	r0, r3
 8000332:	f7ff ffb7 	bl	80002a4 <usart2_transmitchar>
			message++;
 8000336:	687b      	ldr	r3, [r7, #4]
 8000338:	3301      	adds	r3, #1
 800033a:	607b      	str	r3, [r7, #4]
		while(*message)
 800033c:	687b      	ldr	r3, [r7, #4]
 800033e:	781b      	ldrb	r3, [r3, #0]
 8000340:	2b00      	cmp	r3, #0
 8000342:	d1f3      	bne.n	800032c <main+0x10>
		}
		// Reset the message pointer to the beginning of the string
		delay(1000);
 8000344:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000348:	f7ff ffcc 	bl	80002e4 <delay>
		message = "Hello World\r\n\n";
 800034c:	4b02      	ldr	r3, [pc, #8]	@ (8000358 <main+0x3c>)
 800034e:	607b      	str	r3, [r7, #4]
		while(*message)
 8000350:	e7f4      	b.n	800033c <main+0x20>
 8000352:	bf00      	nop
 8000354:	080004bc 	.word	0x080004bc
 8000358:	080004cc 	.word	0x080004cc

0800035c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800035c:	b480      	push	{r7}
 800035e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000360:	bf00      	nop
 8000362:	e7fd      	b.n	8000360 <NMI_Handler+0x4>

08000364 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000364:	b480      	push	{r7}
 8000366:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000368:	bf00      	nop
 800036a:	e7fd      	b.n	8000368 <HardFault_Handler+0x4>

0800036c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800036c:	b480      	push	{r7}
 800036e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000370:	bf00      	nop
 8000372:	e7fd      	b.n	8000370 <MemManage_Handler+0x4>

08000374 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000374:	b480      	push	{r7}
 8000376:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000378:	bf00      	nop
 800037a:	e7fd      	b.n	8000378 <BusFault_Handler+0x4>

0800037c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800037c:	b480      	push	{r7}
 800037e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000380:	bf00      	nop
 8000382:	e7fd      	b.n	8000380 <UsageFault_Handler+0x4>

08000384 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000384:	b480      	push	{r7}
 8000386:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000388:	bf00      	nop
 800038a:	46bd      	mov	sp, r7
 800038c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000390:	4770      	bx	lr

08000392 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000392:	b480      	push	{r7}
 8000394:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000396:	bf00      	nop
 8000398:	46bd      	mov	sp, r7
 800039a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800039e:	4770      	bx	lr

080003a0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80003a0:	b480      	push	{r7}
 80003a2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80003a4:	bf00      	nop
 80003a6:	46bd      	mov	sp, r7
 80003a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003ac:	4770      	bx	lr

080003ae <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80003ae:	b580      	push	{r7, lr}
 80003b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80003b2:	f000 f83f 	bl	8000434 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80003b6:	bf00      	nop
 80003b8:	bd80      	pop	{r7, pc}
	...

080003bc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80003bc:	b480      	push	{r7}
 80003be:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80003c0:	4b06      	ldr	r3, [pc, #24]	@ (80003dc <SystemInit+0x20>)
 80003c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80003c6:	4a05      	ldr	r2, [pc, #20]	@ (80003dc <SystemInit+0x20>)
 80003c8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80003cc:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80003d0:	bf00      	nop
 80003d2:	46bd      	mov	sp, r7
 80003d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003d8:	4770      	bx	lr
 80003da:	bf00      	nop
 80003dc:	e000ed00 	.word	0xe000ed00

080003e0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80003e0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000418 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 80003e4:	f7ff ffea 	bl	80003bc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80003e8:	480c      	ldr	r0, [pc, #48]	@ (800041c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80003ea:	490d      	ldr	r1, [pc, #52]	@ (8000420 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80003ec:	4a0d      	ldr	r2, [pc, #52]	@ (8000424 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80003ee:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80003f0:	e002      	b.n	80003f8 <LoopCopyDataInit>

080003f2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80003f2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80003f4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80003f6:	3304      	adds	r3, #4

080003f8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80003f8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80003fa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80003fc:	d3f9      	bcc.n	80003f2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80003fe:	4a0a      	ldr	r2, [pc, #40]	@ (8000428 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000400:	4c0a      	ldr	r4, [pc, #40]	@ (800042c <LoopFillZerobss+0x22>)
  movs r3, #0
 8000402:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000404:	e001      	b.n	800040a <LoopFillZerobss>

08000406 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000406:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000408:	3204      	adds	r2, #4

0800040a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800040a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800040c:	d3fb      	bcc.n	8000406 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 800040e:	f000 f825 	bl	800045c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000412:	f7ff ff83 	bl	800031c <main>
  bx  lr    
 8000416:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000418:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800041c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000420:	20000004 	.word	0x20000004
  ldr r2, =_sidata
 8000424:	080004e4 	.word	0x080004e4
  ldr r2, =_sbss
 8000428:	20000004 	.word	0x20000004
  ldr r4, =_ebss
 800042c:	20000024 	.word	0x20000024

08000430 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000430:	e7fe      	b.n	8000430 <ADC_IRQHandler>
	...

08000434 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000434:	b480      	push	{r7}
 8000436:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000438:	4b06      	ldr	r3, [pc, #24]	@ (8000454 <HAL_IncTick+0x20>)
 800043a:	781b      	ldrb	r3, [r3, #0]
 800043c:	461a      	mov	r2, r3
 800043e:	4b06      	ldr	r3, [pc, #24]	@ (8000458 <HAL_IncTick+0x24>)
 8000440:	681b      	ldr	r3, [r3, #0]
 8000442:	4413      	add	r3, r2
 8000444:	4a04      	ldr	r2, [pc, #16]	@ (8000458 <HAL_IncTick+0x24>)
 8000446:	6013      	str	r3, [r2, #0]
}
 8000448:	bf00      	nop
 800044a:	46bd      	mov	sp, r7
 800044c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000450:	4770      	bx	lr
 8000452:	bf00      	nop
 8000454:	20000000 	.word	0x20000000
 8000458:	20000020 	.word	0x20000020

0800045c <__libc_init_array>:
 800045c:	b570      	push	{r4, r5, r6, lr}
 800045e:	4d0d      	ldr	r5, [pc, #52]	@ (8000494 <__libc_init_array+0x38>)
 8000460:	4c0d      	ldr	r4, [pc, #52]	@ (8000498 <__libc_init_array+0x3c>)
 8000462:	1b64      	subs	r4, r4, r5
 8000464:	10a4      	asrs	r4, r4, #2
 8000466:	2600      	movs	r6, #0
 8000468:	42a6      	cmp	r6, r4
 800046a:	d109      	bne.n	8000480 <__libc_init_array+0x24>
 800046c:	4d0b      	ldr	r5, [pc, #44]	@ (800049c <__libc_init_array+0x40>)
 800046e:	4c0c      	ldr	r4, [pc, #48]	@ (80004a0 <__libc_init_array+0x44>)
 8000470:	f000 f818 	bl	80004a4 <_init>
 8000474:	1b64      	subs	r4, r4, r5
 8000476:	10a4      	asrs	r4, r4, #2
 8000478:	2600      	movs	r6, #0
 800047a:	42a6      	cmp	r6, r4
 800047c:	d105      	bne.n	800048a <__libc_init_array+0x2e>
 800047e:	bd70      	pop	{r4, r5, r6, pc}
 8000480:	f855 3b04 	ldr.w	r3, [r5], #4
 8000484:	4798      	blx	r3
 8000486:	3601      	adds	r6, #1
 8000488:	e7ee      	b.n	8000468 <__libc_init_array+0xc>
 800048a:	f855 3b04 	ldr.w	r3, [r5], #4
 800048e:	4798      	blx	r3
 8000490:	3601      	adds	r6, #1
 8000492:	e7f2      	b.n	800047a <__libc_init_array+0x1e>
 8000494:	080004dc 	.word	0x080004dc
 8000498:	080004dc 	.word	0x080004dc
 800049c:	080004dc 	.word	0x080004dc
 80004a0:	080004e0 	.word	0x080004e0

080004a4 <_init>:
 80004a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80004a6:	bf00      	nop
 80004a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80004aa:	bc08      	pop	{r3}
 80004ac:	469e      	mov	lr, r3
 80004ae:	4770      	bx	lr

080004b0 <_fini>:
 80004b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80004b2:	bf00      	nop
 80004b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80004b6:	bc08      	pop	{r3}
 80004b8:	469e      	mov	lr, r3
 80004ba:	4770      	bx	lr
