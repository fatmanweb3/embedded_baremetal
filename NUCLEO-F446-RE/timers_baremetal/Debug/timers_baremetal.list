
timers_baremetal.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000002d0  080001c4  080001c4  000011c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000494  08000494  00002004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000494  08000494  00002004  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  08000494  08000494  00002004  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  08000494  08000494  00002004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000494  08000494  00001494  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08000498  08000498  00001498  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000004  20000000  0800049c  00002000  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000020  20000004  080004a0  00002004  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000024  080004a0  00002024  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00002004  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000189a  00000000  00000000  00002034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000535  00000000  00000000  000038ce  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000001e8  00000000  00000000  00003e08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000156  00000000  00000000  00003ff0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018f7a  00000000  00000000  00004146  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00001f69  00000000  00000000  0001d0c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c336b  00000000  00000000  0001f029  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000e2394  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000005cc  00000000  00000000  000e23d8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000067  00000000  00000000  000e29a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	@ (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	@ (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	@ (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	20000004 	.word	0x20000004
 80001e0:	00000000 	.word	0x00000000
 80001e4:	0800047c 	.word	0x0800047c

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	@ (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	@ (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	@ (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000008 	.word	0x20000008
 8000200:	0800047c 	.word	0x0800047c

08000204 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000204:	b480      	push	{r7}
 8000206:	b083      	sub	sp, #12
 8000208:	af00      	add	r7, sp, #0
 800020a:	4603      	mov	r3, r0
 800020c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800020e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000212:	2b00      	cmp	r3, #0
 8000214:	db0b      	blt.n	800022e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000216:	79fb      	ldrb	r3, [r7, #7]
 8000218:	f003 021f 	and.w	r2, r3, #31
 800021c:	4907      	ldr	r1, [pc, #28]	@ (800023c <__NVIC_EnableIRQ+0x38>)
 800021e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000222:	095b      	lsrs	r3, r3, #5
 8000224:	2001      	movs	r0, #1
 8000226:	fa00 f202 	lsl.w	r2, r0, r2
 800022a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800022e:	bf00      	nop
 8000230:	370c      	adds	r7, #12
 8000232:	46bd      	mov	sp, r7
 8000234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000238:	4770      	bx	lr
 800023a:	bf00      	nop
 800023c:	e000e100 	.word	0xe000e100

08000240 <rcc_init>:
#include "stm32f446xx.h"
#include "stdint.h"


void rcc_init(void)
{
 8000240:	b480      	push	{r7}
 8000242:	af00      	add	r7, sp, #0
    RCC->AHB1ENR |= RCC_AHB1ENR_GPIOAEN;
 8000244:	4b08      	ldr	r3, [pc, #32]	@ (8000268 <rcc_init+0x28>)
 8000246:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000248:	4a07      	ldr	r2, [pc, #28]	@ (8000268 <rcc_init+0x28>)
 800024a:	f043 0301 	orr.w	r3, r3, #1
 800024e:	6313      	str	r3, [r2, #48]	@ 0x30

    RCC->APB1ENR |= RCC_APB1ENR_TIM2EN;
 8000250:	4b05      	ldr	r3, [pc, #20]	@ (8000268 <rcc_init+0x28>)
 8000252:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000254:	4a04      	ldr	r2, [pc, #16]	@ (8000268 <rcc_init+0x28>)
 8000256:	f043 0301 	orr.w	r3, r3, #1
 800025a:	6413      	str	r3, [r2, #64]	@ 0x40
}
 800025c:	bf00      	nop
 800025e:	46bd      	mov	sp, r7
 8000260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000264:	4770      	bx	lr
 8000266:	bf00      	nop
 8000268:	40023800 	.word	0x40023800

0800026c <gpio_init>:

void gpio_init(void)
{
 800026c:	b480      	push	{r7}
 800026e:	af00      	add	r7, sp, #0
    GPIOA->MODER &= ~(GPIO_MODER_MODER5_Msk);
 8000270:	4b08      	ldr	r3, [pc, #32]	@ (8000294 <gpio_init+0x28>)
 8000272:	681b      	ldr	r3, [r3, #0]
 8000274:	4a07      	ldr	r2, [pc, #28]	@ (8000294 <gpio_init+0x28>)
 8000276:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 800027a:	6013      	str	r3, [r2, #0]

    GPIOA->MODER |= (1U << GPIO_MODER_MODER5_Pos); // WHY SETTING 1 IS I'M NOT GENRATING A LTERNAT FUNCTION LIEK PWM TO PAS5 I'M JUST TOGGLING LED USING TIMER INTERRUPTS.
 800027c:	4b05      	ldr	r3, [pc, #20]	@ (8000294 <gpio_init+0x28>)
 800027e:	681b      	ldr	r3, [r3, #0]
 8000280:	4a04      	ldr	r2, [pc, #16]	@ (8000294 <gpio_init+0x28>)
 8000282:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000286:	6013      	str	r3, [r2, #0]
}
 8000288:	bf00      	nop
 800028a:	46bd      	mov	sp, r7
 800028c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000290:	4770      	bx	lr
 8000292:	bf00      	nop
 8000294:	40020000 	.word	0x40020000

08000298 <tim2_init>:

void tim2_init(void)
{
 8000298:	b580      	push	{r7, lr}
 800029a:	af00      	add	r7, sp, #0
    TIM2->PSC = 15999;
 800029c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80002a0:	f643 627f 	movw	r2, #15999	@ 0x3e7f
 80002a4:	629a      	str	r2, [r3, #40]	@ 0x28

    TIM2->ARR = 9999;
 80002a6:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80002aa:	f242 720f 	movw	r2, #9999	@ 0x270f
 80002ae:	62da      	str	r2, [r3, #44]	@ 0x2c

    TIM2->CNT = 0;
 80002b0:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80002b4:	2200      	movs	r2, #0
 80002b6:	625a      	str	r2, [r3, #36]	@ 0x24


    TIM2->DIER |= TIM_DIER_UIE; // ENABLING THE UPDATE INTERRUPT 
 80002b8:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80002bc:	68db      	ldr	r3, [r3, #12]
 80002be:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80002c2:	f043 0301 	orr.w	r3, r3, #1
 80002c6:	60d3      	str	r3, [r2, #12]

    NVIC_EnableIRQ(TIM2_IRQn); // enable tim2_IRQn
 80002c8:	201c      	movs	r0, #28
 80002ca:	f7ff ff9b 	bl	8000204 <__NVIC_EnableIRQ>

    TIM2->CR1 |= TIM_CR1_CEN; // ENABLING THE TIMER.
 80002ce:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80002d2:	681b      	ldr	r3, [r3, #0]
 80002d4:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80002d8:	f043 0301 	orr.w	r3, r3, #1
 80002dc:	6013      	str	r3, [r2, #0]
}
 80002de:	bf00      	nop
 80002e0:	bd80      	pop	{r7, pc}
	...

080002e4 <TIM2_IRQHandler>:

void TIM2_IRQHandler(void)
{
 80002e4:	b480      	push	{r7}
 80002e6:	af00      	add	r7, sp, #0
    if (TIM2->SR & TIM_SR_UIF)
 80002e8:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80002ec:	691b      	ldr	r3, [r3, #16]
 80002ee:	f003 0301 	and.w	r3, r3, #1
 80002f2:	2b00      	cmp	r3, #0
 80002f4:	d00d      	beq.n	8000312 <TIM2_IRQHandler+0x2e>
    {
        TIM2->SR &= ~(TIM_SR_UIF);
 80002f6:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80002fa:	691b      	ldr	r3, [r3, #16]
 80002fc:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000300:	f023 0301 	bic.w	r3, r3, #1
 8000304:	6113      	str	r3, [r2, #16]
        GPIOA->ODR ^= 1U << GPIO_ODR_OD5_Pos;
 8000306:	4b05      	ldr	r3, [pc, #20]	@ (800031c <TIM2_IRQHandler+0x38>)
 8000308:	695b      	ldr	r3, [r3, #20]
 800030a:	4a04      	ldr	r2, [pc, #16]	@ (800031c <TIM2_IRQHandler+0x38>)
 800030c:	f083 0320 	eor.w	r3, r3, #32
 8000310:	6153      	str	r3, [r2, #20]
    }
}
 8000312:	bf00      	nop
 8000314:	46bd      	mov	sp, r7
 8000316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800031a:	4770      	bx	lr
 800031c:	40020000 	.word	0x40020000

08000320 <main>:

int main(void)
{
 8000320:	b580      	push	{r7, lr}
 8000322:	af00      	add	r7, sp, #0
    rcc_init();
 8000324:	f7ff ff8c 	bl	8000240 <rcc_init>
    gpio_init();
 8000328:	f7ff ffa0 	bl	800026c <gpio_init>
    tim2_init();
 800032c:	f7ff ffb4 	bl	8000298 <tim2_init>

    while(1)
 8000330:	bf00      	nop
 8000332:	e7fd      	b.n	8000330 <main+0x10>

08000334 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000334:	b480      	push	{r7}
 8000336:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000338:	bf00      	nop
 800033a:	e7fd      	b.n	8000338 <NMI_Handler+0x4>

0800033c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800033c:	b480      	push	{r7}
 800033e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000340:	bf00      	nop
 8000342:	e7fd      	b.n	8000340 <HardFault_Handler+0x4>

08000344 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000344:	b480      	push	{r7}
 8000346:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000348:	bf00      	nop
 800034a:	e7fd      	b.n	8000348 <MemManage_Handler+0x4>

0800034c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800034c:	b480      	push	{r7}
 800034e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000350:	bf00      	nop
 8000352:	e7fd      	b.n	8000350 <BusFault_Handler+0x4>

08000354 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000354:	b480      	push	{r7}
 8000356:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000358:	bf00      	nop
 800035a:	e7fd      	b.n	8000358 <UsageFault_Handler+0x4>

0800035c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800035c:	b480      	push	{r7}
 800035e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000360:	bf00      	nop
 8000362:	46bd      	mov	sp, r7
 8000364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000368:	4770      	bx	lr

0800036a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800036a:	b480      	push	{r7}
 800036c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800036e:	bf00      	nop
 8000370:	46bd      	mov	sp, r7
 8000372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000376:	4770      	bx	lr

08000378 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000378:	b480      	push	{r7}
 800037a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800037c:	bf00      	nop
 800037e:	46bd      	mov	sp, r7
 8000380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000384:	4770      	bx	lr

08000386 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000386:	b580      	push	{r7, lr}
 8000388:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800038a:	f000 f83f 	bl	800040c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800038e:	bf00      	nop
 8000390:	bd80      	pop	{r7, pc}
	...

08000394 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000394:	b480      	push	{r7}
 8000396:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000398:	4b06      	ldr	r3, [pc, #24]	@ (80003b4 <SystemInit+0x20>)
 800039a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800039e:	4a05      	ldr	r2, [pc, #20]	@ (80003b4 <SystemInit+0x20>)
 80003a0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80003a4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80003a8:	bf00      	nop
 80003aa:	46bd      	mov	sp, r7
 80003ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003b0:	4770      	bx	lr
 80003b2:	bf00      	nop
 80003b4:	e000ed00 	.word	0xe000ed00

080003b8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80003b8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80003f0 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 80003bc:	f7ff ffea 	bl	8000394 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80003c0:	480c      	ldr	r0, [pc, #48]	@ (80003f4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80003c2:	490d      	ldr	r1, [pc, #52]	@ (80003f8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80003c4:	4a0d      	ldr	r2, [pc, #52]	@ (80003fc <LoopFillZerobss+0x1a>)
  movs r3, #0
 80003c6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80003c8:	e002      	b.n	80003d0 <LoopCopyDataInit>

080003ca <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80003ca:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80003cc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80003ce:	3304      	adds	r3, #4

080003d0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80003d0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80003d2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80003d4:	d3f9      	bcc.n	80003ca <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80003d6:	4a0a      	ldr	r2, [pc, #40]	@ (8000400 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80003d8:	4c0a      	ldr	r4, [pc, #40]	@ (8000404 <LoopFillZerobss+0x22>)
  movs r3, #0
 80003da:	2300      	movs	r3, #0
  b LoopFillZerobss
 80003dc:	e001      	b.n	80003e2 <LoopFillZerobss>

080003de <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80003de:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80003e0:	3204      	adds	r2, #4

080003e2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80003e2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80003e4:	d3fb      	bcc.n	80003de <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 80003e6:	f000 f825 	bl	8000434 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80003ea:	f7ff ff99 	bl	8000320 <main>
  bx  lr    
 80003ee:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80003f0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80003f4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80003f8:	20000004 	.word	0x20000004
  ldr r2, =_sidata
 80003fc:	0800049c 	.word	0x0800049c
  ldr r2, =_sbss
 8000400:	20000004 	.word	0x20000004
  ldr r4, =_ebss
 8000404:	20000024 	.word	0x20000024

08000408 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000408:	e7fe      	b.n	8000408 <ADC_IRQHandler>
	...

0800040c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800040c:	b480      	push	{r7}
 800040e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000410:	4b06      	ldr	r3, [pc, #24]	@ (800042c <HAL_IncTick+0x20>)
 8000412:	781b      	ldrb	r3, [r3, #0]
 8000414:	461a      	mov	r2, r3
 8000416:	4b06      	ldr	r3, [pc, #24]	@ (8000430 <HAL_IncTick+0x24>)
 8000418:	681b      	ldr	r3, [r3, #0]
 800041a:	4413      	add	r3, r2
 800041c:	4a04      	ldr	r2, [pc, #16]	@ (8000430 <HAL_IncTick+0x24>)
 800041e:	6013      	str	r3, [r2, #0]
}
 8000420:	bf00      	nop
 8000422:	46bd      	mov	sp, r7
 8000424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000428:	4770      	bx	lr
 800042a:	bf00      	nop
 800042c:	20000000 	.word	0x20000000
 8000430:	20000020 	.word	0x20000020

08000434 <__libc_init_array>:
 8000434:	b570      	push	{r4, r5, r6, lr}
 8000436:	4d0d      	ldr	r5, [pc, #52]	@ (800046c <__libc_init_array+0x38>)
 8000438:	4c0d      	ldr	r4, [pc, #52]	@ (8000470 <__libc_init_array+0x3c>)
 800043a:	1b64      	subs	r4, r4, r5
 800043c:	10a4      	asrs	r4, r4, #2
 800043e:	2600      	movs	r6, #0
 8000440:	42a6      	cmp	r6, r4
 8000442:	d109      	bne.n	8000458 <__libc_init_array+0x24>
 8000444:	4d0b      	ldr	r5, [pc, #44]	@ (8000474 <__libc_init_array+0x40>)
 8000446:	4c0c      	ldr	r4, [pc, #48]	@ (8000478 <__libc_init_array+0x44>)
 8000448:	f000 f818 	bl	800047c <_init>
 800044c:	1b64      	subs	r4, r4, r5
 800044e:	10a4      	asrs	r4, r4, #2
 8000450:	2600      	movs	r6, #0
 8000452:	42a6      	cmp	r6, r4
 8000454:	d105      	bne.n	8000462 <__libc_init_array+0x2e>
 8000456:	bd70      	pop	{r4, r5, r6, pc}
 8000458:	f855 3b04 	ldr.w	r3, [r5], #4
 800045c:	4798      	blx	r3
 800045e:	3601      	adds	r6, #1
 8000460:	e7ee      	b.n	8000440 <__libc_init_array+0xc>
 8000462:	f855 3b04 	ldr.w	r3, [r5], #4
 8000466:	4798      	blx	r3
 8000468:	3601      	adds	r6, #1
 800046a:	e7f2      	b.n	8000452 <__libc_init_array+0x1e>
 800046c:	08000494 	.word	0x08000494
 8000470:	08000494 	.word	0x08000494
 8000474:	08000494 	.word	0x08000494
 8000478:	08000498 	.word	0x08000498

0800047c <_init>:
 800047c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800047e:	bf00      	nop
 8000480:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000482:	bc08      	pop	{r3}
 8000484:	469e      	mov	lr, r3
 8000486:	4770      	bx	lr

08000488 <_fini>:
 8000488:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800048a:	bf00      	nop
 800048c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800048e:	bc08      	pop	{r3}
 8000490:	469e      	mov	lr, r3
 8000492:	4770      	bx	lr
