
PWM_LED_Dimming_with_TIMER.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000003dc  080001c4  080001c4  000011c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  080005a0  080005a0  00002008  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  080005a0  080005a0  00002008  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  080005a0  080005a0  00002008  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  080005a0  080005a0  00002008  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080005a0  080005a0  000015a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080005a4  080005a4  000015a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000008  20000000  080005a8  00002000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000024  20000008  080005b0  00002008  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000002c  080005b0  0000202c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00002008  2**0
                  CONTENTS, READONLY
 12 .debug_info   00001acc  00000000  00000000  00002038  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000568  00000000  00000000  00003b04  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000001f0  00000000  00000000  00004070  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000015d  00000000  00000000  00004260  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018f86  00000000  00000000  000043bd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00001fcb  00000000  00000000  0001d343  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c1648  00000000  00000000  0001f30e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000e0956  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000005f4  00000000  00000000  000e099c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000071  00000000  00000000  000e0f90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	@ (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	@ (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	@ (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	20000008 	.word	0x20000008
 80001e0:	00000000 	.word	0x00000000
 80001e4:	08000588 	.word	0x08000588

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	@ (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	@ (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	@ (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	2000000c 	.word	0x2000000c
 8000200:	08000588 	.word	0x08000588

08000204 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000204:	b480      	push	{r7}
 8000206:	b083      	sub	sp, #12
 8000208:	af00      	add	r7, sp, #0
 800020a:	4603      	mov	r3, r0
 800020c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800020e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000212:	2b00      	cmp	r3, #0
 8000214:	db0b      	blt.n	800022e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000216:	79fb      	ldrb	r3, [r7, #7]
 8000218:	f003 021f 	and.w	r2, r3, #31
 800021c:	4907      	ldr	r1, [pc, #28]	@ (800023c <__NVIC_EnableIRQ+0x38>)
 800021e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000222:	095b      	lsrs	r3, r3, #5
 8000224:	2001      	movs	r0, #1
 8000226:	fa00 f202 	lsl.w	r2, r0, r2
 800022a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800022e:	bf00      	nop
 8000230:	370c      	adds	r7, #12
 8000232:	46bd      	mov	sp, r7
 8000234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000238:	4770      	bx	lr
 800023a:	bf00      	nop
 800023c:	e000e100 	.word	0xe000e100

08000240 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000240:	b480      	push	{r7}
 8000242:	b083      	sub	sp, #12
 8000244:	af00      	add	r7, sp, #0
 8000246:	4603      	mov	r3, r0
 8000248:	6039      	str	r1, [r7, #0]
 800024a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800024c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000250:	2b00      	cmp	r3, #0
 8000252:	db0a      	blt.n	800026a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000254:	683b      	ldr	r3, [r7, #0]
 8000256:	b2da      	uxtb	r2, r3
 8000258:	490c      	ldr	r1, [pc, #48]	@ (800028c <__NVIC_SetPriority+0x4c>)
 800025a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800025e:	0112      	lsls	r2, r2, #4
 8000260:	b2d2      	uxtb	r2, r2
 8000262:	440b      	add	r3, r1
 8000264:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000268:	e00a      	b.n	8000280 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800026a:	683b      	ldr	r3, [r7, #0]
 800026c:	b2da      	uxtb	r2, r3
 800026e:	4908      	ldr	r1, [pc, #32]	@ (8000290 <__NVIC_SetPriority+0x50>)
 8000270:	79fb      	ldrb	r3, [r7, #7]
 8000272:	f003 030f 	and.w	r3, r3, #15
 8000276:	3b04      	subs	r3, #4
 8000278:	0112      	lsls	r2, r2, #4
 800027a:	b2d2      	uxtb	r2, r2
 800027c:	440b      	add	r3, r1
 800027e:	761a      	strb	r2, [r3, #24]
}
 8000280:	bf00      	nop
 8000282:	370c      	adds	r7, #12
 8000284:	46bd      	mov	sp, r7
 8000286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800028a:	4770      	bx	lr
 800028c:	e000e100 	.word	0xe000e100
 8000290:	e000ed00 	.word	0xe000ed00

08000294 <init_gpio>:
void TIM2_PWM_Init(void);
void TIM6_Timebase_Init(void);


void init_gpio(void)
{
 8000294:	b480      	push	{r7}
 8000296:	af00      	add	r7, sp, #0
	RCC->AHB1ENR |= RCC_AHB1ENR_GPIOAEN; // enabling the clock for gpioa
 8000298:	4b11      	ldr	r3, [pc, #68]	@ (80002e0 <init_gpio+0x4c>)
 800029a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800029c:	4a10      	ldr	r2, [pc, #64]	@ (80002e0 <init_gpio+0x4c>)
 800029e:	f043 0301 	orr.w	r3, r3, #1
 80002a2:	6313      	str	r3, [r2, #48]	@ 0x30
	
	GPIOA->MODER &= ~(GPIO_MODER_MODER5_Msk); // clearing the pin for pa5
 80002a4:	4b0f      	ldr	r3, [pc, #60]	@ (80002e4 <init_gpio+0x50>)
 80002a6:	681b      	ldr	r3, [r3, #0]
 80002a8:	4a0e      	ldr	r2, [pc, #56]	@ (80002e4 <init_gpio+0x50>)
 80002aa:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 80002ae:	6013      	str	r3, [r2, #0]

	GPIOA->MODER |= GPIO_MODER_MODER5_1; //setting the moder for alternate function mode
 80002b0:	4b0c      	ldr	r3, [pc, #48]	@ (80002e4 <init_gpio+0x50>)
 80002b2:	681b      	ldr	r3, [r3, #0]
 80002b4:	4a0b      	ldr	r2, [pc, #44]	@ (80002e4 <init_gpio+0x50>)
 80002b6:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80002ba:	6013      	str	r3, [r2, #0]

	GPIOA->AFR[0] &=  ~GPIO_AFRL_AFSEL5_Msk; // clears the bit first.
 80002bc:	4b09      	ldr	r3, [pc, #36]	@ (80002e4 <init_gpio+0x50>)
 80002be:	6a1b      	ldr	r3, [r3, #32]
 80002c0:	4a08      	ldr	r2, [pc, #32]	@ (80002e4 <init_gpio+0x50>)
 80002c2:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 80002c6:	6213      	str	r3, [r2, #32]

	GPIOA->AFR[0] |= GPIO_AFRL_AFSEL5_1; // SET AF2
 80002c8:	4b06      	ldr	r3, [pc, #24]	@ (80002e4 <init_gpio+0x50>)
 80002ca:	6a1b      	ldr	r3, [r3, #32]
 80002cc:	4a05      	ldr	r2, [pc, #20]	@ (80002e4 <init_gpio+0x50>)
 80002ce:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80002d2:	6213      	str	r3, [r2, #32]
}
 80002d4:	bf00      	nop
 80002d6:	46bd      	mov	sp, r7
 80002d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop
 80002e0:	40023800 	.word	0x40023800
 80002e4:	40020000 	.word	0x40020000

080002e8 <TIM2_PWM_Init>:

void TIM2_PWM_Init(void)
{
 80002e8:	b480      	push	{r7}
 80002ea:	af00      	add	r7, sp, #0
	RCC->APB1ENR |= RCC_APB1ENR_TIM2EN; // ENABLING THE TIMER 2 FOR APB 1 BUS
 80002ec:	4b1f      	ldr	r3, [pc, #124]	@ (800036c <TIM2_PWM_Init+0x84>)
 80002ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80002f0:	4a1e      	ldr	r2, [pc, #120]	@ (800036c <TIM2_PWM_Init+0x84>)
 80002f2:	f043 0301 	orr.w	r3, r3, #1
 80002f6:	6413      	str	r3, [r2, #64]	@ 0x40

	// Set the prescaler and period for 1000 Hz PWM
    // Assuming 16MHz clock:
    // Period = (16,000,000 / (1000 * 100)) - 1 = 159
    // Prescaler = 0 (no prescaling, we use a single timer for frequency and resolution)
	TIM2->PSC = 0; // No prescaler, since we want a good duty cycle resolution
 80002f8:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80002fc:	2200      	movs	r2, #0
 80002fe:	629a      	str	r2, [r3, #40]	@ 0x28
    TIM2->ARR = 159; // Period for 1000 Hz (16MHz / 16000 = 1000)
 8000300:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000304:	229f      	movs	r2, #159	@ 0x9f
 8000306:	62da      	str	r2, [r3, #44]	@ 0x2c

	//CONFIGURE THE TIMER 2 CHANNEL 1 FOR PWM MODE
	TIM2->CCMR1 &= ~(TIM_CCMR1_OC1M_Msk);
 8000308:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800030c:	699b      	ldr	r3, [r3, #24]
 800030e:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000312:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8000316:	6193      	str	r3, [r2, #24]
	TIM2->CCMR1 |= TIM_CCMR1_OC1M_1 | TIM_CCMR1_OC1M_2;
 8000318:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800031c:	699b      	ldr	r3, [r3, #24]
 800031e:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000322:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8000326:	6193      	str	r3, [r2, #24]

	TIM2->CCMR1 |= TIM_CCMR1_OC1PE;
 8000328:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800032c:	699b      	ldr	r3, [r3, #24]
 800032e:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000332:	f043 0308 	orr.w	r3, r3, #8
 8000336:	6193      	str	r3, [r2, #24]

	TIM2->CCER |= TIM_CCER_CC1E;
 8000338:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800033c:	6a1b      	ldr	r3, [r3, #32]
 800033e:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000342:	f043 0301 	orr.w	r3, r3, #1
 8000346:	6213      	str	r3, [r2, #32]

	TIM2->CCR1 = 0;
 8000348:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800034c:	2200      	movs	r2, #0
 800034e:	635a      	str	r2, [r3, #52]	@ 0x34

	TIM2->CR1 |= TIM_CR1_CEN;
 8000350:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000354:	681b      	ldr	r3, [r3, #0]
 8000356:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800035a:	f043 0301 	orr.w	r3, r3, #1
 800035e:	6013      	str	r3, [r2, #0]

}
 8000360:	bf00      	nop
 8000362:	46bd      	mov	sp, r7
 8000364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000368:	4770      	bx	lr
 800036a:	bf00      	nop
 800036c:	40023800 	.word	0x40023800

08000370 <TIM6_Timebase_Init>:

// Timer 6 Timebase Initialization (20ms interrupt)
void TIM6_Timebase_Init(void) {
 8000370:	b580      	push	{r7, lr}
 8000372:	af00      	add	r7, sp, #0
    // Enable the clock for TIM6
    RCC->APB1ENR |= RCC_APB1ENR_TIM6EN;
 8000374:	4b10      	ldr	r3, [pc, #64]	@ (80003b8 <TIM6_Timebase_Init+0x48>)
 8000376:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000378:	4a0f      	ldr	r2, [pc, #60]	@ (80003b8 <TIM6_Timebase_Init+0x48>)
 800037a:	f043 0310 	orr.w	r3, r3, #16
 800037e:	6413      	str	r3, [r2, #64]	@ 0x40
    // Configure TIM6 for a 20ms interrupt
    // Assuming 16MHz clock:
    // Prescaler: 15999
    // Period: 19
    // (16,000,000 / (15999+1)) / (19+1) = 16,000,000 / 16,000 / 20 = 1000 / 20 = 50 Hz (20ms)
    TIM6->PSC = 15999;
 8000380:	4b0e      	ldr	r3, [pc, #56]	@ (80003bc <TIM6_Timebase_Init+0x4c>)
 8000382:	f643 627f 	movw	r2, #15999	@ 0x3e7f
 8000386:	629a      	str	r2, [r3, #40]	@ 0x28
    TIM6->ARR = 19;
 8000388:	4b0c      	ldr	r3, [pc, #48]	@ (80003bc <TIM6_Timebase_Init+0x4c>)
 800038a:	2213      	movs	r2, #19
 800038c:	62da      	str	r2, [r3, #44]	@ 0x2c

    // Enable the Update Interrupt
    TIM6->DIER |= TIM_DIER_UIE;
 800038e:	4b0b      	ldr	r3, [pc, #44]	@ (80003bc <TIM6_Timebase_Init+0x4c>)
 8000390:	68db      	ldr	r3, [r3, #12]
 8000392:	4a0a      	ldr	r2, [pc, #40]	@ (80003bc <TIM6_Timebase_Init+0x4c>)
 8000394:	f043 0301 	orr.w	r3, r3, #1
 8000398:	60d3      	str	r3, [r2, #12]

    // Enable TIM6 interrupt in the NVIC
    NVIC_SetPriority(TIM6_DAC_IRQn, 0);
 800039a:	2100      	movs	r1, #0
 800039c:	2036      	movs	r0, #54	@ 0x36
 800039e:	f7ff ff4f 	bl	8000240 <__NVIC_SetPriority>
    NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80003a2:	2036      	movs	r0, #54	@ 0x36
 80003a4:	f7ff ff2e 	bl	8000204 <__NVIC_EnableIRQ>

    // Start the timer
    TIM6->CR1 |= TIM_CR1_CEN;
 80003a8:	4b04      	ldr	r3, [pc, #16]	@ (80003bc <TIM6_Timebase_Init+0x4c>)
 80003aa:	681b      	ldr	r3, [r3, #0]
 80003ac:	4a03      	ldr	r2, [pc, #12]	@ (80003bc <TIM6_Timebase_Init+0x4c>)
 80003ae:	f043 0301 	orr.w	r3, r3, #1
 80003b2:	6013      	str	r3, [r2, #0]
}
 80003b4:	bf00      	nop
 80003b6:	bd80      	pop	{r7, pc}
 80003b8:	40023800 	.word	0x40023800
 80003bc:	40001000 	.word	0x40001000

080003c0 <TIM6_DAC_IRQHandler>:

// Timer 6 Interrupt Service Routine (ISR)
void TIM6_DAC_IRQHandler(void) {
 80003c0:	b480      	push	{r7}
 80003c2:	af00      	add	r7, sp, #0
    // Check if the update interrupt flag is set
    if (TIM6->SR & TIM_SR_UIF) {
 80003c4:	4b16      	ldr	r3, [pc, #88]	@ (8000420 <TIM6_DAC_IRQHandler+0x60>)
 80003c6:	691b      	ldr	r3, [r3, #16]
 80003c8:	f003 0301 	and.w	r3, r3, #1
 80003cc:	2b00      	cmp	r3, #0
 80003ce:	d021      	beq.n	8000414 <TIM6_DAC_IRQHandler+0x54>
        // Clear the interrupt flag
        TIM6->SR &= ~TIM_SR_UIF;
 80003d0:	4b13      	ldr	r3, [pc, #76]	@ (8000420 <TIM6_DAC_IRQHandler+0x60>)
 80003d2:	691b      	ldr	r3, [r3, #16]
 80003d4:	4a12      	ldr	r2, [pc, #72]	@ (8000420 <TIM6_DAC_IRQHandler+0x60>)
 80003d6:	f023 0301 	bic.w	r3, r3, #1
 80003da:	6113      	str	r3, [r2, #16]

        // Update the duty cycle step
        duty_cycle_step += ramp_direction;
 80003dc:	4b11      	ldr	r3, [pc, #68]	@ (8000424 <TIM6_DAC_IRQHandler+0x64>)
 80003de:	681a      	ldr	r2, [r3, #0]
 80003e0:	4b11      	ldr	r3, [pc, #68]	@ (8000428 <TIM6_DAC_IRQHandler+0x68>)
 80003e2:	681b      	ldr	r3, [r3, #0]
 80003e4:	4413      	add	r3, r2
 80003e6:	4a10      	ldr	r2, [pc, #64]	@ (8000428 <TIM6_DAC_IRQHandler+0x68>)
 80003e8:	6013      	str	r3, [r2, #0]

        // Update the PWM duty cycle
        TIM2->CCR1 = duty_cycle_step;
 80003ea:	4b0f      	ldr	r3, [pc, #60]	@ (8000428 <TIM6_DAC_IRQHandler+0x68>)
 80003ec:	681a      	ldr	r2, [r3, #0]
 80003ee:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80003f2:	635a      	str	r2, [r3, #52]	@ 0x34

        // Check for ramp boundaries
        if (duty_cycle_step >= 159) { // At 100% duty cycle
 80003f4:	4b0c      	ldr	r3, [pc, #48]	@ (8000428 <TIM6_DAC_IRQHandler+0x68>)
 80003f6:	681b      	ldr	r3, [r3, #0]
 80003f8:	2b9e      	cmp	r3, #158	@ 0x9e
 80003fa:	dd04      	ble.n	8000406 <TIM6_DAC_IRQHandler+0x46>
            ramp_direction = -1; // Change direction to ramp down
 80003fc:	4b09      	ldr	r3, [pc, #36]	@ (8000424 <TIM6_DAC_IRQHandler+0x64>)
 80003fe:	f04f 32ff 	mov.w	r2, #4294967295
 8000402:	601a      	str	r2, [r3, #0]
        } else if (duty_cycle_step <= 0) { // At 0% duty cycle
            ramp_direction = 1; // Change direction to ramp up
        }
    }
}
 8000404:	e006      	b.n	8000414 <TIM6_DAC_IRQHandler+0x54>
        } else if (duty_cycle_step <= 0) { // At 0% duty cycle
 8000406:	4b08      	ldr	r3, [pc, #32]	@ (8000428 <TIM6_DAC_IRQHandler+0x68>)
 8000408:	681b      	ldr	r3, [r3, #0]
 800040a:	2b00      	cmp	r3, #0
 800040c:	dc02      	bgt.n	8000414 <TIM6_DAC_IRQHandler+0x54>
            ramp_direction = 1; // Change direction to ramp up
 800040e:	4b05      	ldr	r3, [pc, #20]	@ (8000424 <TIM6_DAC_IRQHandler+0x64>)
 8000410:	2201      	movs	r2, #1
 8000412:	601a      	str	r2, [r3, #0]
}
 8000414:	bf00      	nop
 8000416:	46bd      	mov	sp, r7
 8000418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800041c:	4770      	bx	lr
 800041e:	bf00      	nop
 8000420:	40001000 	.word	0x40001000
 8000424:	20000000 	.word	0x20000000
 8000428:	20000024 	.word	0x20000024

0800042c <main>:


int main(void)
{
 800042c:	b580      	push	{r7, lr}
 800042e:	af00      	add	r7, sp, #0
	init_gpio();
 8000430:	f7ff ff30 	bl	8000294 <init_gpio>

	TIM2_PWM_Init();
 8000434:	f7ff ff58 	bl	80002e8 <TIM2_PWM_Init>

	TIM6_Timebase_Init();
 8000438:	f7ff ff9a 	bl	8000370 <TIM6_Timebase_Init>

	while(1)
 800043c:	bf00      	nop
 800043e:	e7fd      	b.n	800043c <main+0x10>

08000440 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000440:	b480      	push	{r7}
 8000442:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000444:	bf00      	nop
 8000446:	e7fd      	b.n	8000444 <NMI_Handler+0x4>

08000448 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000448:	b480      	push	{r7}
 800044a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800044c:	bf00      	nop
 800044e:	e7fd      	b.n	800044c <HardFault_Handler+0x4>

08000450 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000450:	b480      	push	{r7}
 8000452:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000454:	bf00      	nop
 8000456:	e7fd      	b.n	8000454 <MemManage_Handler+0x4>

08000458 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000458:	b480      	push	{r7}
 800045a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800045c:	bf00      	nop
 800045e:	e7fd      	b.n	800045c <BusFault_Handler+0x4>

08000460 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000460:	b480      	push	{r7}
 8000462:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000464:	bf00      	nop
 8000466:	e7fd      	b.n	8000464 <UsageFault_Handler+0x4>

08000468 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000468:	b480      	push	{r7}
 800046a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800046c:	bf00      	nop
 800046e:	46bd      	mov	sp, r7
 8000470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000474:	4770      	bx	lr

08000476 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000476:	b480      	push	{r7}
 8000478:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800047a:	bf00      	nop
 800047c:	46bd      	mov	sp, r7
 800047e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000482:	4770      	bx	lr

08000484 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000484:	b480      	push	{r7}
 8000486:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000488:	bf00      	nop
 800048a:	46bd      	mov	sp, r7
 800048c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000490:	4770      	bx	lr

08000492 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000492:	b580      	push	{r7, lr}
 8000494:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000496:	f000 f83f 	bl	8000518 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800049a:	bf00      	nop
 800049c:	bd80      	pop	{r7, pc}
	...

080004a0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80004a0:	b480      	push	{r7}
 80004a2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80004a4:	4b06      	ldr	r3, [pc, #24]	@ (80004c0 <SystemInit+0x20>)
 80004a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80004aa:	4a05      	ldr	r2, [pc, #20]	@ (80004c0 <SystemInit+0x20>)
 80004ac:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80004b0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80004b4:	bf00      	nop
 80004b6:	46bd      	mov	sp, r7
 80004b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004bc:	4770      	bx	lr
 80004be:	bf00      	nop
 80004c0:	e000ed00 	.word	0xe000ed00

080004c4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80004c4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80004fc <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 80004c8:	f7ff ffea 	bl	80004a0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80004cc:	480c      	ldr	r0, [pc, #48]	@ (8000500 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80004ce:	490d      	ldr	r1, [pc, #52]	@ (8000504 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80004d0:	4a0d      	ldr	r2, [pc, #52]	@ (8000508 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80004d2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80004d4:	e002      	b.n	80004dc <LoopCopyDataInit>

080004d6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80004d6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80004d8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80004da:	3304      	adds	r3, #4

080004dc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80004dc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80004de:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80004e0:	d3f9      	bcc.n	80004d6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80004e2:	4a0a      	ldr	r2, [pc, #40]	@ (800050c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80004e4:	4c0a      	ldr	r4, [pc, #40]	@ (8000510 <LoopFillZerobss+0x22>)
  movs r3, #0
 80004e6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80004e8:	e001      	b.n	80004ee <LoopFillZerobss>

080004ea <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80004ea:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80004ec:	3204      	adds	r2, #4

080004ee <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80004ee:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80004f0:	d3fb      	bcc.n	80004ea <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 80004f2:	f000 f825 	bl	8000540 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80004f6:	f7ff ff99 	bl	800042c <main>
  bx  lr    
 80004fa:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80004fc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000500:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000504:	20000008 	.word	0x20000008
  ldr r2, =_sidata
 8000508:	080005a8 	.word	0x080005a8
  ldr r2, =_sbss
 800050c:	20000008 	.word	0x20000008
  ldr r4, =_ebss
 8000510:	2000002c 	.word	0x2000002c

08000514 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000514:	e7fe      	b.n	8000514 <ADC_IRQHandler>
	...

08000518 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000518:	b480      	push	{r7}
 800051a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800051c:	4b06      	ldr	r3, [pc, #24]	@ (8000538 <HAL_IncTick+0x20>)
 800051e:	781b      	ldrb	r3, [r3, #0]
 8000520:	461a      	mov	r2, r3
 8000522:	4b06      	ldr	r3, [pc, #24]	@ (800053c <HAL_IncTick+0x24>)
 8000524:	681b      	ldr	r3, [r3, #0]
 8000526:	4413      	add	r3, r2
 8000528:	4a04      	ldr	r2, [pc, #16]	@ (800053c <HAL_IncTick+0x24>)
 800052a:	6013      	str	r3, [r2, #0]
}
 800052c:	bf00      	nop
 800052e:	46bd      	mov	sp, r7
 8000530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000534:	4770      	bx	lr
 8000536:	bf00      	nop
 8000538:	20000004 	.word	0x20000004
 800053c:	20000028 	.word	0x20000028

08000540 <__libc_init_array>:
 8000540:	b570      	push	{r4, r5, r6, lr}
 8000542:	4d0d      	ldr	r5, [pc, #52]	@ (8000578 <__libc_init_array+0x38>)
 8000544:	4c0d      	ldr	r4, [pc, #52]	@ (800057c <__libc_init_array+0x3c>)
 8000546:	1b64      	subs	r4, r4, r5
 8000548:	10a4      	asrs	r4, r4, #2
 800054a:	2600      	movs	r6, #0
 800054c:	42a6      	cmp	r6, r4
 800054e:	d109      	bne.n	8000564 <__libc_init_array+0x24>
 8000550:	4d0b      	ldr	r5, [pc, #44]	@ (8000580 <__libc_init_array+0x40>)
 8000552:	4c0c      	ldr	r4, [pc, #48]	@ (8000584 <__libc_init_array+0x44>)
 8000554:	f000 f818 	bl	8000588 <_init>
 8000558:	1b64      	subs	r4, r4, r5
 800055a:	10a4      	asrs	r4, r4, #2
 800055c:	2600      	movs	r6, #0
 800055e:	42a6      	cmp	r6, r4
 8000560:	d105      	bne.n	800056e <__libc_init_array+0x2e>
 8000562:	bd70      	pop	{r4, r5, r6, pc}
 8000564:	f855 3b04 	ldr.w	r3, [r5], #4
 8000568:	4798      	blx	r3
 800056a:	3601      	adds	r6, #1
 800056c:	e7ee      	b.n	800054c <__libc_init_array+0xc>
 800056e:	f855 3b04 	ldr.w	r3, [r5], #4
 8000572:	4798      	blx	r3
 8000574:	3601      	adds	r6, #1
 8000576:	e7f2      	b.n	800055e <__libc_init_array+0x1e>
 8000578:	080005a0 	.word	0x080005a0
 800057c:	080005a0 	.word	0x080005a0
 8000580:	080005a0 	.word	0x080005a0
 8000584:	080005a4 	.word	0x080005a4

08000588 <_init>:
 8000588:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800058a:	bf00      	nop
 800058c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800058e:	bc08      	pop	{r3}
 8000590:	469e      	mov	lr, r3
 8000592:	4770      	bx	lr

08000594 <_fini>:
 8000594:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000596:	bf00      	nop
 8000598:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800059a:	bc08      	pop	{r3}
 800059c:	469e      	mov	lr, r3
 800059e:	4770      	bx	lr
