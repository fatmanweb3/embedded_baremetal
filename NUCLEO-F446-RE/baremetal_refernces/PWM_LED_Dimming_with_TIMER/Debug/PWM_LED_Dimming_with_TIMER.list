
PWM_LED_Dimming_with_TIMER.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000027c  080001c4  080001c4  000011c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000440  08000440  00002004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000440  08000440  00002004  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  08000440  08000440  00002004  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  08000440  08000440  00002004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000440  08000440  00001440  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08000444  08000444  00001444  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000004  20000000  08000448  00002000  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000020  20000004  0800044c  00002004  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000024  0800044c  00002024  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00002004  2**0
                  CONTENTS, READONLY
 12 .debug_info   00001456  00000000  00000000  00002034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000498  00000000  00000000  0000348a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000001d8  00000000  00000000  00003928  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000014a  00000000  00000000  00003b00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018f5c  00000000  00000000  00003c4a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00001ee1  00000000  00000000  0001cba6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c1534  00000000  00000000  0001ea87  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000dffbb  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000588  00000000  00000000  000e0000  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000071  00000000  00000000  000e0588  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	@ (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	@ (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	@ (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	20000004 	.word	0x20000004
 80001e0:	00000000 	.word	0x00000000
 80001e4:	08000428 	.word	0x08000428

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	@ (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	@ (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	@ (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000008 	.word	0x20000008
 8000200:	08000428 	.word	0x08000428

08000204 <rcc_init>:


//enabling the clocks 

void rcc_init(void)
{
 8000204:	b480      	push	{r7}
 8000206:	af00      	add	r7, sp, #0
    RCC->AHB1ENR |= RCC_AHB1ENR_GPIOAEN;// ENABLING THE CLOCKS FOR APHB 1 BUSS
 8000208:	4b08      	ldr	r3, [pc, #32]	@ (800022c <rcc_init+0x28>)
 800020a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800020c:	4a07      	ldr	r2, [pc, #28]	@ (800022c <rcc_init+0x28>)
 800020e:	f043 0301 	orr.w	r3, r3, #1
 8000212:	6313      	str	r3, [r2, #48]	@ 0x30
    RCC->APB1ENR |= RCC_APB1ENR_TIM2EN; // ENABLING THE CLOCKS FOR APB BUS
 8000214:	4b05      	ldr	r3, [pc, #20]	@ (800022c <rcc_init+0x28>)
 8000216:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000218:	4a04      	ldr	r2, [pc, #16]	@ (800022c <rcc_init+0x28>)
 800021a:	f043 0301 	orr.w	r3, r3, #1
 800021e:	6413      	str	r3, [r2, #64]	@ 0x40
}
 8000220:	bf00      	nop
 8000222:	46bd      	mov	sp, r7
 8000224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000228:	4770      	bx	lr
 800022a:	bf00      	nop
 800022c:	40023800 	.word	0x40023800

08000230 <gpio_init>:

void gpio_init(void)
{
 8000230:	b480      	push	{r7}
 8000232:	af00      	add	r7, sp, #0
    GPIOA->MODER &= ~(GPIO_MODER_MODER5_Msk); // MASK FORE RESETTING THE MODER PORT
 8000234:	4b0e      	ldr	r3, [pc, #56]	@ (8000270 <gpio_init+0x40>)
 8000236:	681b      	ldr	r3, [r3, #0]
 8000238:	4a0d      	ldr	r2, [pc, #52]	@ (8000270 <gpio_init+0x40>)
 800023a:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 800023e:	6013      	str	r3, [r2, #0]
    GPIOA->MODER |= (2U << GPIO_MODER_MODER5_Pos); //SETTING IT FOR ALTERNATE FUNCTION MODE 
 8000240:	4b0b      	ldr	r3, [pc, #44]	@ (8000270 <gpio_init+0x40>)
 8000242:	681b      	ldr	r3, [r3, #0]
 8000244:	4a0a      	ldr	r2, [pc, #40]	@ (8000270 <gpio_init+0x40>)
 8000246:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800024a:	6013      	str	r3, [r2, #0]

    GPIOA->AFR[0] &= ~(GPIO_AFRL_AFSEL5_Msk);
 800024c:	4b08      	ldr	r3, [pc, #32]	@ (8000270 <gpio_init+0x40>)
 800024e:	6a1b      	ldr	r3, [r3, #32]
 8000250:	4a07      	ldr	r2, [pc, #28]	@ (8000270 <gpio_init+0x40>)
 8000252:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8000256:	6213      	str	r3, [r2, #32]
    GPIOA->AFR[0] |= (1U << GPIO_AFRL_AFSEL5_Pos);
 8000258:	4b05      	ldr	r3, [pc, #20]	@ (8000270 <gpio_init+0x40>)
 800025a:	6a1b      	ldr	r3, [r3, #32]
 800025c:	4a04      	ldr	r2, [pc, #16]	@ (8000270 <gpio_init+0x40>)
 800025e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000262:	6213      	str	r3, [r2, #32]

}
 8000264:	bf00      	nop
 8000266:	46bd      	mov	sp, r7
 8000268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop
 8000270:	40020000 	.word	0x40020000

08000274 <tim2_init>:

void tim2_init(void)
{
 8000274:	b480      	push	{r7}
 8000276:	af00      	add	r7, sp, #0
    TIM2->PSC = 15; //setting the prescaler to 15 based on the 16mkz input frequency 
 8000278:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800027c:	220f      	movs	r2, #15
 800027e:	629a      	str	r2, [r3, #40]	@ 0x28

    TIM2->ARR = 999; // setting the priod that is to the auto reload register to 999 to generate a desired 1khz frequency 
 8000280:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000284:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000288:	62da      	str	r2, [r3, #44]	@ 0x2c

    TIM2->CCR1 = 1000;
 800028a:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800028e:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000292:	635a      	str	r2, [r3, #52]	@ 0x34

    TIM2->CCMR1 |= (TIM_CCMR1_OC1M_1 | TIM_CCMR1_OC1M_2); // CAPTURE COMPARE MDOE REGISTER
 8000294:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000298:	699b      	ldr	r3, [r3, #24]
 800029a:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800029e:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 80002a2:	6193      	str	r3, [r2, #24]


    TIM2->CCER |= TIM_CCER_CC1E; // ENABLING THE CAPTURE COMPARE ENABLE REIGSTER
 80002a4:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80002a8:	6a1b      	ldr	r3, [r3, #32]
 80002aa:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80002ae:	f043 0301 	orr.w	r3, r3, #1
 80002b2:	6213      	str	r3, [r2, #32]


    TIM2->CR1 |= TIM_CR1_CEN; // ENABLING THE TIMER
 80002b4:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80002b8:	681b      	ldr	r3, [r3, #0]
 80002ba:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80002be:	f043 0301 	orr.w	r3, r3, #1
 80002c2:	6013      	str	r3, [r2, #0]
}
 80002c4:	bf00      	nop
 80002c6:	46bd      	mov	sp, r7
 80002c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002cc:	4770      	bx	lr

080002ce <main>:

int main(void)
{
 80002ce:	b580      	push	{r7, lr}
 80002d0:	af00      	add	r7, sp, #0
    rcc_init();
 80002d2:	f7ff ff97 	bl	8000204 <rcc_init>

    gpio_init();
 80002d6:	f7ff ffab 	bl	8000230 <gpio_init>

    tim2_init();
 80002da:	f7ff ffcb 	bl	8000274 <tim2_init>

    while(1)
 80002de:	bf00      	nop
 80002e0:	e7fd      	b.n	80002de <main+0x10>

080002e2 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80002e2:	b480      	push	{r7}
 80002e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80002e6:	bf00      	nop
 80002e8:	e7fd      	b.n	80002e6 <NMI_Handler+0x4>

080002ea <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80002ea:	b480      	push	{r7}
 80002ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80002ee:	bf00      	nop
 80002f0:	e7fd      	b.n	80002ee <HardFault_Handler+0x4>

080002f2 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80002f2:	b480      	push	{r7}
 80002f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80002f6:	bf00      	nop
 80002f8:	e7fd      	b.n	80002f6 <MemManage_Handler+0x4>

080002fa <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80002fa:	b480      	push	{r7}
 80002fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80002fe:	bf00      	nop
 8000300:	e7fd      	b.n	80002fe <BusFault_Handler+0x4>

08000302 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000302:	b480      	push	{r7}
 8000304:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000306:	bf00      	nop
 8000308:	e7fd      	b.n	8000306 <UsageFault_Handler+0x4>

0800030a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800030a:	b480      	push	{r7}
 800030c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800030e:	bf00      	nop
 8000310:	46bd      	mov	sp, r7
 8000312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000316:	4770      	bx	lr

08000318 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000318:	b480      	push	{r7}
 800031a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800031c:	bf00      	nop
 800031e:	46bd      	mov	sp, r7
 8000320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000324:	4770      	bx	lr

08000326 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000326:	b480      	push	{r7}
 8000328:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800032a:	bf00      	nop
 800032c:	46bd      	mov	sp, r7
 800032e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000332:	4770      	bx	lr

08000334 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000334:	b580      	push	{r7, lr}
 8000336:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000338:	f000 f83e 	bl	80003b8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800033c:	bf00      	nop
 800033e:	bd80      	pop	{r7, pc}

08000340 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000340:	b480      	push	{r7}
 8000342:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000344:	4b06      	ldr	r3, [pc, #24]	@ (8000360 <SystemInit+0x20>)
 8000346:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800034a:	4a05      	ldr	r2, [pc, #20]	@ (8000360 <SystemInit+0x20>)
 800034c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000350:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000354:	bf00      	nop
 8000356:	46bd      	mov	sp, r7
 8000358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800035c:	4770      	bx	lr
 800035e:	bf00      	nop
 8000360:	e000ed00 	.word	0xe000ed00

08000364 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000364:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800039c <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000368:	f7ff ffea 	bl	8000340 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800036c:	480c      	ldr	r0, [pc, #48]	@ (80003a0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800036e:	490d      	ldr	r1, [pc, #52]	@ (80003a4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000370:	4a0d      	ldr	r2, [pc, #52]	@ (80003a8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000372:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000374:	e002      	b.n	800037c <LoopCopyDataInit>

08000376 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000376:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000378:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800037a:	3304      	adds	r3, #4

0800037c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800037c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800037e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000380:	d3f9      	bcc.n	8000376 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000382:	4a0a      	ldr	r2, [pc, #40]	@ (80003ac <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000384:	4c0a      	ldr	r4, [pc, #40]	@ (80003b0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000386:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000388:	e001      	b.n	800038e <LoopFillZerobss>

0800038a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800038a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800038c:	3204      	adds	r2, #4

0800038e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800038e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000390:	d3fb      	bcc.n	800038a <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8000392:	f000 f825 	bl	80003e0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000396:	f7ff ff9a 	bl	80002ce <main>
  bx  lr    
 800039a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800039c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80003a0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80003a4:	20000004 	.word	0x20000004
  ldr r2, =_sidata
 80003a8:	08000448 	.word	0x08000448
  ldr r2, =_sbss
 80003ac:	20000004 	.word	0x20000004
  ldr r4, =_ebss
 80003b0:	20000024 	.word	0x20000024

080003b4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80003b4:	e7fe      	b.n	80003b4 <ADC_IRQHandler>
	...

080003b8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80003b8:	b480      	push	{r7}
 80003ba:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80003bc:	4b06      	ldr	r3, [pc, #24]	@ (80003d8 <HAL_IncTick+0x20>)
 80003be:	781b      	ldrb	r3, [r3, #0]
 80003c0:	461a      	mov	r2, r3
 80003c2:	4b06      	ldr	r3, [pc, #24]	@ (80003dc <HAL_IncTick+0x24>)
 80003c4:	681b      	ldr	r3, [r3, #0]
 80003c6:	4413      	add	r3, r2
 80003c8:	4a04      	ldr	r2, [pc, #16]	@ (80003dc <HAL_IncTick+0x24>)
 80003ca:	6013      	str	r3, [r2, #0]
}
 80003cc:	bf00      	nop
 80003ce:	46bd      	mov	sp, r7
 80003d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003d4:	4770      	bx	lr
 80003d6:	bf00      	nop
 80003d8:	20000000 	.word	0x20000000
 80003dc:	20000020 	.word	0x20000020

080003e0 <__libc_init_array>:
 80003e0:	b570      	push	{r4, r5, r6, lr}
 80003e2:	4d0d      	ldr	r5, [pc, #52]	@ (8000418 <__libc_init_array+0x38>)
 80003e4:	4c0d      	ldr	r4, [pc, #52]	@ (800041c <__libc_init_array+0x3c>)
 80003e6:	1b64      	subs	r4, r4, r5
 80003e8:	10a4      	asrs	r4, r4, #2
 80003ea:	2600      	movs	r6, #0
 80003ec:	42a6      	cmp	r6, r4
 80003ee:	d109      	bne.n	8000404 <__libc_init_array+0x24>
 80003f0:	4d0b      	ldr	r5, [pc, #44]	@ (8000420 <__libc_init_array+0x40>)
 80003f2:	4c0c      	ldr	r4, [pc, #48]	@ (8000424 <__libc_init_array+0x44>)
 80003f4:	f000 f818 	bl	8000428 <_init>
 80003f8:	1b64      	subs	r4, r4, r5
 80003fa:	10a4      	asrs	r4, r4, #2
 80003fc:	2600      	movs	r6, #0
 80003fe:	42a6      	cmp	r6, r4
 8000400:	d105      	bne.n	800040e <__libc_init_array+0x2e>
 8000402:	bd70      	pop	{r4, r5, r6, pc}
 8000404:	f855 3b04 	ldr.w	r3, [r5], #4
 8000408:	4798      	blx	r3
 800040a:	3601      	adds	r6, #1
 800040c:	e7ee      	b.n	80003ec <__libc_init_array+0xc>
 800040e:	f855 3b04 	ldr.w	r3, [r5], #4
 8000412:	4798      	blx	r3
 8000414:	3601      	adds	r6, #1
 8000416:	e7f2      	b.n	80003fe <__libc_init_array+0x1e>
 8000418:	08000440 	.word	0x08000440
 800041c:	08000440 	.word	0x08000440
 8000420:	08000440 	.word	0x08000440
 8000424:	08000444 	.word	0x08000444

08000428 <_init>:
 8000428:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800042a:	bf00      	nop
 800042c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800042e:	bc08      	pop	{r3}
 8000430:	469e      	mov	lr, r3
 8000432:	4770      	bx	lr

08000434 <_fini>:
 8000434:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000436:	bf00      	nop
 8000438:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800043a:	bc08      	pop	{r3}
 800043c:	469e      	mov	lr, r3
 800043e:	4770      	bx	lr
