/*
 * GPIO_driver.h
 *
 *  Created on: Aug 9, 2025
 *      Author: sudharsan
 */

#ifndef INC_GPIO_DRIVER_H_
#define INC_GPIO_DRIVER_H_


//standard library for unsigned integers
#include <stdint.h>

//gpio port definitions
typedef enum
{
	GPIOA,
	GPIOB,
	GPIOC,
	GPIOD,
	GPIOE,
	GPIOF,
	GPIOG,
	GPIOH
}GPIO_Port;

//gpio pin definitions
typedef enum
{
	PIN_0,
	PIN_1,
	PIN_2,
	PIN_3,
	PIN_4,
	PIN_5,
	PIN_6,
	PIN_7,
	PIN_8,
	PIN_9,
	PIN_10,
	PIN_11,
	PIN_12,
	PIN_13,
	PIN_14,
	PIN_15
}GPIO_PinNumber;

//gpio_output mode definitions
typedef enum
{
	GPIO_MODE_INPUT,
	GPIO_MODE_OUTPUT,
	GPIO_MODE_AF,
	GPIO_MDOE_ANALOG
}GPIO_Mode;

//gpio output type definitions
typedef enum
{
	GPIO_OTYPER_PUSHPULL,
	GPIO_OTYPER_OPENDRAIN
}GPIO_OutputType;

// gpio input type definitons
typedef enum
{
	GPIO_OSPEEDR_LOW,
	GPIO_OSPEEDR_MEDIUM,
	GPIO_OSPEEDR_HIGH,
	GPIO_OSPEEDR_VHIGH
}GPIO_OutputSpeed;

//gpio push pull configuration definitions
typedef enum
{
	GPIO_PUPD_NOPULL,
	GPIO_PUPD_PULLUP,
	GPIO_PUPD_PULLDOWN
}GPIO_PullUpDown;



//definitons for base gpio address
#define GPIOA_BASE_ADDR 0X40020000UL
#define GPIOB_BASE_ADDR 0X40020400UL
#define GPIOC_BASE_ADDR 0X40020800UL
#define GPIOD_BASE_ADDR 0X40020C00UL
#define GPIOE_BASE_ADDR 0X40021000UL
#define GPIOF_BASE_ADDR 0X40021400UL
#define GPIOG_BASE_ADDR 0X40021800UL
#define GPIOH_BASE_ADDR 0X40021C00UL

//creating pointers to the dpio base address
#define GPIOA	((GPIO_Typedef *) GPIOA_BASE_ADDR)
#define GPIOB 	((GPIO_Typedef *) GPIOB_BASE_ADDR)
#define GPIOC 	((GPIO_Typedef *) GPIOC_BASE_ADDR)
#define GPIOD 	((GPIO_Typedef *) GPIOD_BASE_ADDR)
#define GPIOE 	((GPIO_Typedef *) GPIOE_BASE_ADDR)
#define GPIOF 	((GPIO_Typedef *) GPIOF_BASE_ADDR)
#define GPIOG 	((GPIO_Typedef *) GPIOG_BASE_ADDR)
#define GPIOH 	((GPIO_Typedef *) GPIOH_BASE_ADDR)

// structure for gpio registers.
typedef struct
{
	volatile uint32_t MODER;
	volatile uint32_t OTYPER;
	volatile uint32_t OSPEEDR;
	volatile uint32_t PUPDR;
	volatile uint32_t IDR;
	volatile uint32_t ODR;
	volatile uint32_t BSRR;
	volatile uint32_t LCKR;
	volatile uint32_t AFR[2];// definied the afrl and afrh as afr[2]
}GPIO_TypeDef;

//creating a structure for pin configuration
typedef struct
{
	GPIO_Port           port;
	GPIO_PinNumber      pin;
	GPIO_Mode           mode;
	GPIO_OutputType     outputType;
	GPIO_OutputSpeed    outputSpeed;
	GPIO_PullUpDown     PullUpDown;
	uint32_t            altenatefunction;
}GPIO_PinConfig_t;

//creating some bit mask for registers

//defining function prototypes for gpio pins
//initializing a pin
void GPIO_Init(GPIO_PinConfig_t *pinconfig);

//deinitializing a port
void GPIO_DeInit(GPIO_PinConfig_t port);

//writing to a gpio pin
void GPIO_WritePin(GPIO_Port port, GPIO_PinNumber pin, uint8_t value);

// reading a gpio pin
void GPIO_ReadPin(GPIO_Port port, GPIO_PinNumber pin);

// // toggling a pin
void GPIO_TogglePin(GPIO_Port port, GPIO_PinNumber pin);


#endif /* INC_GPIO_DRIVER_H_ */
