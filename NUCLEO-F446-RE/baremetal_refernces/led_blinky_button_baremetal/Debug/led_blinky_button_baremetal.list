
led_blinky_button_baremetal.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000025c  080001c4  080001c4  000011c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000420  08000420  00002004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000420  08000420  00002004  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  08000420  08000420  00002004  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  08000420  08000420  00002004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000420  08000420  00001420  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08000424  08000424  00001424  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000004  20000000  08000428  00002000  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000020  20000004  0800042c  00002004  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000024  0800042c  00002024  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00002004  2**0
                  CONTENTS, READONLY
 12 .debug_info   000011da  00000000  00000000  00002034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000004af  00000000  00000000  0000320e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000001c8  00000000  00000000  000036c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000013f  00000000  00000000  00003888  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000157d  00000000  00000000  000039c7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00001e14  00000000  00000000  00004f44  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c1733  00000000  00000000  00006d58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000c848b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000550  00000000  00000000  000c84d0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000072  00000000  00000000  000c8a20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	@ (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	@ (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	@ (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	20000004 	.word	0x20000004
 80001e0:	00000000 	.word	0x00000000
 80001e4:	08000408 	.word	0x08000408

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	@ (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	@ (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	@ (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000008 	.word	0x20000008
 8000200:	08000408 	.word	0x08000408

08000204 <main>:
#define GPIOA_BSRR5_RESET      (1U << (5 + 16)) // whyadding 16 is simple to reset a particular pit bsrr register we need to add it by the total no of register / 2, 32 /2 is 16
#define GPIOA_BSRR9_SET        (1U << 9)
#define GPIOA_BSRR9_RESET      (1U << (9  + 16))

int main(void)
{
 8000204:	b480      	push	{r7}
 8000206:	b085      	sub	sp, #20
 8000208:	af00      	add	r7, sp, #0
	RCC->AHB1ENR |= GPIOA_ENABLE; // enabling the rcc clock
 800020a:	4b2b      	ldr	r3, [pc, #172]	@ (80002b8 <main+0xb4>)
 800020c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800020e:	4a2a      	ldr	r2, [pc, #168]	@ (80002b8 <main+0xb4>)
 8000210:	f043 0301 	orr.w	r3, r3, #1
 8000214:	6313      	str	r3, [r2, #48]	@ 0x30

	GPIOA->MODER &= ~(GPIOA_MODER5_MASK); // clearing the bitfield first
 8000216:	4b29      	ldr	r3, [pc, #164]	@ (80002bc <main+0xb8>)
 8000218:	681b      	ldr	r3, [r3, #0]
 800021a:	4a28      	ldr	r2, [pc, #160]	@ (80002bc <main+0xb8>)
 800021c:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8000220:	6013      	str	r3, [r2, #0]
    GPIOA->MODER |= GPIOA_MODER5_OUTPUT;  // setting the bit for output mode mode
 8000222:	4b26      	ldr	r3, [pc, #152]	@ (80002bc <main+0xb8>)
 8000224:	681b      	ldr	r3, [r3, #0]
 8000226:	4a25      	ldr	r2, [pc, #148]	@ (80002bc <main+0xb8>)
 8000228:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800022c:	6013      	str	r3, [r2, #0]

    GPIOA->MODER &= ~(GPIOA_MODER9_MASK);
 800022e:	4b23      	ldr	r3, [pc, #140]	@ (80002bc <main+0xb8>)
 8000230:	681b      	ldr	r3, [r3, #0]
 8000232:	4a22      	ldr	r2, [pc, #136]	@ (80002bc <main+0xb8>)
 8000234:	f423 2340 	bic.w	r3, r3, #786432	@ 0xc0000
 8000238:	6013      	str	r3, [r2, #0]
    GPIOA->MODER |= GPIOA_MODER9_OUTPUT;
 800023a:	4b20      	ldr	r3, [pc, #128]	@ (80002bc <main+0xb8>)
 800023c:	681b      	ldr	r3, [r3, #0]
 800023e:	4a1f      	ldr	r2, [pc, #124]	@ (80002bc <main+0xb8>)
 8000240:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000244:	6013      	str	r3, [r2, #0]

    GPIOA->MODER &= ~(GPIOA_MODER0_MASK);
 8000246:	4b1d      	ldr	r3, [pc, #116]	@ (80002bc <main+0xb8>)
 8000248:	681b      	ldr	r3, [r3, #0]
 800024a:	4a1c      	ldr	r2, [pc, #112]	@ (80002bc <main+0xb8>)
 800024c:	f023 0303 	bic.w	r3, r3, #3
 8000250:	6013      	str	r3, [r2, #0]
    GPIOA->MODER |= GPIOA_MODER0_INPUT;
 8000252:	4b1a      	ldr	r3, [pc, #104]	@ (80002bc <main+0xb8>)
 8000254:	4a19      	ldr	r2, [pc, #100]	@ (80002bc <main+0xb8>)
 8000256:	681b      	ldr	r3, [r3, #0]
 8000258:	6013      	str	r3, [r2, #0]
    GPIOA->PUPDR &= ~(GPIOA_PUPDR0_MASK);
 800025a:	4b18      	ldr	r3, [pc, #96]	@ (80002bc <main+0xb8>)
 800025c:	68db      	ldr	r3, [r3, #12]
 800025e:	4a17      	ldr	r2, [pc, #92]	@ (80002bc <main+0xb8>)
 8000260:	f023 0303 	bic.w	r3, r3, #3
 8000264:	60d3      	str	r3, [r2, #12]
    GPIOA->PUPDR |= GPIOA_PUPDR0_PU;
 8000266:	4b15      	ldr	r3, [pc, #84]	@ (80002bc <main+0xb8>)
 8000268:	68db      	ldr	r3, [r3, #12]
 800026a:	4a14      	ldr	r2, [pc, #80]	@ (80002bc <main+0xb8>)
 800026c:	f043 0301 	orr.w	r3, r3, #1
 8000270:	60d3      	str	r3, [r2, #12]

    int led6_state = 0;  // 0 means off, 1 means on
 8000272:	2300      	movs	r3, #0
 8000274:	60fb      	str	r3, [r7, #12]
    int last_button_state = 1; // 1 = not pressed due to pull-up
 8000276:	2301      	movs	r3, #1
 8000278:	60bb      	str	r3, [r7, #8]
//    	GPIOA->BSRR = GPIOA_BSRR5_SET;
//    	delay(500000);
//    	GPIOA->BSRR = GPIOA_BSRR5_RESET;
//    	delay(500000);

        int current_button_state = (GPIOA->IDR & GPIOA_IDR0_INPUT);
 800027a:	4b10      	ldr	r3, [pc, #64]	@ (80002bc <main+0xb8>)
 800027c:	691b      	ldr	r3, [r3, #16]
 800027e:	f003 0301 	and.w	r3, r3, #1
 8000282:	607b      	str	r3, [r7, #4]

        if ((current_button_state == 0 && last_button_state == 1))
 8000284:	687b      	ldr	r3, [r7, #4]
 8000286:	2b00      	cmp	r3, #0
 8000288:	d112      	bne.n	80002b0 <main+0xac>
 800028a:	68bb      	ldr	r3, [r7, #8]
 800028c:	2b01      	cmp	r3, #1
 800028e:	d10f      	bne.n	80002b0 <main+0xac>
		{
			if (led6_state == 0)
 8000290:	68fb      	ldr	r3, [r7, #12]
 8000292:	2b00      	cmp	r3, #0
 8000294:	d106      	bne.n	80002a4 <main+0xa0>
			{
				GPIOA->BSRR = GPIOA_BSRR9_SET;
 8000296:	4b09      	ldr	r3, [pc, #36]	@ (80002bc <main+0xb8>)
 8000298:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800029c:	619a      	str	r2, [r3, #24]
				led6_state = 1;
 800029e:	2301      	movs	r3, #1
 80002a0:	60fb      	str	r3, [r7, #12]
 80002a2:	e005      	b.n	80002b0 <main+0xac>
			}else{
				GPIOA->BSRR = GPIOA_BSRR9_RESET;
 80002a4:	4b05      	ldr	r3, [pc, #20]	@ (80002bc <main+0xb8>)
 80002a6:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80002aa:	619a      	str	r2, [r3, #24]
				led6_state = 0;
 80002ac:	2300      	movs	r3, #0
 80002ae:	60fb      	str	r3, [r7, #12]
			}

		}
        last_button_state = current_button_state;
 80002b0:	687b      	ldr	r3, [r7, #4]
 80002b2:	60bb      	str	r3, [r7, #8]
    {
 80002b4:	e7e1      	b.n	800027a <main+0x76>
 80002b6:	bf00      	nop
 80002b8:	40023800 	.word	0x40023800
 80002bc:	40020000 	.word	0x40020000

080002c0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80002c0:	b480      	push	{r7}
 80002c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80002c4:	bf00      	nop
 80002c6:	e7fd      	b.n	80002c4 <NMI_Handler+0x4>

080002c8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80002c8:	b480      	push	{r7}
 80002ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80002cc:	bf00      	nop
 80002ce:	e7fd      	b.n	80002cc <HardFault_Handler+0x4>

080002d0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80002d0:	b480      	push	{r7}
 80002d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80002d4:	bf00      	nop
 80002d6:	e7fd      	b.n	80002d4 <MemManage_Handler+0x4>

080002d8 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80002d8:	b480      	push	{r7}
 80002da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80002dc:	bf00      	nop
 80002de:	e7fd      	b.n	80002dc <BusFault_Handler+0x4>

080002e0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80002e0:	b480      	push	{r7}
 80002e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80002e4:	bf00      	nop
 80002e6:	e7fd      	b.n	80002e4 <UsageFault_Handler+0x4>

080002e8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80002e8:	b480      	push	{r7}
 80002ea:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80002ec:	bf00      	nop
 80002ee:	46bd      	mov	sp, r7
 80002f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002f4:	4770      	bx	lr

080002f6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80002f6:	b480      	push	{r7}
 80002f8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80002fa:	bf00      	nop
 80002fc:	46bd      	mov	sp, r7
 80002fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000302:	4770      	bx	lr

08000304 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000304:	b480      	push	{r7}
 8000306:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000308:	bf00      	nop
 800030a:	46bd      	mov	sp, r7
 800030c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000310:	4770      	bx	lr

08000312 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000312:	b580      	push	{r7, lr}
 8000314:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000316:	f000 f83f 	bl	8000398 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800031a:	bf00      	nop
 800031c:	bd80      	pop	{r7, pc}
	...

08000320 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000320:	b480      	push	{r7}
 8000322:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000324:	4b06      	ldr	r3, [pc, #24]	@ (8000340 <SystemInit+0x20>)
 8000326:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800032a:	4a05      	ldr	r2, [pc, #20]	@ (8000340 <SystemInit+0x20>)
 800032c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000330:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000334:	bf00      	nop
 8000336:	46bd      	mov	sp, r7
 8000338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800033c:	4770      	bx	lr
 800033e:	bf00      	nop
 8000340:	e000ed00 	.word	0xe000ed00

08000344 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000344:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800037c <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000348:	f7ff ffea 	bl	8000320 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800034c:	480c      	ldr	r0, [pc, #48]	@ (8000380 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800034e:	490d      	ldr	r1, [pc, #52]	@ (8000384 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000350:	4a0d      	ldr	r2, [pc, #52]	@ (8000388 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000352:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000354:	e002      	b.n	800035c <LoopCopyDataInit>

08000356 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000356:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000358:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800035a:	3304      	adds	r3, #4

0800035c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800035c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800035e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000360:	d3f9      	bcc.n	8000356 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000362:	4a0a      	ldr	r2, [pc, #40]	@ (800038c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000364:	4c0a      	ldr	r4, [pc, #40]	@ (8000390 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000366:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000368:	e001      	b.n	800036e <LoopFillZerobss>

0800036a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800036a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800036c:	3204      	adds	r2, #4

0800036e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800036e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000370:	d3fb      	bcc.n	800036a <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8000372:	f000 f825 	bl	80003c0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000376:	f7ff ff45 	bl	8000204 <main>
  bx  lr    
 800037a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800037c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000380:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000384:	20000004 	.word	0x20000004
  ldr r2, =_sidata
 8000388:	08000428 	.word	0x08000428
  ldr r2, =_sbss
 800038c:	20000004 	.word	0x20000004
  ldr r4, =_ebss
 8000390:	20000024 	.word	0x20000024

08000394 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000394:	e7fe      	b.n	8000394 <ADC_IRQHandler>
	...

08000398 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000398:	b480      	push	{r7}
 800039a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800039c:	4b06      	ldr	r3, [pc, #24]	@ (80003b8 <HAL_IncTick+0x20>)
 800039e:	781b      	ldrb	r3, [r3, #0]
 80003a0:	461a      	mov	r2, r3
 80003a2:	4b06      	ldr	r3, [pc, #24]	@ (80003bc <HAL_IncTick+0x24>)
 80003a4:	681b      	ldr	r3, [r3, #0]
 80003a6:	4413      	add	r3, r2
 80003a8:	4a04      	ldr	r2, [pc, #16]	@ (80003bc <HAL_IncTick+0x24>)
 80003aa:	6013      	str	r3, [r2, #0]
}
 80003ac:	bf00      	nop
 80003ae:	46bd      	mov	sp, r7
 80003b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003b4:	4770      	bx	lr
 80003b6:	bf00      	nop
 80003b8:	20000000 	.word	0x20000000
 80003bc:	20000020 	.word	0x20000020

080003c0 <__libc_init_array>:
 80003c0:	b570      	push	{r4, r5, r6, lr}
 80003c2:	4d0d      	ldr	r5, [pc, #52]	@ (80003f8 <__libc_init_array+0x38>)
 80003c4:	4c0d      	ldr	r4, [pc, #52]	@ (80003fc <__libc_init_array+0x3c>)
 80003c6:	1b64      	subs	r4, r4, r5
 80003c8:	10a4      	asrs	r4, r4, #2
 80003ca:	2600      	movs	r6, #0
 80003cc:	42a6      	cmp	r6, r4
 80003ce:	d109      	bne.n	80003e4 <__libc_init_array+0x24>
 80003d0:	4d0b      	ldr	r5, [pc, #44]	@ (8000400 <__libc_init_array+0x40>)
 80003d2:	4c0c      	ldr	r4, [pc, #48]	@ (8000404 <__libc_init_array+0x44>)
 80003d4:	f000 f818 	bl	8000408 <_init>
 80003d8:	1b64      	subs	r4, r4, r5
 80003da:	10a4      	asrs	r4, r4, #2
 80003dc:	2600      	movs	r6, #0
 80003de:	42a6      	cmp	r6, r4
 80003e0:	d105      	bne.n	80003ee <__libc_init_array+0x2e>
 80003e2:	bd70      	pop	{r4, r5, r6, pc}
 80003e4:	f855 3b04 	ldr.w	r3, [r5], #4
 80003e8:	4798      	blx	r3
 80003ea:	3601      	adds	r6, #1
 80003ec:	e7ee      	b.n	80003cc <__libc_init_array+0xc>
 80003ee:	f855 3b04 	ldr.w	r3, [r5], #4
 80003f2:	4798      	blx	r3
 80003f4:	3601      	adds	r6, #1
 80003f6:	e7f2      	b.n	80003de <__libc_init_array+0x1e>
 80003f8:	08000420 	.word	0x08000420
 80003fc:	08000420 	.word	0x08000420
 8000400:	08000420 	.word	0x08000420
 8000404:	08000424 	.word	0x08000424

08000408 <_init>:
 8000408:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800040a:	bf00      	nop
 800040c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800040e:	bc08      	pop	{r3}
 8000410:	469e      	mov	lr, r3
 8000412:	4770      	bx	lr

08000414 <_fini>:
 8000414:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000416:	bf00      	nop
 8000418:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800041a:	bc08      	pop	{r3}
 800041c:	469e      	mov	lr, r3
 800041e:	4770      	bx	lr
