
adc_dma_led_watchdog_led_trigger_baremetal.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000518  080001c4  080001c4  000011c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  080006dc  080006dc  00002004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  080006dc  080006dc  00002004  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  080006dc  080006dc  00002004  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  080006dc  080006dc  00002004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080006dc  080006dc  000016dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080006e0  080006e0  000016e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000004  20000000  080006e4  00002000  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000024  20000004  080006e8  00002004  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000028  080006e8  00002028  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00002004  2**0
                  CONTENTS, READONLY
 12 .debug_info   00001be0  00000000  00000000  00002034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000005dc  00000000  00000000  00003c14  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000210  00000000  00000000  000041f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000177  00000000  00000000  00004400  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018f62  00000000  00000000  00004577  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000020b5  00000000  00000000  0001d4d9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c1697  00000000  00000000  0001f58e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000e0c25  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000680  00000000  00000000  000e0c68  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000094  00000000  00000000  000e12e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	@ (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	@ (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	@ (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	20000004 	.word	0x20000004
 80001e0:	00000000 	.word	0x00000000
 80001e4:	080006c4 	.word	0x080006c4

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	@ (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	@ (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	@ (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000008 	.word	0x20000008
 8000200:	080006c4 	.word	0x080006c4

08000204 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000204:	b480      	push	{r7}
 8000206:	b083      	sub	sp, #12
 8000208:	af00      	add	r7, sp, #0
 800020a:	4603      	mov	r3, r0
 800020c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800020e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000212:	2b00      	cmp	r3, #0
 8000214:	db0b      	blt.n	800022e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000216:	79fb      	ldrb	r3, [r7, #7]
 8000218:	f003 021f 	and.w	r2, r3, #31
 800021c:	4907      	ldr	r1, [pc, #28]	@ (800023c <__NVIC_EnableIRQ+0x38>)
 800021e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000222:	095b      	lsrs	r3, r3, #5
 8000224:	2001      	movs	r0, #1
 8000226:	fa00 f202 	lsl.w	r2, r0, r2
 800022a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800022e:	bf00      	nop
 8000230:	370c      	adds	r7, #12
 8000232:	46bd      	mov	sp, r7
 8000234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000238:	4770      	bx	lr
 800023a:	bf00      	nop
 800023c:	e000e100 	.word	0xe000e100

08000240 <__NVIC_ClearPendingIRQ>:
  \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 8000240:	b480      	push	{r7}
 8000242:	b083      	sub	sp, #12
 8000244:	af00      	add	r7, sp, #0
 8000246:	4603      	mov	r3, r0
 8000248:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800024a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800024e:	2b00      	cmp	r3, #0
 8000250:	db0c      	blt.n	800026c <__NVIC_ClearPendingIRQ+0x2c>
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000252:	79fb      	ldrb	r3, [r7, #7]
 8000254:	f003 021f 	and.w	r2, r3, #31
 8000258:	4907      	ldr	r1, [pc, #28]	@ (8000278 <__NVIC_ClearPendingIRQ+0x38>)
 800025a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800025e:	095b      	lsrs	r3, r3, #5
 8000260:	2001      	movs	r0, #1
 8000262:	fa00 f202 	lsl.w	r2, r0, r2
 8000266:	3360      	adds	r3, #96	@ 0x60
 8000268:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800026c:	bf00      	nop
 800026e:	370c      	adds	r7, #12
 8000270:	46bd      	mov	sp, r7
 8000272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000276:	4770      	bx	lr
 8000278:	e000e100 	.word	0xe000e100

0800027c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800027c:	b480      	push	{r7}
 800027e:	b083      	sub	sp, #12
 8000280:	af00      	add	r7, sp, #0
 8000282:	4603      	mov	r3, r0
 8000284:	6039      	str	r1, [r7, #0]
 8000286:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000288:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800028c:	2b00      	cmp	r3, #0
 800028e:	db0a      	blt.n	80002a6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000290:	683b      	ldr	r3, [r7, #0]
 8000292:	b2da      	uxtb	r2, r3
 8000294:	490c      	ldr	r1, [pc, #48]	@ (80002c8 <__NVIC_SetPriority+0x4c>)
 8000296:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800029a:	0112      	lsls	r2, r2, #4
 800029c:	b2d2      	uxtb	r2, r2
 800029e:	440b      	add	r3, r1
 80002a0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80002a4:	e00a      	b.n	80002bc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80002a6:	683b      	ldr	r3, [r7, #0]
 80002a8:	b2da      	uxtb	r2, r3
 80002aa:	4908      	ldr	r1, [pc, #32]	@ (80002cc <__NVIC_SetPriority+0x50>)
 80002ac:	79fb      	ldrb	r3, [r7, #7]
 80002ae:	f003 030f 	and.w	r3, r3, #15
 80002b2:	3b04      	subs	r3, #4
 80002b4:	0112      	lsls	r2, r2, #4
 80002b6:	b2d2      	uxtb	r2, r2
 80002b8:	440b      	add	r3, r1
 80002ba:	761a      	strb	r2, [r3, #24]
}
 80002bc:	bf00      	nop
 80002be:	370c      	adds	r7, #12
 80002c0:	46bd      	mov	sp, r7
 80002c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002c6:	4770      	bx	lr
 80002c8:	e000e100 	.word	0xe000e100
 80002cc:	e000ed00 	.word	0xe000ed00

080002d0 <rcc_init>:


static volatile uint16_t adc_value;

static void rcc_init(void)
{
 80002d0:	b480      	push	{r7}
 80002d2:	af00      	add	r7, sp, #0
    RCC->AHB1ENR |= RCC_AHB1ENR_GPIOAEN; // FOR GPIO
 80002d4:	4b0b      	ldr	r3, [pc, #44]	@ (8000304 <rcc_init+0x34>)
 80002d6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80002d8:	4a0a      	ldr	r2, [pc, #40]	@ (8000304 <rcc_init+0x34>)
 80002da:	f043 0301 	orr.w	r3, r3, #1
 80002de:	6313      	str	r3, [r2, #48]	@ 0x30

    RCC->APB2ENR |= RCC_APB2ENR_ADC1EN; // FOR ADC PERIPHERAL
 80002e0:	4b08      	ldr	r3, [pc, #32]	@ (8000304 <rcc_init+0x34>)
 80002e2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80002e4:	4a07      	ldr	r2, [pc, #28]	@ (8000304 <rcc_init+0x34>)
 80002e6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80002ea:	6453      	str	r3, [r2, #68]	@ 0x44

    RCC->AHB1ENR |= RCC_AHB1ENR_DMA2EN; //ENABLING THE DMA
 80002ec:	4b05      	ldr	r3, [pc, #20]	@ (8000304 <rcc_init+0x34>)
 80002ee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80002f0:	4a04      	ldr	r2, [pc, #16]	@ (8000304 <rcc_init+0x34>)
 80002f2:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80002f6:	6313      	str	r3, [r2, #48]	@ 0x30
}
 80002f8:	bf00      	nop
 80002fa:	46bd      	mov	sp, r7
 80002fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000300:	4770      	bx	lr
 8000302:	bf00      	nop
 8000304:	40023800 	.word	0x40023800

08000308 <gpio_init>:

static void gpio_init(void)
{
 8000308:	b480      	push	{r7}
 800030a:	af00      	add	r7, sp, #0
    GPIOA->MODER &= ~((GPIO_MODER_MODER5_Msk) | GPIO_MODER_MODER6_Msk | GPIO_MODER_MODER7_Msk);
 800030c:	4b11      	ldr	r3, [pc, #68]	@ (8000354 <gpio_init+0x4c>)
 800030e:	681b      	ldr	r3, [r3, #0]
 8000310:	4a10      	ldr	r2, [pc, #64]	@ (8000354 <gpio_init+0x4c>)
 8000312:	f423 437c 	bic.w	r3, r3, #64512	@ 0xfc00
 8000316:	6013      	str	r3, [r2, #0]

    GPIOA->MODER |= GPIO_MODER_MODE5_0 | GPIO_MODER_MODE6_0 | GPIO_MODER_MODE7_0;
 8000318:	4b0e      	ldr	r3, [pc, #56]	@ (8000354 <gpio_init+0x4c>)
 800031a:	681b      	ldr	r3, [r3, #0]
 800031c:	4a0d      	ldr	r2, [pc, #52]	@ (8000354 <gpio_init+0x4c>)
 800031e:	f443 43a8 	orr.w	r3, r3, #21504	@ 0x5400
 8000322:	6013      	str	r3, [r2, #0]

    GPIOA->MODER &= ~GPIO_MODER_MODER0_Msk; 
 8000324:	4b0b      	ldr	r3, [pc, #44]	@ (8000354 <gpio_init+0x4c>)
 8000326:	681b      	ldr	r3, [r3, #0]
 8000328:	4a0a      	ldr	r2, [pc, #40]	@ (8000354 <gpio_init+0x4c>)
 800032a:	f023 0303 	bic.w	r3, r3, #3
 800032e:	6013      	str	r3, [r2, #0]

    GPIOA->MODER |= (3U << GPIO_MODER_MODER0_Pos);
 8000330:	4b08      	ldr	r3, [pc, #32]	@ (8000354 <gpio_init+0x4c>)
 8000332:	681b      	ldr	r3, [r3, #0]
 8000334:	4a07      	ldr	r2, [pc, #28]	@ (8000354 <gpio_init+0x4c>)
 8000336:	f043 0303 	orr.w	r3, r3, #3
 800033a:	6013      	str	r3, [r2, #0]
    /* Start with all LEDs OFF */
    GPIOA->ODR &= ~(GPIO_ODR_OD5 | GPIO_ODR_OD6 | GPIO_ODR_OD7);
 800033c:	4b05      	ldr	r3, [pc, #20]	@ (8000354 <gpio_init+0x4c>)
 800033e:	695b      	ldr	r3, [r3, #20]
 8000340:	4a04      	ldr	r2, [pc, #16]	@ (8000354 <gpio_init+0x4c>)
 8000342:	f023 03e0 	bic.w	r3, r3, #224	@ 0xe0
 8000346:	6153      	str	r3, [r2, #20]
    
}
 8000348:	bf00      	nop
 800034a:	46bd      	mov	sp, r7
 800034c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000350:	4770      	bx	lr
 8000352:	bf00      	nop
 8000354:	40020000 	.word	0x40020000

08000358 <adc_init>:

static void adc_init(void)
{
 8000358:	b480      	push	{r7}
 800035a:	af00      	add	r7, sp, #0

    /* ADC prescaler: default /2 is fine (ADC->CCR ADCPRE = 00) */

    ADC->CCR &= ~(ADC_CCR_ADCPRE_Msk);
 800035c:	4b21      	ldr	r3, [pc, #132]	@ (80003e4 <adc_init+0x8c>)
 800035e:	685b      	ldr	r3, [r3, #4]
 8000360:	4a20      	ldr	r2, [pc, #128]	@ (80003e4 <adc_init+0x8c>)
 8000362:	f423 3340 	bic.w	r3, r3, #196608	@ 0x30000
 8000366:	6053      	str	r3, [r2, #4]
    
    /* Sample time for channel 0: choose long to ease source impedance (e.g., 84 cycles) */

    ADC1->SMPR2 &= ~ADC_SMPR2_SMP0_Msk;
 8000368:	4b1f      	ldr	r3, [pc, #124]	@ (80003e8 <adc_init+0x90>)
 800036a:	691b      	ldr	r3, [r3, #16]
 800036c:	4a1e      	ldr	r2, [pc, #120]	@ (80003e8 <adc_init+0x90>)
 800036e:	f023 0307 	bic.w	r3, r3, #7
 8000372:	6113      	str	r3, [r2, #16]
    ADC1->SMPR2 |= (7U << ADC_SMPR2_SMP0_Pos);
 8000374:	4b1c      	ldr	r3, [pc, #112]	@ (80003e8 <adc_init+0x90>)
 8000376:	691b      	ldr	r3, [r3, #16]
 8000378:	4a1b      	ldr	r2, [pc, #108]	@ (80003e8 <adc_init+0x90>)
 800037a:	f043 0307 	orr.w	r3, r3, #7
 800037e:	6113      	str	r3, [r2, #16]

    /* Regular sequence: length = 1 conversion (L = 0) */
    ADC1->SQR1 &= ~ADC_SQR1_L_Msk;              // L = 0 => 1 conversion
 8000380:	4b19      	ldr	r3, [pc, #100]	@ (80003e8 <adc_init+0x90>)
 8000382:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000384:	4a18      	ldr	r2, [pc, #96]	@ (80003e8 <adc_init+0x90>)
 8000386:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800038a:	62d3      	str	r3, [r2, #44]	@ 0x2c
    ADC1->SQR1 |= (0U << ADC_SQR1_L_Pos);
 800038c:	4b16      	ldr	r3, [pc, #88]	@ (80003e8 <adc_init+0x90>)
 800038e:	4a16      	ldr	r2, [pc, #88]	@ (80003e8 <adc_init+0x90>)
 8000390:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000392:	62d3      	str	r3, [r2, #44]	@ 0x2c
    /* SQ1 = channel 0 (PA0) */
    ADC1->SQR3 &= ~ADC_SQR3_SQ1_Msk;            // channel 0 -> value 0
 8000394:	4b14      	ldr	r3, [pc, #80]	@ (80003e8 <adc_init+0x90>)
 8000396:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000398:	4a13      	ldr	r2, [pc, #76]	@ (80003e8 <adc_init+0x90>)
 800039a:	f023 031f 	bic.w	r3, r3, #31
 800039e:	6353      	str	r3, [r2, #52]	@ 0x34
    ADC1->SQR3 |= (0U << ADC_SQR3_SQ1_Pos); // channel 0
 80003a0:	4b11      	ldr	r3, [pc, #68]	@ (80003e8 <adc_init+0x90>)
 80003a2:	4a11      	ldr	r2, [pc, #68]	@ (80003e8 <adc_init+0x90>)
 80003a4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80003a6:	6353      	str	r3, [r2, #52]	@ 0x34
    
    // Enable Continuous Conversion
    ADC1->CR2 |= ADC_CR2_CONT;
 80003a8:	4b0f      	ldr	r3, [pc, #60]	@ (80003e8 <adc_init+0x90>)
 80003aa:	689b      	ldr	r3, [r3, #8]
 80003ac:	4a0e      	ldr	r2, [pc, #56]	@ (80003e8 <adc_init+0x90>)
 80003ae:	f043 0302 	orr.w	r3, r3, #2
 80003b2:	6093      	str	r3, [r2, #8]
    // Enable DMA request
    ADC1->CR2 |= ADC_CR2_DMA;
 80003b4:	4b0c      	ldr	r3, [pc, #48]	@ (80003e8 <adc_init+0x90>)
 80003b6:	689b      	ldr	r3, [r3, #8]
 80003b8:	4a0b      	ldr	r2, [pc, #44]	@ (80003e8 <adc_init+0x90>)
 80003ba:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80003be:	6093      	str	r3, [r2, #8]
    // Enable DMA Disable Selection (DDS) for single ADC mode
    ADC1->CR2 |= ADC_CR2_DDS;
 80003c0:	4b09      	ldr	r3, [pc, #36]	@ (80003e8 <adc_init+0x90>)
 80003c2:	689b      	ldr	r3, [r3, #8]
 80003c4:	4a08      	ldr	r2, [pc, #32]	@ (80003e8 <adc_init+0x90>)
 80003c6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80003ca:	6093      	str	r3, [r2, #8]
    // Enable ADC peripheral
    ADC1->CR2 |= ADC_CR2_ADON;
 80003cc:	4b06      	ldr	r3, [pc, #24]	@ (80003e8 <adc_init+0x90>)
 80003ce:	689b      	ldr	r3, [r3, #8]
 80003d0:	4a05      	ldr	r2, [pc, #20]	@ (80003e8 <adc_init+0x90>)
 80003d2:	f043 0301 	orr.w	r3, r3, #1
 80003d6:	6093      	str	r3, [r2, #8]
}
 80003d8:	bf00      	nop
 80003da:	46bd      	mov	sp, r7
 80003dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003e0:	4770      	bx	lr
 80003e2:	bf00      	nop
 80003e4:	40012300 	.word	0x40012300
 80003e8:	40012000 	.word	0x40012000

080003ec <dma2_stream0_init_for_adc1>:

/* ====== DMA2 Stream0 Channel0 for ADC1 ======
   Mapping (F4): ADC1 -> DMA2, Stream 0, Channel 0
*/
static void dma2_stream0_init_for_adc1(void)
{
 80003ec:	b580      	push	{r7, lr}
 80003ee:	af00      	add	r7, sp, #0
    if (DMA2_Stream0->CR & DMA_SxCR_EN)
 80003f0:	4b1b      	ldr	r3, [pc, #108]	@ (8000460 <dma2_stream0_init_for_adc1+0x74>)
 80003f2:	681b      	ldr	r3, [r3, #0]
 80003f4:	f003 0301 	and.w	r3, r3, #1
 80003f8:	2b00      	cmp	r3, #0
 80003fa:	d00c      	beq.n	8000416 <dma2_stream0_init_for_adc1+0x2a>
    {
        DMA2_Stream0->CR &= ~DMA_SxCR_EN;
 80003fc:	4b18      	ldr	r3, [pc, #96]	@ (8000460 <dma2_stream0_init_for_adc1+0x74>)
 80003fe:	681b      	ldr	r3, [r3, #0]
 8000400:	4a17      	ldr	r2, [pc, #92]	@ (8000460 <dma2_stream0_init_for_adc1+0x74>)
 8000402:	f023 0301 	bic.w	r3, r3, #1
 8000406:	6013      	str	r3, [r2, #0]
        while (DMA2_Stream0->CR & DMA_SxCR_EN)
 8000408:	bf00      	nop
 800040a:	4b15      	ldr	r3, [pc, #84]	@ (8000460 <dma2_stream0_init_for_adc1+0x74>)
 800040c:	681b      	ldr	r3, [r3, #0]
 800040e:	f003 0301 	and.w	r3, r3, #1
 8000412:	2b00      	cmp	r3, #0
 8000414:	d1f9      	bne.n	800040a <dma2_stream0_init_for_adc1+0x1e>
        {

        }
    }

    DMA2->LIFCR = DMA_LIFCR_CFEIF0 | DMA_LIFCR_CDMEIF0 | DMA_LIFCR_CTEIF0 | DMA_LIFCR_CHTIF0 | DMA_LIFCR_CTCIF0 ;
 8000416:	4b13      	ldr	r3, [pc, #76]	@ (8000464 <dma2_stream0_init_for_adc1+0x78>)
 8000418:	223d      	movs	r2, #61	@ 0x3d
 800041a:	609a      	str	r2, [r3, #8]

    /* Peripheral address: ADC1->DR */
    DMA2_Stream0->PAR  = (uint32_t)&ADC1->DR;
 800041c:	4b10      	ldr	r3, [pc, #64]	@ (8000460 <dma2_stream0_init_for_adc1+0x74>)
 800041e:	4a12      	ldr	r2, [pc, #72]	@ (8000468 <dma2_stream0_init_for_adc1+0x7c>)
 8000420:	609a      	str	r2, [r3, #8]
    /* Memory address: variable to hold latest ADC sample */
    DMA2_Stream0->M0AR = (uint32_t)&adc_value;
 8000422:	4b0f      	ldr	r3, [pc, #60]	@ (8000460 <dma2_stream0_init_for_adc1+0x74>)
 8000424:	4a11      	ldr	r2, [pc, #68]	@ (800046c <dma2_stream0_init_for_adc1+0x80>)
 8000426:	60da      	str	r2, [r3, #12]
    /* Number of transfers: 1 (we just want the latest sample, circularly updated) */
    DMA2_Stream0->NDTR = 1;
 8000428:	4b0d      	ldr	r3, [pc, #52]	@ (8000460 <dma2_stream0_init_for_adc1+0x74>)
 800042a:	2201      	movs	r2, #1
 800042c:	605a      	str	r2, [r3, #4]
       - MSIZE = 01 (16-bit halfword)
       - PL = 01 (optional: medium priority)
       - TCIE = 1 (transfer complete interrupt)
       - PFCTRL = 0 (DMA flow controller)
    */
    DMA2_Stream0->CR = 
 800042e:	4b0c      	ldr	r3, [pc, #48]	@ (8000460 <dma2_stream0_init_for_adc1+0x74>)
 8000430:	4a0f      	ldr	r2, [pc, #60]	@ (8000470 <dma2_stream0_init_for_adc1+0x84>)
 8000432:	601a      	str	r2, [r3, #0]
        (1U << DMA_SxCR_MSIZE_Pos) |     /* MSIZE = 16-bit */
        (1U << DMA_SxCR_PL_Pos)    |     /* Medium priority */
        DMA_SxCR_TCIE;                   /* Transfer complete IRQ */

    /* FIFO: disable FIFO (direct mode) */
    DMA2_Stream0->FCR = 0;
 8000434:	4b0a      	ldr	r3, [pc, #40]	@ (8000460 <dma2_stream0_init_for_adc1+0x74>)
 8000436:	2200      	movs	r2, #0
 8000438:	615a      	str	r2, [r3, #20]

    /*Enable NVIC for DMA2 Stream 0IRQ*/
    NVIC_ClearPendingIRQ(DMA2_Stream0_IRQn);
 800043a:	2038      	movs	r0, #56	@ 0x38
 800043c:	f7ff ff00 	bl	8000240 <__NVIC_ClearPendingIRQ>
    NVIC_SetPriority(DMA2_Stream0_IRQn, 5);
 8000440:	2105      	movs	r1, #5
 8000442:	2038      	movs	r0, #56	@ 0x38
 8000444:	f7ff ff1a 	bl	800027c <__NVIC_SetPriority>
    NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8000448:	2038      	movs	r0, #56	@ 0x38
 800044a:	f7ff fedb 	bl	8000204 <__NVIC_EnableIRQ>

    //finally enabling the dma stream
    DMA2_Stream0->CR |=DMA_SxCR_EN;
 800044e:	4b04      	ldr	r3, [pc, #16]	@ (8000460 <dma2_stream0_init_for_adc1+0x74>)
 8000450:	681b      	ldr	r3, [r3, #0]
 8000452:	4a03      	ldr	r2, [pc, #12]	@ (8000460 <dma2_stream0_init_for_adc1+0x74>)
 8000454:	f043 0301 	orr.w	r3, r3, #1
 8000458:	6013      	str	r3, [r2, #0]

}
 800045a:	bf00      	nop
 800045c:	bd80      	pop	{r7, pc}
 800045e:	bf00      	nop
 8000460:	40026410 	.word	0x40026410
 8000464:	40026400 	.word	0x40026400
 8000468:	4001204c 	.word	0x4001204c
 800046c:	20000020 	.word	0x20000020
 8000470:	00012910 	.word	0x00012910

08000474 <adc1_start>:

static void adc1_start(void)
{
 8000474:	b480      	push	{r7}
 8000476:	af00      	add	r7, sp, #0
    /* Software trigger, EXTEN = 00 (disabled), SWSTART = 1 */

    ADC1->CR2 &= ~(ADC_CR2_EXTEN);
 8000478:	4b08      	ldr	r3, [pc, #32]	@ (800049c <adc1_start+0x28>)
 800047a:	689b      	ldr	r3, [r3, #8]
 800047c:	4a07      	ldr	r2, [pc, #28]	@ (800049c <adc1_start+0x28>)
 800047e:	f023 5340 	bic.w	r3, r3, #805306368	@ 0x30000000
 8000482:	6093      	str	r3, [r2, #8]
    ADC1->CR2 |= ADC_CR2_SWSTART; // STARTING THE CONVERSION
 8000484:	4b05      	ldr	r3, [pc, #20]	@ (800049c <adc1_start+0x28>)
 8000486:	689b      	ldr	r3, [r3, #8]
 8000488:	4a04      	ldr	r2, [pc, #16]	@ (800049c <adc1_start+0x28>)
 800048a:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800048e:	6093      	str	r3, [r2, #8]

}
 8000490:	bf00      	nop
 8000492:	46bd      	mov	sp, r7
 8000494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000498:	4770      	bx	lr
 800049a:	bf00      	nop
 800049c:	40012000 	.word	0x40012000

080004a0 <leds_update_from_adc>:

/* ====== LED update (called from IRQ) ====== */
static inline void leds_update_from_adc(uint16_t v)
{
 80004a0:	b480      	push	{r7}
 80004a2:	b083      	sub	sp, #12
 80004a4:	af00      	add	r7, sp, #0
 80004a6:	4603      	mov	r3, r0
 80004a8:	80fb      	strh	r3, [r7, #6]
#if USE_STEADY_LED
    if (v < 1023)
 80004aa:	88fb      	ldrh	r3, [r7, #6]
 80004ac:	f240 32fe 	movw	r2, #1022	@ 0x3fe
 80004b0:	4293      	cmp	r3, r2
 80004b2:	d80c      	bhi.n	80004ce <leds_update_from_adc+0x2e>
    {
        GPIOA->ODR |=  GPIO_ODR_OD5;
 80004b4:	4b1d      	ldr	r3, [pc, #116]	@ (800052c <leds_update_from_adc+0x8c>)
 80004b6:	695b      	ldr	r3, [r3, #20]
 80004b8:	4a1c      	ldr	r2, [pc, #112]	@ (800052c <leds_update_from_adc+0x8c>)
 80004ba:	f043 0320 	orr.w	r3, r3, #32
 80004be:	6153      	str	r3, [r2, #20]
        GPIOA->ODR &= ~(GPIO_ODR_OD6 | GPIO_ODR_OD7);
 80004c0:	4b1a      	ldr	r3, [pc, #104]	@ (800052c <leds_update_from_adc+0x8c>)
 80004c2:	695b      	ldr	r3, [r3, #20]
 80004c4:	4a19      	ldr	r2, [pc, #100]	@ (800052c <leds_update_from_adc+0x8c>)
 80004c6:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 80004ca:	6153      	str	r3, [r2, #20]
    {
        GPIOA->ODR ^= GPIO_ODR_OD7;
        GPIOA->ODR &= ~(GPIO_ODR_OD5 | GPIO_ODR_OD6);
    }
#endif
}
 80004cc:	e027      	b.n	800051e <leds_update_from_adc+0x7e>
    else if (v > 1365 && v < 2700)
 80004ce:	88fb      	ldrh	r3, [r7, #6]
 80004d0:	f240 5255 	movw	r2, #1365	@ 0x555
 80004d4:	4293      	cmp	r3, r2
 80004d6:	d911      	bls.n	80004fc <leds_update_from_adc+0x5c>
 80004d8:	88fb      	ldrh	r3, [r7, #6]
 80004da:	f640 228b 	movw	r2, #2699	@ 0xa8b
 80004de:	4293      	cmp	r3, r2
 80004e0:	d80c      	bhi.n	80004fc <leds_update_from_adc+0x5c>
        GPIOA->ODR |=  GPIO_ODR_OD6;
 80004e2:	4b12      	ldr	r3, [pc, #72]	@ (800052c <leds_update_from_adc+0x8c>)
 80004e4:	695b      	ldr	r3, [r3, #20]
 80004e6:	4a11      	ldr	r2, [pc, #68]	@ (800052c <leds_update_from_adc+0x8c>)
 80004e8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80004ec:	6153      	str	r3, [r2, #20]
        GPIOA->ODR &= ~(GPIO_ODR_OD5 | GPIO_ODR_OD7);
 80004ee:	4b0f      	ldr	r3, [pc, #60]	@ (800052c <leds_update_from_adc+0x8c>)
 80004f0:	695b      	ldr	r3, [r3, #20]
 80004f2:	4a0e      	ldr	r2, [pc, #56]	@ (800052c <leds_update_from_adc+0x8c>)
 80004f4:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80004f8:	6153      	str	r3, [r2, #20]
}
 80004fa:	e010      	b.n	800051e <leds_update_from_adc+0x7e>
    else if (v > 3000)
 80004fc:	88fb      	ldrh	r3, [r7, #6]
 80004fe:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 8000502:	4293      	cmp	r3, r2
 8000504:	d90b      	bls.n	800051e <leds_update_from_adc+0x7e>
        GPIOA->ODR |=  GPIO_ODR_OD7;
 8000506:	4b09      	ldr	r3, [pc, #36]	@ (800052c <leds_update_from_adc+0x8c>)
 8000508:	695b      	ldr	r3, [r3, #20]
 800050a:	4a08      	ldr	r2, [pc, #32]	@ (800052c <leds_update_from_adc+0x8c>)
 800050c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000510:	6153      	str	r3, [r2, #20]
        GPIOA->ODR &= ~(GPIO_ODR_OD5 | GPIO_ODR_OD6);
 8000512:	4b06      	ldr	r3, [pc, #24]	@ (800052c <leds_update_from_adc+0x8c>)
 8000514:	695b      	ldr	r3, [r3, #20]
 8000516:	4a05      	ldr	r2, [pc, #20]	@ (800052c <leds_update_from_adc+0x8c>)
 8000518:	f023 0360 	bic.w	r3, r3, #96	@ 0x60
 800051c:	6153      	str	r3, [r2, #20]
}
 800051e:	bf00      	nop
 8000520:	370c      	adds	r7, #12
 8000522:	46bd      	mov	sp, r7
 8000524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000528:	4770      	bx	lr
 800052a:	bf00      	nop
 800052c:	40020000 	.word	0x40020000

08000530 <DMA2_Stream0_IRQHandler>:

void DMA2_Stream0_IRQHandler(void)
{
 8000530:	b580      	push	{r7, lr}
 8000532:	af00      	add	r7, sp, #0
    /* Check Transfer Complete flag for Stream0 (low flag reg: TCIF0) */
    if (DMA2->LISR & DMA_LISR_TCIF0)
 8000534:	4b08      	ldr	r3, [pc, #32]	@ (8000558 <DMA2_Stream0_IRQHandler+0x28>)
 8000536:	681b      	ldr	r3, [r3, #0]
 8000538:	f003 0320 	and.w	r3, r3, #32
 800053c:	2b00      	cmp	r3, #0
 800053e:	d008      	beq.n	8000552 <DMA2_Stream0_IRQHandler+0x22>
    {
        DMA2->LIFCR = DMA_LIFCR_CTCIF0;
 8000540:	4b05      	ldr	r3, [pc, #20]	@ (8000558 <DMA2_Stream0_IRQHandler+0x28>)
 8000542:	2220      	movs	r2, #32
 8000544:	609a      	str	r2, [r3, #8]

        leds_update_from_adc(adc_value);
 8000546:	4b05      	ldr	r3, [pc, #20]	@ (800055c <DMA2_Stream0_IRQHandler+0x2c>)
 8000548:	881b      	ldrh	r3, [r3, #0]
 800054a:	b29b      	uxth	r3, r3
 800054c:	4618      	mov	r0, r3
 800054e:	f7ff ffa7 	bl	80004a0 <leds_update_from_adc>
    }
}
 8000552:	bf00      	nop
 8000554:	bd80      	pop	{r7, pc}
 8000556:	bf00      	nop
 8000558:	40026400 	.word	0x40026400
 800055c:	20000020 	.word	0x20000020

08000560 <main>:


int main(void)
{
 8000560:	b580      	push	{r7, lr}
 8000562:	af00      	add	r7, sp, #0
    rcc_init();
 8000564:	f7ff feb4 	bl	80002d0 <rcc_init>
    gpio_init();
 8000568:	f7ff fece 	bl	8000308 <gpio_init>
    adc_init();
 800056c:	f7ff fef4 	bl	8000358 <adc_init>
    dma2_stream0_init_for_adc1();
 8000570:	f7ff ff3c 	bl	80003ec <dma2_stream0_init_for_adc1>
    adc1_start();
 8000574:	f7ff ff7e 	bl	8000474 <adc1_start>

    while(1)
    {
    	__WFI(); // WAIT FOR INTERRUPT MODE.
 8000578:	bf30      	wfi
 800057a:	e7fd      	b.n	8000578 <main+0x18>

0800057c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800057c:	b480      	push	{r7}
 800057e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000580:	bf00      	nop
 8000582:	e7fd      	b.n	8000580 <NMI_Handler+0x4>

08000584 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000584:	b480      	push	{r7}
 8000586:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000588:	bf00      	nop
 800058a:	e7fd      	b.n	8000588 <HardFault_Handler+0x4>

0800058c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800058c:	b480      	push	{r7}
 800058e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000590:	bf00      	nop
 8000592:	e7fd      	b.n	8000590 <MemManage_Handler+0x4>

08000594 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000594:	b480      	push	{r7}
 8000596:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000598:	bf00      	nop
 800059a:	e7fd      	b.n	8000598 <BusFault_Handler+0x4>

0800059c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800059c:	b480      	push	{r7}
 800059e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80005a0:	bf00      	nop
 80005a2:	e7fd      	b.n	80005a0 <UsageFault_Handler+0x4>

080005a4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80005a4:	b480      	push	{r7}
 80005a6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80005a8:	bf00      	nop
 80005aa:	46bd      	mov	sp, r7
 80005ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005b0:	4770      	bx	lr

080005b2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80005b2:	b480      	push	{r7}
 80005b4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80005b6:	bf00      	nop
 80005b8:	46bd      	mov	sp, r7
 80005ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005be:	4770      	bx	lr

080005c0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80005c0:	b480      	push	{r7}
 80005c2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80005c4:	bf00      	nop
 80005c6:	46bd      	mov	sp, r7
 80005c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005cc:	4770      	bx	lr

080005ce <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80005ce:	b580      	push	{r7, lr}
 80005d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80005d2:	f000 f83f 	bl	8000654 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80005d6:	bf00      	nop
 80005d8:	bd80      	pop	{r7, pc}
	...

080005dc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80005dc:	b480      	push	{r7}
 80005de:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80005e0:	4b06      	ldr	r3, [pc, #24]	@ (80005fc <SystemInit+0x20>)
 80005e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80005e6:	4a05      	ldr	r2, [pc, #20]	@ (80005fc <SystemInit+0x20>)
 80005e8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80005ec:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80005f0:	bf00      	nop
 80005f2:	46bd      	mov	sp, r7
 80005f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005f8:	4770      	bx	lr
 80005fa:	bf00      	nop
 80005fc:	e000ed00 	.word	0xe000ed00

08000600 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000600:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000638 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000604:	f7ff ffea 	bl	80005dc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000608:	480c      	ldr	r0, [pc, #48]	@ (800063c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800060a:	490d      	ldr	r1, [pc, #52]	@ (8000640 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800060c:	4a0d      	ldr	r2, [pc, #52]	@ (8000644 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800060e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000610:	e002      	b.n	8000618 <LoopCopyDataInit>

08000612 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000612:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000614:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000616:	3304      	adds	r3, #4

08000618 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000618:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800061a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800061c:	d3f9      	bcc.n	8000612 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800061e:	4a0a      	ldr	r2, [pc, #40]	@ (8000648 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000620:	4c0a      	ldr	r4, [pc, #40]	@ (800064c <LoopFillZerobss+0x22>)
  movs r3, #0
 8000622:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000624:	e001      	b.n	800062a <LoopFillZerobss>

08000626 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000626:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000628:	3204      	adds	r2, #4

0800062a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800062a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800062c:	d3fb      	bcc.n	8000626 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 800062e:	f000 f825 	bl	800067c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000632:	f7ff ff95 	bl	8000560 <main>
  bx  lr    
 8000636:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000638:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800063c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000640:	20000004 	.word	0x20000004
  ldr r2, =_sidata
 8000644:	080006e4 	.word	0x080006e4
  ldr r2, =_sbss
 8000648:	20000004 	.word	0x20000004
  ldr r4, =_ebss
 800064c:	20000028 	.word	0x20000028

08000650 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000650:	e7fe      	b.n	8000650 <ADC_IRQHandler>
	...

08000654 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000654:	b480      	push	{r7}
 8000656:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000658:	4b06      	ldr	r3, [pc, #24]	@ (8000674 <HAL_IncTick+0x20>)
 800065a:	781b      	ldrb	r3, [r3, #0]
 800065c:	461a      	mov	r2, r3
 800065e:	4b06      	ldr	r3, [pc, #24]	@ (8000678 <HAL_IncTick+0x24>)
 8000660:	681b      	ldr	r3, [r3, #0]
 8000662:	4413      	add	r3, r2
 8000664:	4a04      	ldr	r2, [pc, #16]	@ (8000678 <HAL_IncTick+0x24>)
 8000666:	6013      	str	r3, [r2, #0]
}
 8000668:	bf00      	nop
 800066a:	46bd      	mov	sp, r7
 800066c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000670:	4770      	bx	lr
 8000672:	bf00      	nop
 8000674:	20000000 	.word	0x20000000
 8000678:	20000024 	.word	0x20000024

0800067c <__libc_init_array>:
 800067c:	b570      	push	{r4, r5, r6, lr}
 800067e:	4d0d      	ldr	r5, [pc, #52]	@ (80006b4 <__libc_init_array+0x38>)
 8000680:	4c0d      	ldr	r4, [pc, #52]	@ (80006b8 <__libc_init_array+0x3c>)
 8000682:	1b64      	subs	r4, r4, r5
 8000684:	10a4      	asrs	r4, r4, #2
 8000686:	2600      	movs	r6, #0
 8000688:	42a6      	cmp	r6, r4
 800068a:	d109      	bne.n	80006a0 <__libc_init_array+0x24>
 800068c:	4d0b      	ldr	r5, [pc, #44]	@ (80006bc <__libc_init_array+0x40>)
 800068e:	4c0c      	ldr	r4, [pc, #48]	@ (80006c0 <__libc_init_array+0x44>)
 8000690:	f000 f818 	bl	80006c4 <_init>
 8000694:	1b64      	subs	r4, r4, r5
 8000696:	10a4      	asrs	r4, r4, #2
 8000698:	2600      	movs	r6, #0
 800069a:	42a6      	cmp	r6, r4
 800069c:	d105      	bne.n	80006aa <__libc_init_array+0x2e>
 800069e:	bd70      	pop	{r4, r5, r6, pc}
 80006a0:	f855 3b04 	ldr.w	r3, [r5], #4
 80006a4:	4798      	blx	r3
 80006a6:	3601      	adds	r6, #1
 80006a8:	e7ee      	b.n	8000688 <__libc_init_array+0xc>
 80006aa:	f855 3b04 	ldr.w	r3, [r5], #4
 80006ae:	4798      	blx	r3
 80006b0:	3601      	adds	r6, #1
 80006b2:	e7f2      	b.n	800069a <__libc_init_array+0x1e>
 80006b4:	080006dc 	.word	0x080006dc
 80006b8:	080006dc 	.word	0x080006dc
 80006bc:	080006dc 	.word	0x080006dc
 80006c0:	080006e0 	.word	0x080006e0

080006c4 <_init>:
 80006c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80006c6:	bf00      	nop
 80006c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80006ca:	bc08      	pop	{r3}
 80006cc:	469e      	mov	lr, r3
 80006ce:	4770      	bx	lr

080006d0 <_fini>:
 80006d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80006d2:	bf00      	nop
 80006d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80006d6:	bc08      	pop	{r3}
 80006d8:	469e      	mov	lr, r3
 80006da:	4770      	bx	lr
