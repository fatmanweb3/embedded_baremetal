
baremtal_adc_itr_event.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000e44  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000005c  08001014  08001014  00002014  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001070  08001070  00003054  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08001070  08001070  00002070  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08001078  08001078  00003054  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001078  08001078  00002078  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800107c  0800107c  0000207c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000054  20000000  08001080  00003000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000016c  20000054  080010d4  00003054  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001c0  080010d4  000031c0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00003054  2**0
                  CONTENTS, READONLY
 12 .debug_info   00001854  00000000  00000000  00003084  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000064f  00000000  00000000  000048d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000210  00000000  00000000  00004f28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000171  00000000  00000000  00005138  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019e96  00000000  00000000  000052a9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00002741  00000000  00000000  0001f13f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c7093  00000000  00000000  00021880  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000e8913  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000b6c  00000000  00000000  000e8958  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000080  00000000  00000000  000e94c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000054 	.word	0x20000054
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08000ffc 	.word	0x08000ffc

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000058 	.word	0x20000058
 800020c:	08000ffc 	.word	0x08000ffc

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <ADC1_Init>:
//     }
// }


//---------------- ADC1 ----------------//
void ADC1_Init(void) {
 80002b0:	b480      	push	{r7}
 80002b2:	af00      	add	r7, sp, #0
    RCC->AHB1ENR |= RCC_AHB1ENR_GPIOAEN; // Enable GPIOA clock
 80002b4:	4b1d      	ldr	r3, [pc, #116]	@ (800032c <ADC1_Init+0x7c>)
 80002b6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80002b8:	4a1c      	ldr	r2, [pc, #112]	@ (800032c <ADC1_Init+0x7c>)
 80002ba:	f043 0301 	orr.w	r3, r3, #1
 80002be:	6313      	str	r3, [r2, #48]	@ 0x30

    // PA0 as Analog
    GPIOA->MODER |= GPIO_MODER_MODE0_Msk;
 80002c0:	4b1b      	ldr	r3, [pc, #108]	@ (8000330 <ADC1_Init+0x80>)
 80002c2:	681b      	ldr	r3, [r3, #0]
 80002c4:	4a1a      	ldr	r2, [pc, #104]	@ (8000330 <ADC1_Init+0x80>)
 80002c6:	f043 0303 	orr.w	r3, r3, #3
 80002ca:	6013      	str	r3, [r2, #0]
    GPIOA->PUPDR &= ~GPIO_PUPDR_PUPD0_Msk;
 80002cc:	4b18      	ldr	r3, [pc, #96]	@ (8000330 <ADC1_Init+0x80>)
 80002ce:	68db      	ldr	r3, [r3, #12]
 80002d0:	4a17      	ldr	r2, [pc, #92]	@ (8000330 <ADC1_Init+0x80>)
 80002d2:	f023 0303 	bic.w	r3, r3, #3
 80002d6:	60d3      	str	r3, [r2, #12]

    RCC->APB2ENR |= RCC_APB2ENR_ADC1EN; // Enable ADC1 clock
 80002d8:	4b14      	ldr	r3, [pc, #80]	@ (800032c <ADC1_Init+0x7c>)
 80002da:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80002dc:	4a13      	ldr	r2, [pc, #76]	@ (800032c <ADC1_Init+0x7c>)
 80002de:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80002e2:	6453      	str	r3, [r2, #68]	@ 0x44
    ADC->CCR &= ~ADC_CCR_ADCPRE_Msk;    // Prescaler /2
 80002e4:	4b13      	ldr	r3, [pc, #76]	@ (8000334 <ADC1_Init+0x84>)
 80002e6:	685b      	ldr	r3, [r3, #4]
 80002e8:	4a12      	ldr	r2, [pc, #72]	@ (8000334 <ADC1_Init+0x84>)
 80002ea:	f423 3340 	bic.w	r3, r3, #196608	@ 0x30000
 80002ee:	6053      	str	r3, [r2, #4]
    ADC1->SMPR2 &= ~ADC_SMPR2_SMP0_Msk;
 80002f0:	4b11      	ldr	r3, [pc, #68]	@ (8000338 <ADC1_Init+0x88>)
 80002f2:	691b      	ldr	r3, [r3, #16]
 80002f4:	4a10      	ldr	r2, [pc, #64]	@ (8000338 <ADC1_Init+0x88>)
 80002f6:	f023 0307 	bic.w	r3, r3, #7
 80002fa:	6113      	str	r3, [r2, #16]
    ADC1->SMPR2 |= (3 << ADC_SMPR2_SMP0_Pos); // 56 cycles
 80002fc:	4b0e      	ldr	r3, [pc, #56]	@ (8000338 <ADC1_Init+0x88>)
 80002fe:	691b      	ldr	r3, [r3, #16]
 8000300:	4a0d      	ldr	r2, [pc, #52]	@ (8000338 <ADC1_Init+0x88>)
 8000302:	f043 0303 	orr.w	r3, r3, #3
 8000306:	6113      	str	r3, [r2, #16]
    ADC1->SQR3 &= ~ADC_SQR3_SQ1_Msk;    // Channel 0
 8000308:	4b0b      	ldr	r3, [pc, #44]	@ (8000338 <ADC1_Init+0x88>)
 800030a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800030c:	4a0a      	ldr	r2, [pc, #40]	@ (8000338 <ADC1_Init+0x88>)
 800030e:	f023 031f 	bic.w	r3, r3, #31
 8000312:	6353      	str	r3, [r2, #52]	@ 0x34
    ADC1->CR2 |= ADC_CR2_ADON;          // Enable ADC
 8000314:	4b08      	ldr	r3, [pc, #32]	@ (8000338 <ADC1_Init+0x88>)
 8000316:	689b      	ldr	r3, [r3, #8]
 8000318:	4a07      	ldr	r2, [pc, #28]	@ (8000338 <ADC1_Init+0x88>)
 800031a:	f043 0301 	orr.w	r3, r3, #1
 800031e:	6093      	str	r3, [r2, #8]
}
 8000320:	bf00      	nop
 8000322:	46bd      	mov	sp, r7
 8000324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000328:	4770      	bx	lr
 800032a:	bf00      	nop
 800032c:	40023800 	.word	0x40023800
 8000330:	40020000 	.word	0x40020000
 8000334:	40012300 	.word	0x40012300
 8000338:	40012000 	.word	0x40012000

0800033c <ADC1_Read>:

uint16_t ADC1_Read(void) {
 800033c:	b480      	push	{r7}
 800033e:	af00      	add	r7, sp, #0
    ADC1->CR2 |= ADC_CR2_SWSTART;       // Start conversion
 8000340:	4b0a      	ldr	r3, [pc, #40]	@ (800036c <ADC1_Read+0x30>)
 8000342:	689b      	ldr	r3, [r3, #8]
 8000344:	4a09      	ldr	r2, [pc, #36]	@ (800036c <ADC1_Read+0x30>)
 8000346:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800034a:	6093      	str	r3, [r2, #8]
    while (!(ADC1->SR & ADC_SR_EOC));   // Wait until complete
 800034c:	bf00      	nop
 800034e:	4b07      	ldr	r3, [pc, #28]	@ (800036c <ADC1_Read+0x30>)
 8000350:	681b      	ldr	r3, [r3, #0]
 8000352:	f003 0302 	and.w	r3, r3, #2
 8000356:	2b00      	cmp	r3, #0
 8000358:	d0f9      	beq.n	800034e <ADC1_Read+0x12>
    return (uint16_t)ADC1->DR;          // Read result
 800035a:	4b04      	ldr	r3, [pc, #16]	@ (800036c <ADC1_Read+0x30>)
 800035c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800035e:	b29b      	uxth	r3, r3
}
 8000360:	4618      	mov	r0, r3
 8000362:	46bd      	mov	sp, r7
 8000364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000368:	4770      	bx	lr
 800036a:	bf00      	nop
 800036c:	40012000 	.word	0x40012000

08000370 <PWM_PA5_Init>:

//---------------- PWM on PA5 ----------------//
void PWM_PA5_Init(void) {
 8000370:	b480      	push	{r7}
 8000372:	af00      	add	r7, sp, #0
    // Enable GPIOA and TIM2 clocks
    RCC->AHB1ENR |= RCC_AHB1ENR_GPIOAEN;
 8000374:	4b2a      	ldr	r3, [pc, #168]	@ (8000420 <PWM_PA5_Init+0xb0>)
 8000376:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000378:	4a29      	ldr	r2, [pc, #164]	@ (8000420 <PWM_PA5_Init+0xb0>)
 800037a:	f043 0301 	orr.w	r3, r3, #1
 800037e:	6313      	str	r3, [r2, #48]	@ 0x30
    RCC->APB1ENR |= RCC_APB1ENR_TIM2EN;
 8000380:	4b27      	ldr	r3, [pc, #156]	@ (8000420 <PWM_PA5_Init+0xb0>)
 8000382:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000384:	4a26      	ldr	r2, [pc, #152]	@ (8000420 <PWM_PA5_Init+0xb0>)
 8000386:	f043 0301 	orr.w	r3, r3, #1
 800038a:	6413      	str	r3, [r2, #64]	@ 0x40

    // Set PA5 to Alternate Function mode (AF1 for TIM2_CH1)
    GPIOA->MODER &= ~GPIO_MODER_MODE5_Msk;
 800038c:	4b25      	ldr	r3, [pc, #148]	@ (8000424 <PWM_PA5_Init+0xb4>)
 800038e:	681b      	ldr	r3, [r3, #0]
 8000390:	4a24      	ldr	r2, [pc, #144]	@ (8000424 <PWM_PA5_Init+0xb4>)
 8000392:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8000396:	6013      	str	r3, [r2, #0]
    GPIOA->MODER |= GPIO_MODER_MODE5_1; // AF mode
 8000398:	4b22      	ldr	r3, [pc, #136]	@ (8000424 <PWM_PA5_Init+0xb4>)
 800039a:	681b      	ldr	r3, [r3, #0]
 800039c:	4a21      	ldr	r2, [pc, #132]	@ (8000424 <PWM_PA5_Init+0xb4>)
 800039e:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80003a2:	6013      	str	r3, [r2, #0]
    GPIOA->AFR[0] &= ~GPIO_AFRL_AFSEL5_Msk;
 80003a4:	4b1f      	ldr	r3, [pc, #124]	@ (8000424 <PWM_PA5_Init+0xb4>)
 80003a6:	6a1b      	ldr	r3, [r3, #32]
 80003a8:	4a1e      	ldr	r2, [pc, #120]	@ (8000424 <PWM_PA5_Init+0xb4>)
 80003aa:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 80003ae:	6213      	str	r3, [r2, #32]
    GPIOA->AFR[0] |= (1 << GPIO_AFRL_AFSEL5_Pos); // AF1
 80003b0:	4b1c      	ldr	r3, [pc, #112]	@ (8000424 <PWM_PA5_Init+0xb4>)
 80003b2:	6a1b      	ldr	r3, [r3, #32]
 80003b4:	4a1b      	ldr	r2, [pc, #108]	@ (8000424 <PWM_PA5_Init+0xb4>)
 80003b6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80003ba:	6213      	str	r3, [r2, #32]

    // Configure TIM2 for PWM
    TIM2->PSC = 16 - 1;      // Prescaler: 16 MHz / 16 = 1 MHz timer clock
 80003bc:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80003c0:	220f      	movs	r2, #15
 80003c2:	629a      	str	r2, [r3, #40]	@ 0x28
    TIM2->ARR = 1023;        // Auto-reload: 10-bit resolution
 80003c4:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80003c8:	f240 32ff 	movw	r2, #1023	@ 0x3ff
 80003cc:	62da      	str	r2, [r3, #44]	@ 0x2c
    TIM2->CCR1 = 0;          // Start with 0% duty
 80003ce:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80003d2:	2200      	movs	r2, #0
 80003d4:	635a      	str	r2, [r3, #52]	@ 0x34

    // PWM mode 1 on CH1, enable preload
    TIM2->CCMR1 &= ~TIM_CCMR1_OC1M_Msk;
 80003d6:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80003da:	699b      	ldr	r3, [r3, #24]
 80003dc:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80003e0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80003e4:	6193      	str	r3, [r2, #24]
    TIM2->CCMR1 |= (6 << TIM_CCMR1_OC1M_Pos) | TIM_CCMR1_OC1PE;
 80003e6:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80003ea:	699b      	ldr	r3, [r3, #24]
 80003ec:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80003f0:	f043 0368 	orr.w	r3, r3, #104	@ 0x68
 80003f4:	6193      	str	r3, [r2, #24]

    TIM2->CCER |= TIM_CCER_CC1E;  // Enable output on CH1
 80003f6:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80003fa:	6a1b      	ldr	r3, [r3, #32]
 80003fc:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000400:	f043 0301 	orr.w	r3, r3, #1
 8000404:	6213      	str	r3, [r2, #32]
    TIM2->CR1 |= TIM_CR1_CEN;     // Enable counter
 8000406:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800040a:	681b      	ldr	r3, [r3, #0]
 800040c:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000410:	f043 0301 	orr.w	r3, r3, #1
 8000414:	6013      	str	r3, [r2, #0]
}
 8000416:	bf00      	nop
 8000418:	46bd      	mov	sp, r7
 800041a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800041e:	4770      	bx	lr
 8000420:	40023800 	.word	0x40023800
 8000424:	40020000 	.word	0x40020000

08000428 <USART2_Init>:


//---------------- USART2 ----------------//
void USART2_Init(void) {
 8000428:	b480      	push	{r7}
 800042a:	af00      	add	r7, sp, #0
    // 1. Enable clocks
    RCC->AHB1ENR |= RCC_AHB1ENR_GPIOAEN;     // Enable GPIOA clock
 800042c:	4b17      	ldr	r3, [pc, #92]	@ (800048c <USART2_Init+0x64>)
 800042e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000430:	4a16      	ldr	r2, [pc, #88]	@ (800048c <USART2_Init+0x64>)
 8000432:	f043 0301 	orr.w	r3, r3, #1
 8000436:	6313      	str	r3, [r2, #48]	@ 0x30
    RCC->APB1ENR |= RCC_APB1ENR_USART2EN;    // Enable USART2 clock
 8000438:	4b14      	ldr	r3, [pc, #80]	@ (800048c <USART2_Init+0x64>)
 800043a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800043c:	4a13      	ldr	r2, [pc, #76]	@ (800048c <USART2_Init+0x64>)
 800043e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000442:	6413      	str	r3, [r2, #64]	@ 0x40

    // 2. Set PA2 (TX) and PA3 (RX) to Alternate Function mode (AF7)
    GPIOA->MODER &= ~((GPIO_MODER_MODE2_Msk) | (GPIO_MODER_MODE3_Msk)); // Clear
 8000444:	4b12      	ldr	r3, [pc, #72]	@ (8000490 <USART2_Init+0x68>)
 8000446:	681b      	ldr	r3, [r3, #0]
 8000448:	4a11      	ldr	r2, [pc, #68]	@ (8000490 <USART2_Init+0x68>)
 800044a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800044e:	6013      	str	r3, [r2, #0]
    GPIOA->MODER |= (GPIO_MODER_MODE2_1) | (GPIO_MODER_MODE3_1);        // 10: Alternate Function
 8000450:	4b0f      	ldr	r3, [pc, #60]	@ (8000490 <USART2_Init+0x68>)
 8000452:	681b      	ldr	r3, [r3, #0]
 8000454:	4a0e      	ldr	r2, [pc, #56]	@ (8000490 <USART2_Init+0x68>)
 8000456:	f043 03a0 	orr.w	r3, r3, #160	@ 0xa0
 800045a:	6013      	str	r3, [r2, #0]

    GPIOA->AFR[0] &= ~((GPIO_AFRL_AFSEL2_Msk) | (GPIO_AFRL_AFSEL3_Msk)); // Clear AF
 800045c:	4b0c      	ldr	r3, [pc, #48]	@ (8000490 <USART2_Init+0x68>)
 800045e:	6a1b      	ldr	r3, [r3, #32]
 8000460:	4a0b      	ldr	r2, [pc, #44]	@ (8000490 <USART2_Init+0x68>)
 8000462:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8000466:	6213      	str	r3, [r2, #32]
    GPIOA->AFR[0] |= (7 << GPIO_AFRL_AFSEL2_Pos) | (7 << GPIO_AFRL_AFSEL3_Pos); // AF7
 8000468:	4b09      	ldr	r3, [pc, #36]	@ (8000490 <USART2_Init+0x68>)
 800046a:	6a1b      	ldr	r3, [r3, #32]
 800046c:	4a08      	ldr	r2, [pc, #32]	@ (8000490 <USART2_Init+0x68>)
 800046e:	f443 43ee 	orr.w	r3, r3, #30464	@ 0x7700
 8000472:	6213      	str	r3, [r2, #32]

    // 3. Set baud rate
    USART2->BRR = SYSCLK_FREQ / BAUDRATE; // Simple calculation (oversampling by 16)
 8000474:	4b07      	ldr	r3, [pc, #28]	@ (8000494 <USART2_Init+0x6c>)
 8000476:	228a      	movs	r2, #138	@ 0x8a
 8000478:	609a      	str	r2, [r3, #8]

    // 4. Enable TX, RX, and USART
    USART2->CR1 = USART_CR1_TE | USART_CR1_RE | USART_CR1_UE;
 800047a:	4b06      	ldr	r3, [pc, #24]	@ (8000494 <USART2_Init+0x6c>)
 800047c:	f242 020c 	movw	r2, #8204	@ 0x200c
 8000480:	60da      	str	r2, [r3, #12]
}
 8000482:	bf00      	nop
 8000484:	46bd      	mov	sp, r7
 8000486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800048a:	4770      	bx	lr
 800048c:	40023800 	.word	0x40023800
 8000490:	40020000 	.word	0x40020000
 8000494:	40004400 	.word	0x40004400

08000498 <USART2_SendChar>:

void USART2_SendChar(char c) {
 8000498:	b480      	push	{r7}
 800049a:	b083      	sub	sp, #12
 800049c:	af00      	add	r7, sp, #0
 800049e:	4603      	mov	r3, r0
 80004a0:	71fb      	strb	r3, [r7, #7]
    while (!(USART2->SR & USART_SR_TXE)); // Wait for TX buffer empty
 80004a2:	bf00      	nop
 80004a4:	4b07      	ldr	r3, [pc, #28]	@ (80004c4 <USART2_SendChar+0x2c>)
 80004a6:	681b      	ldr	r3, [r3, #0]
 80004a8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80004ac:	2b00      	cmp	r3, #0
 80004ae:	d0f9      	beq.n	80004a4 <USART2_SendChar+0xc>
    USART2->DR = c;
 80004b0:	4a04      	ldr	r2, [pc, #16]	@ (80004c4 <USART2_SendChar+0x2c>)
 80004b2:	79fb      	ldrb	r3, [r7, #7]
 80004b4:	6053      	str	r3, [r2, #4]
}
 80004b6:	bf00      	nop
 80004b8:	370c      	adds	r7, #12
 80004ba:	46bd      	mov	sp, r7
 80004bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004c0:	4770      	bx	lr
 80004c2:	bf00      	nop
 80004c4:	40004400 	.word	0x40004400

080004c8 <USART2_SendString>:

void USART2_SendString(const char *str) {
 80004c8:	b580      	push	{r7, lr}
 80004ca:	b082      	sub	sp, #8
 80004cc:	af00      	add	r7, sp, #0
 80004ce:	6078      	str	r0, [r7, #4]
    while (*str) {
 80004d0:	e006      	b.n	80004e0 <USART2_SendString+0x18>
        USART2_SendChar(*str++);
 80004d2:	687b      	ldr	r3, [r7, #4]
 80004d4:	1c5a      	adds	r2, r3, #1
 80004d6:	607a      	str	r2, [r7, #4]
 80004d8:	781b      	ldrb	r3, [r3, #0]
 80004da:	4618      	mov	r0, r3
 80004dc:	f7ff ffdc 	bl	8000498 <USART2_SendChar>
    while (*str) {
 80004e0:	687b      	ldr	r3, [r7, #4]
 80004e2:	781b      	ldrb	r3, [r3, #0]
 80004e4:	2b00      	cmp	r3, #0
 80004e6:	d1f4      	bne.n	80004d2 <USART2_SendString+0xa>
    }
}
 80004e8:	bf00      	nop
 80004ea:	bf00      	nop
 80004ec:	3708      	adds	r7, #8
 80004ee:	46bd      	mov	sp, r7
 80004f0:	bd80      	pop	{r7, pc}
	...

080004f4 <main>:

int main(void) {
 80004f4:	b580      	push	{r7, lr}
 80004f6:	b090      	sub	sp, #64	@ 0x40
 80004f8:	af00      	add	r7, sp, #0
    char buffer[50];
    uint16_t adc_value;

    USART2_Init();
 80004fa:	f7ff ff95 	bl	8000428 <USART2_Init>
    ADC1_Init();
 80004fe:	f7ff fed7 	bl	80002b0 <ADC1_Init>

    USART2_SendString("ADC1 + USART2 Test\r\n");
 8000502:	4815      	ldr	r0, [pc, #84]	@ (8000558 <main+0x64>)
 8000504:	f7ff ffe0 	bl	80004c8 <USART2_SendString>
    uint16_t pwm_duty;

    ADC1_Init();
 8000508:	f7ff fed2 	bl	80002b0 <ADC1_Init>
    PWM_PA5_Init();
 800050c:	f7ff ff30 	bl	8000370 <PWM_PA5_Init>

    while (1) {
        adc_value = ADC1_Read();   // Read ADC (0-4095)
 8000510:	f7ff ff14 	bl	800033c <ADC1_Read>
 8000514:	4603      	mov	r3, r0
 8000516:	87fb      	strh	r3, [r7, #62]	@ 0x3e
        pwm_duty = adc_value / 4;  // Map to 0-1023
 8000518:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 800051a:	089b      	lsrs	r3, r3, #2
 800051c:	87bb      	strh	r3, [r7, #60]	@ 0x3c
        TIM2->CCR1 = pwm_duty;     // Update PWM duty
 800051e:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000522:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8000524:	6353      	str	r3, [r2, #52]	@ 0x34

        sprintf(buffer, "ADC Value: %u\r\n", adc_value);
 8000526:	8ffa      	ldrh	r2, [r7, #62]	@ 0x3e
 8000528:	f107 0308 	add.w	r3, r7, #8
 800052c:	490b      	ldr	r1, [pc, #44]	@ (800055c <main+0x68>)
 800052e:	4618      	mov	r0, r3
 8000530:	f000 f8cc 	bl	80006cc <siprintf>
        USART2_SendString(buffer);
 8000534:	f107 0308 	add.w	r3, r7, #8
 8000538:	4618      	mov	r0, r3
 800053a:	f7ff ffc5 	bl	80004c8 <USART2_SendString>

        for (volatile int i = 0; i < 50000; i++); // Delay
 800053e:	2300      	movs	r3, #0
 8000540:	607b      	str	r3, [r7, #4]
 8000542:	e002      	b.n	800054a <main+0x56>
 8000544:	687b      	ldr	r3, [r7, #4]
 8000546:	3301      	adds	r3, #1
 8000548:	607b      	str	r3, [r7, #4]
 800054a:	687b      	ldr	r3, [r7, #4]
 800054c:	f24c 324f 	movw	r2, #49999	@ 0xc34f
 8000550:	4293      	cmp	r3, r2
 8000552:	ddf7      	ble.n	8000544 <main+0x50>
        adc_value = ADC1_Read();   // Read ADC (0-4095)
 8000554:	e7dc      	b.n	8000510 <main+0x1c>
 8000556:	bf00      	nop
 8000558:	08001014 	.word	0x08001014
 800055c:	0800102c 	.word	0x0800102c

08000560 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000560:	b480      	push	{r7}
 8000562:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000564:	bf00      	nop
 8000566:	e7fd      	b.n	8000564 <NMI_Handler+0x4>

08000568 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000568:	b480      	push	{r7}
 800056a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800056c:	bf00      	nop
 800056e:	e7fd      	b.n	800056c <HardFault_Handler+0x4>

08000570 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000570:	b480      	push	{r7}
 8000572:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000574:	bf00      	nop
 8000576:	e7fd      	b.n	8000574 <MemManage_Handler+0x4>

08000578 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000578:	b480      	push	{r7}
 800057a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800057c:	bf00      	nop
 800057e:	e7fd      	b.n	800057c <BusFault_Handler+0x4>

08000580 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000580:	b480      	push	{r7}
 8000582:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000584:	bf00      	nop
 8000586:	e7fd      	b.n	8000584 <UsageFault_Handler+0x4>

08000588 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000588:	b480      	push	{r7}
 800058a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800058c:	bf00      	nop
 800058e:	46bd      	mov	sp, r7
 8000590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000594:	4770      	bx	lr

08000596 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000596:	b480      	push	{r7}
 8000598:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800059a:	bf00      	nop
 800059c:	46bd      	mov	sp, r7
 800059e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005a2:	4770      	bx	lr

080005a4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80005a4:	b480      	push	{r7}
 80005a6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80005a8:	bf00      	nop
 80005aa:	46bd      	mov	sp, r7
 80005ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005b0:	4770      	bx	lr

080005b2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80005b2:	b580      	push	{r7, lr}
 80005b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80005b6:	f000 f875 	bl	80006a4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80005ba:	bf00      	nop
 80005bc:	bd80      	pop	{r7, pc}
	...

080005c0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80005c0:	b580      	push	{r7, lr}
 80005c2:	b086      	sub	sp, #24
 80005c4:	af00      	add	r7, sp, #0
 80005c6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80005c8:	4a14      	ldr	r2, [pc, #80]	@ (800061c <_sbrk+0x5c>)
 80005ca:	4b15      	ldr	r3, [pc, #84]	@ (8000620 <_sbrk+0x60>)
 80005cc:	1ad3      	subs	r3, r2, r3
 80005ce:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80005d0:	697b      	ldr	r3, [r7, #20]
 80005d2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80005d4:	4b13      	ldr	r3, [pc, #76]	@ (8000624 <_sbrk+0x64>)
 80005d6:	681b      	ldr	r3, [r3, #0]
 80005d8:	2b00      	cmp	r3, #0
 80005da:	d102      	bne.n	80005e2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80005dc:	4b11      	ldr	r3, [pc, #68]	@ (8000624 <_sbrk+0x64>)
 80005de:	4a12      	ldr	r2, [pc, #72]	@ (8000628 <_sbrk+0x68>)
 80005e0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80005e2:	4b10      	ldr	r3, [pc, #64]	@ (8000624 <_sbrk+0x64>)
 80005e4:	681a      	ldr	r2, [r3, #0]
 80005e6:	687b      	ldr	r3, [r7, #4]
 80005e8:	4413      	add	r3, r2
 80005ea:	693a      	ldr	r2, [r7, #16]
 80005ec:	429a      	cmp	r2, r3
 80005ee:	d207      	bcs.n	8000600 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80005f0:	f000 f88e 	bl	8000710 <__errno>
 80005f4:	4603      	mov	r3, r0
 80005f6:	220c      	movs	r2, #12
 80005f8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80005fa:	f04f 33ff 	mov.w	r3, #4294967295
 80005fe:	e009      	b.n	8000614 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000600:	4b08      	ldr	r3, [pc, #32]	@ (8000624 <_sbrk+0x64>)
 8000602:	681b      	ldr	r3, [r3, #0]
 8000604:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000606:	4b07      	ldr	r3, [pc, #28]	@ (8000624 <_sbrk+0x64>)
 8000608:	681a      	ldr	r2, [r3, #0]
 800060a:	687b      	ldr	r3, [r7, #4]
 800060c:	4413      	add	r3, r2
 800060e:	4a05      	ldr	r2, [pc, #20]	@ (8000624 <_sbrk+0x64>)
 8000610:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000612:	68fb      	ldr	r3, [r7, #12]
}
 8000614:	4618      	mov	r0, r3
 8000616:	3718      	adds	r7, #24
 8000618:	46bd      	mov	sp, r7
 800061a:	bd80      	pop	{r7, pc}
 800061c:	20020000 	.word	0x20020000
 8000620:	00000400 	.word	0x00000400
 8000624:	20000070 	.word	0x20000070
 8000628:	200001c0 	.word	0x200001c0

0800062c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800062c:	b480      	push	{r7}
 800062e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000630:	4b06      	ldr	r3, [pc, #24]	@ (800064c <SystemInit+0x20>)
 8000632:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000636:	4a05      	ldr	r2, [pc, #20]	@ (800064c <SystemInit+0x20>)
 8000638:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800063c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000640:	bf00      	nop
 8000642:	46bd      	mov	sp, r7
 8000644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000648:	4770      	bx	lr
 800064a:	bf00      	nop
 800064c:	e000ed00 	.word	0xe000ed00

08000650 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000650:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000688 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000654:	f7ff ffea 	bl	800062c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000658:	480c      	ldr	r0, [pc, #48]	@ (800068c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800065a:	490d      	ldr	r1, [pc, #52]	@ (8000690 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800065c:	4a0d      	ldr	r2, [pc, #52]	@ (8000694 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800065e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000660:	e002      	b.n	8000668 <LoopCopyDataInit>

08000662 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000662:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000664:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000666:	3304      	adds	r3, #4

08000668 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000668:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800066a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800066c:	d3f9      	bcc.n	8000662 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800066e:	4a0a      	ldr	r2, [pc, #40]	@ (8000698 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000670:	4c0a      	ldr	r4, [pc, #40]	@ (800069c <LoopFillZerobss+0x22>)
  movs r3, #0
 8000672:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000674:	e001      	b.n	800067a <LoopFillZerobss>

08000676 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000676:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000678:	3204      	adds	r2, #4

0800067a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800067a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800067c:	d3fb      	bcc.n	8000676 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 800067e:	f000 f84d 	bl	800071c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000682:	f7ff ff37 	bl	80004f4 <main>
  bx  lr    
 8000686:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000688:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800068c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000690:	20000054 	.word	0x20000054
  ldr r2, =_sidata
 8000694:	08001080 	.word	0x08001080
  ldr r2, =_sbss
 8000698:	20000054 	.word	0x20000054
  ldr r4, =_ebss
 800069c:	200001c0 	.word	0x200001c0

080006a0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80006a0:	e7fe      	b.n	80006a0 <ADC_IRQHandler>
	...

080006a4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80006a4:	b480      	push	{r7}
 80006a6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80006a8:	4b06      	ldr	r3, [pc, #24]	@ (80006c4 <HAL_IncTick+0x20>)
 80006aa:	781b      	ldrb	r3, [r3, #0]
 80006ac:	461a      	mov	r2, r3
 80006ae:	4b06      	ldr	r3, [pc, #24]	@ (80006c8 <HAL_IncTick+0x24>)
 80006b0:	681b      	ldr	r3, [r3, #0]
 80006b2:	4413      	add	r3, r2
 80006b4:	4a04      	ldr	r2, [pc, #16]	@ (80006c8 <HAL_IncTick+0x24>)
 80006b6:	6013      	str	r3, [r2, #0]
}
 80006b8:	bf00      	nop
 80006ba:	46bd      	mov	sp, r7
 80006bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006c0:	4770      	bx	lr
 80006c2:	bf00      	nop
 80006c4:	20000000 	.word	0x20000000
 80006c8:	20000074 	.word	0x20000074

080006cc <siprintf>:
 80006cc:	b40e      	push	{r1, r2, r3}
 80006ce:	b510      	push	{r4, lr}
 80006d0:	b09d      	sub	sp, #116	@ 0x74
 80006d2:	ab1f      	add	r3, sp, #124	@ 0x7c
 80006d4:	9002      	str	r0, [sp, #8]
 80006d6:	9006      	str	r0, [sp, #24]
 80006d8:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80006dc:	480a      	ldr	r0, [pc, #40]	@ (8000708 <siprintf+0x3c>)
 80006de:	9107      	str	r1, [sp, #28]
 80006e0:	9104      	str	r1, [sp, #16]
 80006e2:	490a      	ldr	r1, [pc, #40]	@ (800070c <siprintf+0x40>)
 80006e4:	f853 2b04 	ldr.w	r2, [r3], #4
 80006e8:	9105      	str	r1, [sp, #20]
 80006ea:	2400      	movs	r4, #0
 80006ec:	a902      	add	r1, sp, #8
 80006ee:	6800      	ldr	r0, [r0, #0]
 80006f0:	9301      	str	r3, [sp, #4]
 80006f2:	941b      	str	r4, [sp, #108]	@ 0x6c
 80006f4:	f000 f98c 	bl	8000a10 <_svfiprintf_r>
 80006f8:	9b02      	ldr	r3, [sp, #8]
 80006fa:	701c      	strb	r4, [r3, #0]
 80006fc:	b01d      	add	sp, #116	@ 0x74
 80006fe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000702:	b003      	add	sp, #12
 8000704:	4770      	bx	lr
 8000706:	bf00      	nop
 8000708:	20000004 	.word	0x20000004
 800070c:	ffff0208 	.word	0xffff0208

08000710 <__errno>:
 8000710:	4b01      	ldr	r3, [pc, #4]	@ (8000718 <__errno+0x8>)
 8000712:	6818      	ldr	r0, [r3, #0]
 8000714:	4770      	bx	lr
 8000716:	bf00      	nop
 8000718:	20000004 	.word	0x20000004

0800071c <__libc_init_array>:
 800071c:	b570      	push	{r4, r5, r6, lr}
 800071e:	4d0d      	ldr	r5, [pc, #52]	@ (8000754 <__libc_init_array+0x38>)
 8000720:	4c0d      	ldr	r4, [pc, #52]	@ (8000758 <__libc_init_array+0x3c>)
 8000722:	1b64      	subs	r4, r4, r5
 8000724:	10a4      	asrs	r4, r4, #2
 8000726:	2600      	movs	r6, #0
 8000728:	42a6      	cmp	r6, r4
 800072a:	d109      	bne.n	8000740 <__libc_init_array+0x24>
 800072c:	4d0b      	ldr	r5, [pc, #44]	@ (800075c <__libc_init_array+0x40>)
 800072e:	4c0c      	ldr	r4, [pc, #48]	@ (8000760 <__libc_init_array+0x44>)
 8000730:	f000 fc64 	bl	8000ffc <_init>
 8000734:	1b64      	subs	r4, r4, r5
 8000736:	10a4      	asrs	r4, r4, #2
 8000738:	2600      	movs	r6, #0
 800073a:	42a6      	cmp	r6, r4
 800073c:	d105      	bne.n	800074a <__libc_init_array+0x2e>
 800073e:	bd70      	pop	{r4, r5, r6, pc}
 8000740:	f855 3b04 	ldr.w	r3, [r5], #4
 8000744:	4798      	blx	r3
 8000746:	3601      	adds	r6, #1
 8000748:	e7ee      	b.n	8000728 <__libc_init_array+0xc>
 800074a:	f855 3b04 	ldr.w	r3, [r5], #4
 800074e:	4798      	blx	r3
 8000750:	3601      	adds	r6, #1
 8000752:	e7f2      	b.n	800073a <__libc_init_array+0x1e>
 8000754:	08001078 	.word	0x08001078
 8000758:	08001078 	.word	0x08001078
 800075c:	08001078 	.word	0x08001078
 8000760:	0800107c 	.word	0x0800107c

08000764 <__retarget_lock_acquire_recursive>:
 8000764:	4770      	bx	lr

08000766 <__retarget_lock_release_recursive>:
 8000766:	4770      	bx	lr

08000768 <_free_r>:
 8000768:	b538      	push	{r3, r4, r5, lr}
 800076a:	4605      	mov	r5, r0
 800076c:	2900      	cmp	r1, #0
 800076e:	d041      	beq.n	80007f4 <_free_r+0x8c>
 8000770:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8000774:	1f0c      	subs	r4, r1, #4
 8000776:	2b00      	cmp	r3, #0
 8000778:	bfb8      	it	lt
 800077a:	18e4      	addlt	r4, r4, r3
 800077c:	f000 f8e0 	bl	8000940 <__malloc_lock>
 8000780:	4a1d      	ldr	r2, [pc, #116]	@ (80007f8 <_free_r+0x90>)
 8000782:	6813      	ldr	r3, [r2, #0]
 8000784:	b933      	cbnz	r3, 8000794 <_free_r+0x2c>
 8000786:	6063      	str	r3, [r4, #4]
 8000788:	6014      	str	r4, [r2, #0]
 800078a:	4628      	mov	r0, r5
 800078c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000790:	f000 b8dc 	b.w	800094c <__malloc_unlock>
 8000794:	42a3      	cmp	r3, r4
 8000796:	d908      	bls.n	80007aa <_free_r+0x42>
 8000798:	6820      	ldr	r0, [r4, #0]
 800079a:	1821      	adds	r1, r4, r0
 800079c:	428b      	cmp	r3, r1
 800079e:	bf01      	itttt	eq
 80007a0:	6819      	ldreq	r1, [r3, #0]
 80007a2:	685b      	ldreq	r3, [r3, #4]
 80007a4:	1809      	addeq	r1, r1, r0
 80007a6:	6021      	streq	r1, [r4, #0]
 80007a8:	e7ed      	b.n	8000786 <_free_r+0x1e>
 80007aa:	461a      	mov	r2, r3
 80007ac:	685b      	ldr	r3, [r3, #4]
 80007ae:	b10b      	cbz	r3, 80007b4 <_free_r+0x4c>
 80007b0:	42a3      	cmp	r3, r4
 80007b2:	d9fa      	bls.n	80007aa <_free_r+0x42>
 80007b4:	6811      	ldr	r1, [r2, #0]
 80007b6:	1850      	adds	r0, r2, r1
 80007b8:	42a0      	cmp	r0, r4
 80007ba:	d10b      	bne.n	80007d4 <_free_r+0x6c>
 80007bc:	6820      	ldr	r0, [r4, #0]
 80007be:	4401      	add	r1, r0
 80007c0:	1850      	adds	r0, r2, r1
 80007c2:	4283      	cmp	r3, r0
 80007c4:	6011      	str	r1, [r2, #0]
 80007c6:	d1e0      	bne.n	800078a <_free_r+0x22>
 80007c8:	6818      	ldr	r0, [r3, #0]
 80007ca:	685b      	ldr	r3, [r3, #4]
 80007cc:	6053      	str	r3, [r2, #4]
 80007ce:	4408      	add	r0, r1
 80007d0:	6010      	str	r0, [r2, #0]
 80007d2:	e7da      	b.n	800078a <_free_r+0x22>
 80007d4:	d902      	bls.n	80007dc <_free_r+0x74>
 80007d6:	230c      	movs	r3, #12
 80007d8:	602b      	str	r3, [r5, #0]
 80007da:	e7d6      	b.n	800078a <_free_r+0x22>
 80007dc:	6820      	ldr	r0, [r4, #0]
 80007de:	1821      	adds	r1, r4, r0
 80007e0:	428b      	cmp	r3, r1
 80007e2:	bf04      	itt	eq
 80007e4:	6819      	ldreq	r1, [r3, #0]
 80007e6:	685b      	ldreq	r3, [r3, #4]
 80007e8:	6063      	str	r3, [r4, #4]
 80007ea:	bf04      	itt	eq
 80007ec:	1809      	addeq	r1, r1, r0
 80007ee:	6021      	streq	r1, [r4, #0]
 80007f0:	6054      	str	r4, [r2, #4]
 80007f2:	e7ca      	b.n	800078a <_free_r+0x22>
 80007f4:	bd38      	pop	{r3, r4, r5, pc}
 80007f6:	bf00      	nop
 80007f8:	200001bc 	.word	0x200001bc

080007fc <sbrk_aligned>:
 80007fc:	b570      	push	{r4, r5, r6, lr}
 80007fe:	4e0f      	ldr	r6, [pc, #60]	@ (800083c <sbrk_aligned+0x40>)
 8000800:	460c      	mov	r4, r1
 8000802:	6831      	ldr	r1, [r6, #0]
 8000804:	4605      	mov	r5, r0
 8000806:	b911      	cbnz	r1, 800080e <sbrk_aligned+0x12>
 8000808:	f000 fba4 	bl	8000f54 <_sbrk_r>
 800080c:	6030      	str	r0, [r6, #0]
 800080e:	4621      	mov	r1, r4
 8000810:	4628      	mov	r0, r5
 8000812:	f000 fb9f 	bl	8000f54 <_sbrk_r>
 8000816:	1c43      	adds	r3, r0, #1
 8000818:	d103      	bne.n	8000822 <sbrk_aligned+0x26>
 800081a:	f04f 34ff 	mov.w	r4, #4294967295
 800081e:	4620      	mov	r0, r4
 8000820:	bd70      	pop	{r4, r5, r6, pc}
 8000822:	1cc4      	adds	r4, r0, #3
 8000824:	f024 0403 	bic.w	r4, r4, #3
 8000828:	42a0      	cmp	r0, r4
 800082a:	d0f8      	beq.n	800081e <sbrk_aligned+0x22>
 800082c:	1a21      	subs	r1, r4, r0
 800082e:	4628      	mov	r0, r5
 8000830:	f000 fb90 	bl	8000f54 <_sbrk_r>
 8000834:	3001      	adds	r0, #1
 8000836:	d1f2      	bne.n	800081e <sbrk_aligned+0x22>
 8000838:	e7ef      	b.n	800081a <sbrk_aligned+0x1e>
 800083a:	bf00      	nop
 800083c:	200001b8 	.word	0x200001b8

08000840 <_malloc_r>:
 8000840:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000844:	1ccd      	adds	r5, r1, #3
 8000846:	f025 0503 	bic.w	r5, r5, #3
 800084a:	3508      	adds	r5, #8
 800084c:	2d0c      	cmp	r5, #12
 800084e:	bf38      	it	cc
 8000850:	250c      	movcc	r5, #12
 8000852:	2d00      	cmp	r5, #0
 8000854:	4606      	mov	r6, r0
 8000856:	db01      	blt.n	800085c <_malloc_r+0x1c>
 8000858:	42a9      	cmp	r1, r5
 800085a:	d904      	bls.n	8000866 <_malloc_r+0x26>
 800085c:	230c      	movs	r3, #12
 800085e:	6033      	str	r3, [r6, #0]
 8000860:	2000      	movs	r0, #0
 8000862:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8000866:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800093c <_malloc_r+0xfc>
 800086a:	f000 f869 	bl	8000940 <__malloc_lock>
 800086e:	f8d8 3000 	ldr.w	r3, [r8]
 8000872:	461c      	mov	r4, r3
 8000874:	bb44      	cbnz	r4, 80008c8 <_malloc_r+0x88>
 8000876:	4629      	mov	r1, r5
 8000878:	4630      	mov	r0, r6
 800087a:	f7ff ffbf 	bl	80007fc <sbrk_aligned>
 800087e:	1c43      	adds	r3, r0, #1
 8000880:	4604      	mov	r4, r0
 8000882:	d158      	bne.n	8000936 <_malloc_r+0xf6>
 8000884:	f8d8 4000 	ldr.w	r4, [r8]
 8000888:	4627      	mov	r7, r4
 800088a:	2f00      	cmp	r7, #0
 800088c:	d143      	bne.n	8000916 <_malloc_r+0xd6>
 800088e:	2c00      	cmp	r4, #0
 8000890:	d04b      	beq.n	800092a <_malloc_r+0xea>
 8000892:	6823      	ldr	r3, [r4, #0]
 8000894:	4639      	mov	r1, r7
 8000896:	4630      	mov	r0, r6
 8000898:	eb04 0903 	add.w	r9, r4, r3
 800089c:	f000 fb5a 	bl	8000f54 <_sbrk_r>
 80008a0:	4581      	cmp	r9, r0
 80008a2:	d142      	bne.n	800092a <_malloc_r+0xea>
 80008a4:	6821      	ldr	r1, [r4, #0]
 80008a6:	1a6d      	subs	r5, r5, r1
 80008a8:	4629      	mov	r1, r5
 80008aa:	4630      	mov	r0, r6
 80008ac:	f7ff ffa6 	bl	80007fc <sbrk_aligned>
 80008b0:	3001      	adds	r0, #1
 80008b2:	d03a      	beq.n	800092a <_malloc_r+0xea>
 80008b4:	6823      	ldr	r3, [r4, #0]
 80008b6:	442b      	add	r3, r5
 80008b8:	6023      	str	r3, [r4, #0]
 80008ba:	f8d8 3000 	ldr.w	r3, [r8]
 80008be:	685a      	ldr	r2, [r3, #4]
 80008c0:	bb62      	cbnz	r2, 800091c <_malloc_r+0xdc>
 80008c2:	f8c8 7000 	str.w	r7, [r8]
 80008c6:	e00f      	b.n	80008e8 <_malloc_r+0xa8>
 80008c8:	6822      	ldr	r2, [r4, #0]
 80008ca:	1b52      	subs	r2, r2, r5
 80008cc:	d420      	bmi.n	8000910 <_malloc_r+0xd0>
 80008ce:	2a0b      	cmp	r2, #11
 80008d0:	d917      	bls.n	8000902 <_malloc_r+0xc2>
 80008d2:	1961      	adds	r1, r4, r5
 80008d4:	42a3      	cmp	r3, r4
 80008d6:	6025      	str	r5, [r4, #0]
 80008d8:	bf18      	it	ne
 80008da:	6059      	strne	r1, [r3, #4]
 80008dc:	6863      	ldr	r3, [r4, #4]
 80008de:	bf08      	it	eq
 80008e0:	f8c8 1000 	streq.w	r1, [r8]
 80008e4:	5162      	str	r2, [r4, r5]
 80008e6:	604b      	str	r3, [r1, #4]
 80008e8:	4630      	mov	r0, r6
 80008ea:	f000 f82f 	bl	800094c <__malloc_unlock>
 80008ee:	f104 000b 	add.w	r0, r4, #11
 80008f2:	1d23      	adds	r3, r4, #4
 80008f4:	f020 0007 	bic.w	r0, r0, #7
 80008f8:	1ac2      	subs	r2, r0, r3
 80008fa:	bf1c      	itt	ne
 80008fc:	1a1b      	subne	r3, r3, r0
 80008fe:	50a3      	strne	r3, [r4, r2]
 8000900:	e7af      	b.n	8000862 <_malloc_r+0x22>
 8000902:	6862      	ldr	r2, [r4, #4]
 8000904:	42a3      	cmp	r3, r4
 8000906:	bf0c      	ite	eq
 8000908:	f8c8 2000 	streq.w	r2, [r8]
 800090c:	605a      	strne	r2, [r3, #4]
 800090e:	e7eb      	b.n	80008e8 <_malloc_r+0xa8>
 8000910:	4623      	mov	r3, r4
 8000912:	6864      	ldr	r4, [r4, #4]
 8000914:	e7ae      	b.n	8000874 <_malloc_r+0x34>
 8000916:	463c      	mov	r4, r7
 8000918:	687f      	ldr	r7, [r7, #4]
 800091a:	e7b6      	b.n	800088a <_malloc_r+0x4a>
 800091c:	461a      	mov	r2, r3
 800091e:	685b      	ldr	r3, [r3, #4]
 8000920:	42a3      	cmp	r3, r4
 8000922:	d1fb      	bne.n	800091c <_malloc_r+0xdc>
 8000924:	2300      	movs	r3, #0
 8000926:	6053      	str	r3, [r2, #4]
 8000928:	e7de      	b.n	80008e8 <_malloc_r+0xa8>
 800092a:	230c      	movs	r3, #12
 800092c:	6033      	str	r3, [r6, #0]
 800092e:	4630      	mov	r0, r6
 8000930:	f000 f80c 	bl	800094c <__malloc_unlock>
 8000934:	e794      	b.n	8000860 <_malloc_r+0x20>
 8000936:	6005      	str	r5, [r0, #0]
 8000938:	e7d6      	b.n	80008e8 <_malloc_r+0xa8>
 800093a:	bf00      	nop
 800093c:	200001bc 	.word	0x200001bc

08000940 <__malloc_lock>:
 8000940:	4801      	ldr	r0, [pc, #4]	@ (8000948 <__malloc_lock+0x8>)
 8000942:	f7ff bf0f 	b.w	8000764 <__retarget_lock_acquire_recursive>
 8000946:	bf00      	nop
 8000948:	200001b4 	.word	0x200001b4

0800094c <__malloc_unlock>:
 800094c:	4801      	ldr	r0, [pc, #4]	@ (8000954 <__malloc_unlock+0x8>)
 800094e:	f7ff bf0a 	b.w	8000766 <__retarget_lock_release_recursive>
 8000952:	bf00      	nop
 8000954:	200001b4 	.word	0x200001b4

08000958 <__ssputs_r>:
 8000958:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800095c:	688e      	ldr	r6, [r1, #8]
 800095e:	461f      	mov	r7, r3
 8000960:	42be      	cmp	r6, r7
 8000962:	680b      	ldr	r3, [r1, #0]
 8000964:	4682      	mov	sl, r0
 8000966:	460c      	mov	r4, r1
 8000968:	4690      	mov	r8, r2
 800096a:	d82d      	bhi.n	80009c8 <__ssputs_r+0x70>
 800096c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8000970:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8000974:	d026      	beq.n	80009c4 <__ssputs_r+0x6c>
 8000976:	6965      	ldr	r5, [r4, #20]
 8000978:	6909      	ldr	r1, [r1, #16]
 800097a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800097e:	eba3 0901 	sub.w	r9, r3, r1
 8000982:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8000986:	1c7b      	adds	r3, r7, #1
 8000988:	444b      	add	r3, r9
 800098a:	106d      	asrs	r5, r5, #1
 800098c:	429d      	cmp	r5, r3
 800098e:	bf38      	it	cc
 8000990:	461d      	movcc	r5, r3
 8000992:	0553      	lsls	r3, r2, #21
 8000994:	d527      	bpl.n	80009e6 <__ssputs_r+0x8e>
 8000996:	4629      	mov	r1, r5
 8000998:	f7ff ff52 	bl	8000840 <_malloc_r>
 800099c:	4606      	mov	r6, r0
 800099e:	b360      	cbz	r0, 80009fa <__ssputs_r+0xa2>
 80009a0:	6921      	ldr	r1, [r4, #16]
 80009a2:	464a      	mov	r2, r9
 80009a4:	f000 fae6 	bl	8000f74 <memcpy>
 80009a8:	89a3      	ldrh	r3, [r4, #12]
 80009aa:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80009ae:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80009b2:	81a3      	strh	r3, [r4, #12]
 80009b4:	6126      	str	r6, [r4, #16]
 80009b6:	6165      	str	r5, [r4, #20]
 80009b8:	444e      	add	r6, r9
 80009ba:	eba5 0509 	sub.w	r5, r5, r9
 80009be:	6026      	str	r6, [r4, #0]
 80009c0:	60a5      	str	r5, [r4, #8]
 80009c2:	463e      	mov	r6, r7
 80009c4:	42be      	cmp	r6, r7
 80009c6:	d900      	bls.n	80009ca <__ssputs_r+0x72>
 80009c8:	463e      	mov	r6, r7
 80009ca:	6820      	ldr	r0, [r4, #0]
 80009cc:	4632      	mov	r2, r6
 80009ce:	4641      	mov	r1, r8
 80009d0:	f000 faa6 	bl	8000f20 <memmove>
 80009d4:	68a3      	ldr	r3, [r4, #8]
 80009d6:	1b9b      	subs	r3, r3, r6
 80009d8:	60a3      	str	r3, [r4, #8]
 80009da:	6823      	ldr	r3, [r4, #0]
 80009dc:	4433      	add	r3, r6
 80009de:	6023      	str	r3, [r4, #0]
 80009e0:	2000      	movs	r0, #0
 80009e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80009e6:	462a      	mov	r2, r5
 80009e8:	f000 fad2 	bl	8000f90 <_realloc_r>
 80009ec:	4606      	mov	r6, r0
 80009ee:	2800      	cmp	r0, #0
 80009f0:	d1e0      	bne.n	80009b4 <__ssputs_r+0x5c>
 80009f2:	6921      	ldr	r1, [r4, #16]
 80009f4:	4650      	mov	r0, sl
 80009f6:	f7ff feb7 	bl	8000768 <_free_r>
 80009fa:	230c      	movs	r3, #12
 80009fc:	f8ca 3000 	str.w	r3, [sl]
 8000a00:	89a3      	ldrh	r3, [r4, #12]
 8000a02:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000a06:	81a3      	strh	r3, [r4, #12]
 8000a08:	f04f 30ff 	mov.w	r0, #4294967295
 8000a0c:	e7e9      	b.n	80009e2 <__ssputs_r+0x8a>
	...

08000a10 <_svfiprintf_r>:
 8000a10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000a14:	4698      	mov	r8, r3
 8000a16:	898b      	ldrh	r3, [r1, #12]
 8000a18:	061b      	lsls	r3, r3, #24
 8000a1a:	b09d      	sub	sp, #116	@ 0x74
 8000a1c:	4607      	mov	r7, r0
 8000a1e:	460d      	mov	r5, r1
 8000a20:	4614      	mov	r4, r2
 8000a22:	d510      	bpl.n	8000a46 <_svfiprintf_r+0x36>
 8000a24:	690b      	ldr	r3, [r1, #16]
 8000a26:	b973      	cbnz	r3, 8000a46 <_svfiprintf_r+0x36>
 8000a28:	2140      	movs	r1, #64	@ 0x40
 8000a2a:	f7ff ff09 	bl	8000840 <_malloc_r>
 8000a2e:	6028      	str	r0, [r5, #0]
 8000a30:	6128      	str	r0, [r5, #16]
 8000a32:	b930      	cbnz	r0, 8000a42 <_svfiprintf_r+0x32>
 8000a34:	230c      	movs	r3, #12
 8000a36:	603b      	str	r3, [r7, #0]
 8000a38:	f04f 30ff 	mov.w	r0, #4294967295
 8000a3c:	b01d      	add	sp, #116	@ 0x74
 8000a3e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000a42:	2340      	movs	r3, #64	@ 0x40
 8000a44:	616b      	str	r3, [r5, #20]
 8000a46:	2300      	movs	r3, #0
 8000a48:	9309      	str	r3, [sp, #36]	@ 0x24
 8000a4a:	2320      	movs	r3, #32
 8000a4c:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8000a50:	f8cd 800c 	str.w	r8, [sp, #12]
 8000a54:	2330      	movs	r3, #48	@ 0x30
 8000a56:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8000bf4 <_svfiprintf_r+0x1e4>
 8000a5a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8000a5e:	f04f 0901 	mov.w	r9, #1
 8000a62:	4623      	mov	r3, r4
 8000a64:	469a      	mov	sl, r3
 8000a66:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000a6a:	b10a      	cbz	r2, 8000a70 <_svfiprintf_r+0x60>
 8000a6c:	2a25      	cmp	r2, #37	@ 0x25
 8000a6e:	d1f9      	bne.n	8000a64 <_svfiprintf_r+0x54>
 8000a70:	ebba 0b04 	subs.w	fp, sl, r4
 8000a74:	d00b      	beq.n	8000a8e <_svfiprintf_r+0x7e>
 8000a76:	465b      	mov	r3, fp
 8000a78:	4622      	mov	r2, r4
 8000a7a:	4629      	mov	r1, r5
 8000a7c:	4638      	mov	r0, r7
 8000a7e:	f7ff ff6b 	bl	8000958 <__ssputs_r>
 8000a82:	3001      	adds	r0, #1
 8000a84:	f000 80a7 	beq.w	8000bd6 <_svfiprintf_r+0x1c6>
 8000a88:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8000a8a:	445a      	add	r2, fp
 8000a8c:	9209      	str	r2, [sp, #36]	@ 0x24
 8000a8e:	f89a 3000 	ldrb.w	r3, [sl]
 8000a92:	2b00      	cmp	r3, #0
 8000a94:	f000 809f 	beq.w	8000bd6 <_svfiprintf_r+0x1c6>
 8000a98:	2300      	movs	r3, #0
 8000a9a:	f04f 32ff 	mov.w	r2, #4294967295
 8000a9e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8000aa2:	f10a 0a01 	add.w	sl, sl, #1
 8000aa6:	9304      	str	r3, [sp, #16]
 8000aa8:	9307      	str	r3, [sp, #28]
 8000aaa:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8000aae:	931a      	str	r3, [sp, #104]	@ 0x68
 8000ab0:	4654      	mov	r4, sl
 8000ab2:	2205      	movs	r2, #5
 8000ab4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8000ab8:	484e      	ldr	r0, [pc, #312]	@ (8000bf4 <_svfiprintf_r+0x1e4>)
 8000aba:	f7ff fba9 	bl	8000210 <memchr>
 8000abe:	9a04      	ldr	r2, [sp, #16]
 8000ac0:	b9d8      	cbnz	r0, 8000afa <_svfiprintf_r+0xea>
 8000ac2:	06d0      	lsls	r0, r2, #27
 8000ac4:	bf44      	itt	mi
 8000ac6:	2320      	movmi	r3, #32
 8000ac8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8000acc:	0711      	lsls	r1, r2, #28
 8000ace:	bf44      	itt	mi
 8000ad0:	232b      	movmi	r3, #43	@ 0x2b
 8000ad2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8000ad6:	f89a 3000 	ldrb.w	r3, [sl]
 8000ada:	2b2a      	cmp	r3, #42	@ 0x2a
 8000adc:	d015      	beq.n	8000b0a <_svfiprintf_r+0xfa>
 8000ade:	9a07      	ldr	r2, [sp, #28]
 8000ae0:	4654      	mov	r4, sl
 8000ae2:	2000      	movs	r0, #0
 8000ae4:	f04f 0c0a 	mov.w	ip, #10
 8000ae8:	4621      	mov	r1, r4
 8000aea:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000aee:	3b30      	subs	r3, #48	@ 0x30
 8000af0:	2b09      	cmp	r3, #9
 8000af2:	d94b      	bls.n	8000b8c <_svfiprintf_r+0x17c>
 8000af4:	b1b0      	cbz	r0, 8000b24 <_svfiprintf_r+0x114>
 8000af6:	9207      	str	r2, [sp, #28]
 8000af8:	e014      	b.n	8000b24 <_svfiprintf_r+0x114>
 8000afa:	eba0 0308 	sub.w	r3, r0, r8
 8000afe:	fa09 f303 	lsl.w	r3, r9, r3
 8000b02:	4313      	orrs	r3, r2
 8000b04:	9304      	str	r3, [sp, #16]
 8000b06:	46a2      	mov	sl, r4
 8000b08:	e7d2      	b.n	8000ab0 <_svfiprintf_r+0xa0>
 8000b0a:	9b03      	ldr	r3, [sp, #12]
 8000b0c:	1d19      	adds	r1, r3, #4
 8000b0e:	681b      	ldr	r3, [r3, #0]
 8000b10:	9103      	str	r1, [sp, #12]
 8000b12:	2b00      	cmp	r3, #0
 8000b14:	bfbb      	ittet	lt
 8000b16:	425b      	neglt	r3, r3
 8000b18:	f042 0202 	orrlt.w	r2, r2, #2
 8000b1c:	9307      	strge	r3, [sp, #28]
 8000b1e:	9307      	strlt	r3, [sp, #28]
 8000b20:	bfb8      	it	lt
 8000b22:	9204      	strlt	r2, [sp, #16]
 8000b24:	7823      	ldrb	r3, [r4, #0]
 8000b26:	2b2e      	cmp	r3, #46	@ 0x2e
 8000b28:	d10a      	bne.n	8000b40 <_svfiprintf_r+0x130>
 8000b2a:	7863      	ldrb	r3, [r4, #1]
 8000b2c:	2b2a      	cmp	r3, #42	@ 0x2a
 8000b2e:	d132      	bne.n	8000b96 <_svfiprintf_r+0x186>
 8000b30:	9b03      	ldr	r3, [sp, #12]
 8000b32:	1d1a      	adds	r2, r3, #4
 8000b34:	681b      	ldr	r3, [r3, #0]
 8000b36:	9203      	str	r2, [sp, #12]
 8000b38:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8000b3c:	3402      	adds	r4, #2
 8000b3e:	9305      	str	r3, [sp, #20]
 8000b40:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8000c04 <_svfiprintf_r+0x1f4>
 8000b44:	7821      	ldrb	r1, [r4, #0]
 8000b46:	2203      	movs	r2, #3
 8000b48:	4650      	mov	r0, sl
 8000b4a:	f7ff fb61 	bl	8000210 <memchr>
 8000b4e:	b138      	cbz	r0, 8000b60 <_svfiprintf_r+0x150>
 8000b50:	9b04      	ldr	r3, [sp, #16]
 8000b52:	eba0 000a 	sub.w	r0, r0, sl
 8000b56:	2240      	movs	r2, #64	@ 0x40
 8000b58:	4082      	lsls	r2, r0
 8000b5a:	4313      	orrs	r3, r2
 8000b5c:	3401      	adds	r4, #1
 8000b5e:	9304      	str	r3, [sp, #16]
 8000b60:	f814 1b01 	ldrb.w	r1, [r4], #1
 8000b64:	4824      	ldr	r0, [pc, #144]	@ (8000bf8 <_svfiprintf_r+0x1e8>)
 8000b66:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8000b6a:	2206      	movs	r2, #6
 8000b6c:	f7ff fb50 	bl	8000210 <memchr>
 8000b70:	2800      	cmp	r0, #0
 8000b72:	d036      	beq.n	8000be2 <_svfiprintf_r+0x1d2>
 8000b74:	4b21      	ldr	r3, [pc, #132]	@ (8000bfc <_svfiprintf_r+0x1ec>)
 8000b76:	bb1b      	cbnz	r3, 8000bc0 <_svfiprintf_r+0x1b0>
 8000b78:	9b03      	ldr	r3, [sp, #12]
 8000b7a:	3307      	adds	r3, #7
 8000b7c:	f023 0307 	bic.w	r3, r3, #7
 8000b80:	3308      	adds	r3, #8
 8000b82:	9303      	str	r3, [sp, #12]
 8000b84:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8000b86:	4433      	add	r3, r6
 8000b88:	9309      	str	r3, [sp, #36]	@ 0x24
 8000b8a:	e76a      	b.n	8000a62 <_svfiprintf_r+0x52>
 8000b8c:	fb0c 3202 	mla	r2, ip, r2, r3
 8000b90:	460c      	mov	r4, r1
 8000b92:	2001      	movs	r0, #1
 8000b94:	e7a8      	b.n	8000ae8 <_svfiprintf_r+0xd8>
 8000b96:	2300      	movs	r3, #0
 8000b98:	3401      	adds	r4, #1
 8000b9a:	9305      	str	r3, [sp, #20]
 8000b9c:	4619      	mov	r1, r3
 8000b9e:	f04f 0c0a 	mov.w	ip, #10
 8000ba2:	4620      	mov	r0, r4
 8000ba4:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000ba8:	3a30      	subs	r2, #48	@ 0x30
 8000baa:	2a09      	cmp	r2, #9
 8000bac:	d903      	bls.n	8000bb6 <_svfiprintf_r+0x1a6>
 8000bae:	2b00      	cmp	r3, #0
 8000bb0:	d0c6      	beq.n	8000b40 <_svfiprintf_r+0x130>
 8000bb2:	9105      	str	r1, [sp, #20]
 8000bb4:	e7c4      	b.n	8000b40 <_svfiprintf_r+0x130>
 8000bb6:	fb0c 2101 	mla	r1, ip, r1, r2
 8000bba:	4604      	mov	r4, r0
 8000bbc:	2301      	movs	r3, #1
 8000bbe:	e7f0      	b.n	8000ba2 <_svfiprintf_r+0x192>
 8000bc0:	ab03      	add	r3, sp, #12
 8000bc2:	9300      	str	r3, [sp, #0]
 8000bc4:	462a      	mov	r2, r5
 8000bc6:	4b0e      	ldr	r3, [pc, #56]	@ (8000c00 <_svfiprintf_r+0x1f0>)
 8000bc8:	a904      	add	r1, sp, #16
 8000bca:	4638      	mov	r0, r7
 8000bcc:	f3af 8000 	nop.w
 8000bd0:	1c42      	adds	r2, r0, #1
 8000bd2:	4606      	mov	r6, r0
 8000bd4:	d1d6      	bne.n	8000b84 <_svfiprintf_r+0x174>
 8000bd6:	89ab      	ldrh	r3, [r5, #12]
 8000bd8:	065b      	lsls	r3, r3, #25
 8000bda:	f53f af2d 	bmi.w	8000a38 <_svfiprintf_r+0x28>
 8000bde:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8000be0:	e72c      	b.n	8000a3c <_svfiprintf_r+0x2c>
 8000be2:	ab03      	add	r3, sp, #12
 8000be4:	9300      	str	r3, [sp, #0]
 8000be6:	462a      	mov	r2, r5
 8000be8:	4b05      	ldr	r3, [pc, #20]	@ (8000c00 <_svfiprintf_r+0x1f0>)
 8000bea:	a904      	add	r1, sp, #16
 8000bec:	4638      	mov	r0, r7
 8000bee:	f000 f879 	bl	8000ce4 <_printf_i>
 8000bf2:	e7ed      	b.n	8000bd0 <_svfiprintf_r+0x1c0>
 8000bf4:	0800103c 	.word	0x0800103c
 8000bf8:	08001046 	.word	0x08001046
 8000bfc:	00000000 	.word	0x00000000
 8000c00:	08000959 	.word	0x08000959
 8000c04:	08001042 	.word	0x08001042

08000c08 <_printf_common>:
 8000c08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c0c:	4616      	mov	r6, r2
 8000c0e:	4698      	mov	r8, r3
 8000c10:	688a      	ldr	r2, [r1, #8]
 8000c12:	690b      	ldr	r3, [r1, #16]
 8000c14:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8000c18:	4293      	cmp	r3, r2
 8000c1a:	bfb8      	it	lt
 8000c1c:	4613      	movlt	r3, r2
 8000c1e:	6033      	str	r3, [r6, #0]
 8000c20:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8000c24:	4607      	mov	r7, r0
 8000c26:	460c      	mov	r4, r1
 8000c28:	b10a      	cbz	r2, 8000c2e <_printf_common+0x26>
 8000c2a:	3301      	adds	r3, #1
 8000c2c:	6033      	str	r3, [r6, #0]
 8000c2e:	6823      	ldr	r3, [r4, #0]
 8000c30:	0699      	lsls	r1, r3, #26
 8000c32:	bf42      	ittt	mi
 8000c34:	6833      	ldrmi	r3, [r6, #0]
 8000c36:	3302      	addmi	r3, #2
 8000c38:	6033      	strmi	r3, [r6, #0]
 8000c3a:	6825      	ldr	r5, [r4, #0]
 8000c3c:	f015 0506 	ands.w	r5, r5, #6
 8000c40:	d106      	bne.n	8000c50 <_printf_common+0x48>
 8000c42:	f104 0a19 	add.w	sl, r4, #25
 8000c46:	68e3      	ldr	r3, [r4, #12]
 8000c48:	6832      	ldr	r2, [r6, #0]
 8000c4a:	1a9b      	subs	r3, r3, r2
 8000c4c:	42ab      	cmp	r3, r5
 8000c4e:	dc26      	bgt.n	8000c9e <_printf_common+0x96>
 8000c50:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8000c54:	6822      	ldr	r2, [r4, #0]
 8000c56:	3b00      	subs	r3, #0
 8000c58:	bf18      	it	ne
 8000c5a:	2301      	movne	r3, #1
 8000c5c:	0692      	lsls	r2, r2, #26
 8000c5e:	d42b      	bmi.n	8000cb8 <_printf_common+0xb0>
 8000c60:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8000c64:	4641      	mov	r1, r8
 8000c66:	4638      	mov	r0, r7
 8000c68:	47c8      	blx	r9
 8000c6a:	3001      	adds	r0, #1
 8000c6c:	d01e      	beq.n	8000cac <_printf_common+0xa4>
 8000c6e:	6823      	ldr	r3, [r4, #0]
 8000c70:	6922      	ldr	r2, [r4, #16]
 8000c72:	f003 0306 	and.w	r3, r3, #6
 8000c76:	2b04      	cmp	r3, #4
 8000c78:	bf02      	ittt	eq
 8000c7a:	68e5      	ldreq	r5, [r4, #12]
 8000c7c:	6833      	ldreq	r3, [r6, #0]
 8000c7e:	1aed      	subeq	r5, r5, r3
 8000c80:	68a3      	ldr	r3, [r4, #8]
 8000c82:	bf0c      	ite	eq
 8000c84:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8000c88:	2500      	movne	r5, #0
 8000c8a:	4293      	cmp	r3, r2
 8000c8c:	bfc4      	itt	gt
 8000c8e:	1a9b      	subgt	r3, r3, r2
 8000c90:	18ed      	addgt	r5, r5, r3
 8000c92:	2600      	movs	r6, #0
 8000c94:	341a      	adds	r4, #26
 8000c96:	42b5      	cmp	r5, r6
 8000c98:	d11a      	bne.n	8000cd0 <_printf_common+0xc8>
 8000c9a:	2000      	movs	r0, #0
 8000c9c:	e008      	b.n	8000cb0 <_printf_common+0xa8>
 8000c9e:	2301      	movs	r3, #1
 8000ca0:	4652      	mov	r2, sl
 8000ca2:	4641      	mov	r1, r8
 8000ca4:	4638      	mov	r0, r7
 8000ca6:	47c8      	blx	r9
 8000ca8:	3001      	adds	r0, #1
 8000caa:	d103      	bne.n	8000cb4 <_printf_common+0xac>
 8000cac:	f04f 30ff 	mov.w	r0, #4294967295
 8000cb0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cb4:	3501      	adds	r5, #1
 8000cb6:	e7c6      	b.n	8000c46 <_printf_common+0x3e>
 8000cb8:	18e1      	adds	r1, r4, r3
 8000cba:	1c5a      	adds	r2, r3, #1
 8000cbc:	2030      	movs	r0, #48	@ 0x30
 8000cbe:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8000cc2:	4422      	add	r2, r4
 8000cc4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8000cc8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8000ccc:	3302      	adds	r3, #2
 8000cce:	e7c7      	b.n	8000c60 <_printf_common+0x58>
 8000cd0:	2301      	movs	r3, #1
 8000cd2:	4622      	mov	r2, r4
 8000cd4:	4641      	mov	r1, r8
 8000cd6:	4638      	mov	r0, r7
 8000cd8:	47c8      	blx	r9
 8000cda:	3001      	adds	r0, #1
 8000cdc:	d0e6      	beq.n	8000cac <_printf_common+0xa4>
 8000cde:	3601      	adds	r6, #1
 8000ce0:	e7d9      	b.n	8000c96 <_printf_common+0x8e>
	...

08000ce4 <_printf_i>:
 8000ce4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8000ce8:	7e0f      	ldrb	r7, [r1, #24]
 8000cea:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8000cec:	2f78      	cmp	r7, #120	@ 0x78
 8000cee:	4691      	mov	r9, r2
 8000cf0:	4680      	mov	r8, r0
 8000cf2:	460c      	mov	r4, r1
 8000cf4:	469a      	mov	sl, r3
 8000cf6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8000cfa:	d807      	bhi.n	8000d0c <_printf_i+0x28>
 8000cfc:	2f62      	cmp	r7, #98	@ 0x62
 8000cfe:	d80a      	bhi.n	8000d16 <_printf_i+0x32>
 8000d00:	2f00      	cmp	r7, #0
 8000d02:	f000 80d1 	beq.w	8000ea8 <_printf_i+0x1c4>
 8000d06:	2f58      	cmp	r7, #88	@ 0x58
 8000d08:	f000 80b8 	beq.w	8000e7c <_printf_i+0x198>
 8000d0c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8000d10:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8000d14:	e03a      	b.n	8000d8c <_printf_i+0xa8>
 8000d16:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8000d1a:	2b15      	cmp	r3, #21
 8000d1c:	d8f6      	bhi.n	8000d0c <_printf_i+0x28>
 8000d1e:	a101      	add	r1, pc, #4	@ (adr r1, 8000d24 <_printf_i+0x40>)
 8000d20:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8000d24:	08000d7d 	.word	0x08000d7d
 8000d28:	08000d91 	.word	0x08000d91
 8000d2c:	08000d0d 	.word	0x08000d0d
 8000d30:	08000d0d 	.word	0x08000d0d
 8000d34:	08000d0d 	.word	0x08000d0d
 8000d38:	08000d0d 	.word	0x08000d0d
 8000d3c:	08000d91 	.word	0x08000d91
 8000d40:	08000d0d 	.word	0x08000d0d
 8000d44:	08000d0d 	.word	0x08000d0d
 8000d48:	08000d0d 	.word	0x08000d0d
 8000d4c:	08000d0d 	.word	0x08000d0d
 8000d50:	08000e8f 	.word	0x08000e8f
 8000d54:	08000dbb 	.word	0x08000dbb
 8000d58:	08000e49 	.word	0x08000e49
 8000d5c:	08000d0d 	.word	0x08000d0d
 8000d60:	08000d0d 	.word	0x08000d0d
 8000d64:	08000eb1 	.word	0x08000eb1
 8000d68:	08000d0d 	.word	0x08000d0d
 8000d6c:	08000dbb 	.word	0x08000dbb
 8000d70:	08000d0d 	.word	0x08000d0d
 8000d74:	08000d0d 	.word	0x08000d0d
 8000d78:	08000e51 	.word	0x08000e51
 8000d7c:	6833      	ldr	r3, [r6, #0]
 8000d7e:	1d1a      	adds	r2, r3, #4
 8000d80:	681b      	ldr	r3, [r3, #0]
 8000d82:	6032      	str	r2, [r6, #0]
 8000d84:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8000d88:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8000d8c:	2301      	movs	r3, #1
 8000d8e:	e09c      	b.n	8000eca <_printf_i+0x1e6>
 8000d90:	6833      	ldr	r3, [r6, #0]
 8000d92:	6820      	ldr	r0, [r4, #0]
 8000d94:	1d19      	adds	r1, r3, #4
 8000d96:	6031      	str	r1, [r6, #0]
 8000d98:	0606      	lsls	r6, r0, #24
 8000d9a:	d501      	bpl.n	8000da0 <_printf_i+0xbc>
 8000d9c:	681d      	ldr	r5, [r3, #0]
 8000d9e:	e003      	b.n	8000da8 <_printf_i+0xc4>
 8000da0:	0645      	lsls	r5, r0, #25
 8000da2:	d5fb      	bpl.n	8000d9c <_printf_i+0xb8>
 8000da4:	f9b3 5000 	ldrsh.w	r5, [r3]
 8000da8:	2d00      	cmp	r5, #0
 8000daa:	da03      	bge.n	8000db4 <_printf_i+0xd0>
 8000dac:	232d      	movs	r3, #45	@ 0x2d
 8000dae:	426d      	negs	r5, r5
 8000db0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8000db4:	4858      	ldr	r0, [pc, #352]	@ (8000f18 <_printf_i+0x234>)
 8000db6:	230a      	movs	r3, #10
 8000db8:	e011      	b.n	8000dde <_printf_i+0xfa>
 8000dba:	6821      	ldr	r1, [r4, #0]
 8000dbc:	6833      	ldr	r3, [r6, #0]
 8000dbe:	0608      	lsls	r0, r1, #24
 8000dc0:	f853 5b04 	ldr.w	r5, [r3], #4
 8000dc4:	d402      	bmi.n	8000dcc <_printf_i+0xe8>
 8000dc6:	0649      	lsls	r1, r1, #25
 8000dc8:	bf48      	it	mi
 8000dca:	b2ad      	uxthmi	r5, r5
 8000dcc:	2f6f      	cmp	r7, #111	@ 0x6f
 8000dce:	4852      	ldr	r0, [pc, #328]	@ (8000f18 <_printf_i+0x234>)
 8000dd0:	6033      	str	r3, [r6, #0]
 8000dd2:	bf14      	ite	ne
 8000dd4:	230a      	movne	r3, #10
 8000dd6:	2308      	moveq	r3, #8
 8000dd8:	2100      	movs	r1, #0
 8000dda:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8000dde:	6866      	ldr	r6, [r4, #4]
 8000de0:	60a6      	str	r6, [r4, #8]
 8000de2:	2e00      	cmp	r6, #0
 8000de4:	db05      	blt.n	8000df2 <_printf_i+0x10e>
 8000de6:	6821      	ldr	r1, [r4, #0]
 8000de8:	432e      	orrs	r6, r5
 8000dea:	f021 0104 	bic.w	r1, r1, #4
 8000dee:	6021      	str	r1, [r4, #0]
 8000df0:	d04b      	beq.n	8000e8a <_printf_i+0x1a6>
 8000df2:	4616      	mov	r6, r2
 8000df4:	fbb5 f1f3 	udiv	r1, r5, r3
 8000df8:	fb03 5711 	mls	r7, r3, r1, r5
 8000dfc:	5dc7      	ldrb	r7, [r0, r7]
 8000dfe:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8000e02:	462f      	mov	r7, r5
 8000e04:	42bb      	cmp	r3, r7
 8000e06:	460d      	mov	r5, r1
 8000e08:	d9f4      	bls.n	8000df4 <_printf_i+0x110>
 8000e0a:	2b08      	cmp	r3, #8
 8000e0c:	d10b      	bne.n	8000e26 <_printf_i+0x142>
 8000e0e:	6823      	ldr	r3, [r4, #0]
 8000e10:	07df      	lsls	r7, r3, #31
 8000e12:	d508      	bpl.n	8000e26 <_printf_i+0x142>
 8000e14:	6923      	ldr	r3, [r4, #16]
 8000e16:	6861      	ldr	r1, [r4, #4]
 8000e18:	4299      	cmp	r1, r3
 8000e1a:	bfde      	ittt	le
 8000e1c:	2330      	movle	r3, #48	@ 0x30
 8000e1e:	f806 3c01 	strble.w	r3, [r6, #-1]
 8000e22:	f106 36ff 	addle.w	r6, r6, #4294967295
 8000e26:	1b92      	subs	r2, r2, r6
 8000e28:	6122      	str	r2, [r4, #16]
 8000e2a:	f8cd a000 	str.w	sl, [sp]
 8000e2e:	464b      	mov	r3, r9
 8000e30:	aa03      	add	r2, sp, #12
 8000e32:	4621      	mov	r1, r4
 8000e34:	4640      	mov	r0, r8
 8000e36:	f7ff fee7 	bl	8000c08 <_printf_common>
 8000e3a:	3001      	adds	r0, #1
 8000e3c:	d14a      	bne.n	8000ed4 <_printf_i+0x1f0>
 8000e3e:	f04f 30ff 	mov.w	r0, #4294967295
 8000e42:	b004      	add	sp, #16
 8000e44:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e48:	6823      	ldr	r3, [r4, #0]
 8000e4a:	f043 0320 	orr.w	r3, r3, #32
 8000e4e:	6023      	str	r3, [r4, #0]
 8000e50:	4832      	ldr	r0, [pc, #200]	@ (8000f1c <_printf_i+0x238>)
 8000e52:	2778      	movs	r7, #120	@ 0x78
 8000e54:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8000e58:	6823      	ldr	r3, [r4, #0]
 8000e5a:	6831      	ldr	r1, [r6, #0]
 8000e5c:	061f      	lsls	r7, r3, #24
 8000e5e:	f851 5b04 	ldr.w	r5, [r1], #4
 8000e62:	d402      	bmi.n	8000e6a <_printf_i+0x186>
 8000e64:	065f      	lsls	r7, r3, #25
 8000e66:	bf48      	it	mi
 8000e68:	b2ad      	uxthmi	r5, r5
 8000e6a:	6031      	str	r1, [r6, #0]
 8000e6c:	07d9      	lsls	r1, r3, #31
 8000e6e:	bf44      	itt	mi
 8000e70:	f043 0320 	orrmi.w	r3, r3, #32
 8000e74:	6023      	strmi	r3, [r4, #0]
 8000e76:	b11d      	cbz	r5, 8000e80 <_printf_i+0x19c>
 8000e78:	2310      	movs	r3, #16
 8000e7a:	e7ad      	b.n	8000dd8 <_printf_i+0xf4>
 8000e7c:	4826      	ldr	r0, [pc, #152]	@ (8000f18 <_printf_i+0x234>)
 8000e7e:	e7e9      	b.n	8000e54 <_printf_i+0x170>
 8000e80:	6823      	ldr	r3, [r4, #0]
 8000e82:	f023 0320 	bic.w	r3, r3, #32
 8000e86:	6023      	str	r3, [r4, #0]
 8000e88:	e7f6      	b.n	8000e78 <_printf_i+0x194>
 8000e8a:	4616      	mov	r6, r2
 8000e8c:	e7bd      	b.n	8000e0a <_printf_i+0x126>
 8000e8e:	6833      	ldr	r3, [r6, #0]
 8000e90:	6825      	ldr	r5, [r4, #0]
 8000e92:	6961      	ldr	r1, [r4, #20]
 8000e94:	1d18      	adds	r0, r3, #4
 8000e96:	6030      	str	r0, [r6, #0]
 8000e98:	062e      	lsls	r6, r5, #24
 8000e9a:	681b      	ldr	r3, [r3, #0]
 8000e9c:	d501      	bpl.n	8000ea2 <_printf_i+0x1be>
 8000e9e:	6019      	str	r1, [r3, #0]
 8000ea0:	e002      	b.n	8000ea8 <_printf_i+0x1c4>
 8000ea2:	0668      	lsls	r0, r5, #25
 8000ea4:	d5fb      	bpl.n	8000e9e <_printf_i+0x1ba>
 8000ea6:	8019      	strh	r1, [r3, #0]
 8000ea8:	2300      	movs	r3, #0
 8000eaa:	6123      	str	r3, [r4, #16]
 8000eac:	4616      	mov	r6, r2
 8000eae:	e7bc      	b.n	8000e2a <_printf_i+0x146>
 8000eb0:	6833      	ldr	r3, [r6, #0]
 8000eb2:	1d1a      	adds	r2, r3, #4
 8000eb4:	6032      	str	r2, [r6, #0]
 8000eb6:	681e      	ldr	r6, [r3, #0]
 8000eb8:	6862      	ldr	r2, [r4, #4]
 8000eba:	2100      	movs	r1, #0
 8000ebc:	4630      	mov	r0, r6
 8000ebe:	f7ff f9a7 	bl	8000210 <memchr>
 8000ec2:	b108      	cbz	r0, 8000ec8 <_printf_i+0x1e4>
 8000ec4:	1b80      	subs	r0, r0, r6
 8000ec6:	6060      	str	r0, [r4, #4]
 8000ec8:	6863      	ldr	r3, [r4, #4]
 8000eca:	6123      	str	r3, [r4, #16]
 8000ecc:	2300      	movs	r3, #0
 8000ece:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8000ed2:	e7aa      	b.n	8000e2a <_printf_i+0x146>
 8000ed4:	6923      	ldr	r3, [r4, #16]
 8000ed6:	4632      	mov	r2, r6
 8000ed8:	4649      	mov	r1, r9
 8000eda:	4640      	mov	r0, r8
 8000edc:	47d0      	blx	sl
 8000ede:	3001      	adds	r0, #1
 8000ee0:	d0ad      	beq.n	8000e3e <_printf_i+0x15a>
 8000ee2:	6823      	ldr	r3, [r4, #0]
 8000ee4:	079b      	lsls	r3, r3, #30
 8000ee6:	d413      	bmi.n	8000f10 <_printf_i+0x22c>
 8000ee8:	68e0      	ldr	r0, [r4, #12]
 8000eea:	9b03      	ldr	r3, [sp, #12]
 8000eec:	4298      	cmp	r0, r3
 8000eee:	bfb8      	it	lt
 8000ef0:	4618      	movlt	r0, r3
 8000ef2:	e7a6      	b.n	8000e42 <_printf_i+0x15e>
 8000ef4:	2301      	movs	r3, #1
 8000ef6:	4632      	mov	r2, r6
 8000ef8:	4649      	mov	r1, r9
 8000efa:	4640      	mov	r0, r8
 8000efc:	47d0      	blx	sl
 8000efe:	3001      	adds	r0, #1
 8000f00:	d09d      	beq.n	8000e3e <_printf_i+0x15a>
 8000f02:	3501      	adds	r5, #1
 8000f04:	68e3      	ldr	r3, [r4, #12]
 8000f06:	9903      	ldr	r1, [sp, #12]
 8000f08:	1a5b      	subs	r3, r3, r1
 8000f0a:	42ab      	cmp	r3, r5
 8000f0c:	dcf2      	bgt.n	8000ef4 <_printf_i+0x210>
 8000f0e:	e7eb      	b.n	8000ee8 <_printf_i+0x204>
 8000f10:	2500      	movs	r5, #0
 8000f12:	f104 0619 	add.w	r6, r4, #25
 8000f16:	e7f5      	b.n	8000f04 <_printf_i+0x220>
 8000f18:	0800104d 	.word	0x0800104d
 8000f1c:	0800105e 	.word	0x0800105e

08000f20 <memmove>:
 8000f20:	4288      	cmp	r0, r1
 8000f22:	b510      	push	{r4, lr}
 8000f24:	eb01 0402 	add.w	r4, r1, r2
 8000f28:	d902      	bls.n	8000f30 <memmove+0x10>
 8000f2a:	4284      	cmp	r4, r0
 8000f2c:	4623      	mov	r3, r4
 8000f2e:	d807      	bhi.n	8000f40 <memmove+0x20>
 8000f30:	1e43      	subs	r3, r0, #1
 8000f32:	42a1      	cmp	r1, r4
 8000f34:	d008      	beq.n	8000f48 <memmove+0x28>
 8000f36:	f811 2b01 	ldrb.w	r2, [r1], #1
 8000f3a:	f803 2f01 	strb.w	r2, [r3, #1]!
 8000f3e:	e7f8      	b.n	8000f32 <memmove+0x12>
 8000f40:	4402      	add	r2, r0
 8000f42:	4601      	mov	r1, r0
 8000f44:	428a      	cmp	r2, r1
 8000f46:	d100      	bne.n	8000f4a <memmove+0x2a>
 8000f48:	bd10      	pop	{r4, pc}
 8000f4a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8000f4e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8000f52:	e7f7      	b.n	8000f44 <memmove+0x24>

08000f54 <_sbrk_r>:
 8000f54:	b538      	push	{r3, r4, r5, lr}
 8000f56:	4d06      	ldr	r5, [pc, #24]	@ (8000f70 <_sbrk_r+0x1c>)
 8000f58:	2300      	movs	r3, #0
 8000f5a:	4604      	mov	r4, r0
 8000f5c:	4608      	mov	r0, r1
 8000f5e:	602b      	str	r3, [r5, #0]
 8000f60:	f7ff fb2e 	bl	80005c0 <_sbrk>
 8000f64:	1c43      	adds	r3, r0, #1
 8000f66:	d102      	bne.n	8000f6e <_sbrk_r+0x1a>
 8000f68:	682b      	ldr	r3, [r5, #0]
 8000f6a:	b103      	cbz	r3, 8000f6e <_sbrk_r+0x1a>
 8000f6c:	6023      	str	r3, [r4, #0]
 8000f6e:	bd38      	pop	{r3, r4, r5, pc}
 8000f70:	200001b0 	.word	0x200001b0

08000f74 <memcpy>:
 8000f74:	440a      	add	r2, r1
 8000f76:	4291      	cmp	r1, r2
 8000f78:	f100 33ff 	add.w	r3, r0, #4294967295
 8000f7c:	d100      	bne.n	8000f80 <memcpy+0xc>
 8000f7e:	4770      	bx	lr
 8000f80:	b510      	push	{r4, lr}
 8000f82:	f811 4b01 	ldrb.w	r4, [r1], #1
 8000f86:	f803 4f01 	strb.w	r4, [r3, #1]!
 8000f8a:	4291      	cmp	r1, r2
 8000f8c:	d1f9      	bne.n	8000f82 <memcpy+0xe>
 8000f8e:	bd10      	pop	{r4, pc}

08000f90 <_realloc_r>:
 8000f90:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000f94:	4607      	mov	r7, r0
 8000f96:	4614      	mov	r4, r2
 8000f98:	460d      	mov	r5, r1
 8000f9a:	b921      	cbnz	r1, 8000fa6 <_realloc_r+0x16>
 8000f9c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8000fa0:	4611      	mov	r1, r2
 8000fa2:	f7ff bc4d 	b.w	8000840 <_malloc_r>
 8000fa6:	b92a      	cbnz	r2, 8000fb4 <_realloc_r+0x24>
 8000fa8:	f7ff fbde 	bl	8000768 <_free_r>
 8000fac:	4625      	mov	r5, r4
 8000fae:	4628      	mov	r0, r5
 8000fb0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8000fb4:	f000 f81a 	bl	8000fec <_malloc_usable_size_r>
 8000fb8:	4284      	cmp	r4, r0
 8000fba:	4606      	mov	r6, r0
 8000fbc:	d802      	bhi.n	8000fc4 <_realloc_r+0x34>
 8000fbe:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8000fc2:	d8f4      	bhi.n	8000fae <_realloc_r+0x1e>
 8000fc4:	4621      	mov	r1, r4
 8000fc6:	4638      	mov	r0, r7
 8000fc8:	f7ff fc3a 	bl	8000840 <_malloc_r>
 8000fcc:	4680      	mov	r8, r0
 8000fce:	b908      	cbnz	r0, 8000fd4 <_realloc_r+0x44>
 8000fd0:	4645      	mov	r5, r8
 8000fd2:	e7ec      	b.n	8000fae <_realloc_r+0x1e>
 8000fd4:	42b4      	cmp	r4, r6
 8000fd6:	4622      	mov	r2, r4
 8000fd8:	4629      	mov	r1, r5
 8000fda:	bf28      	it	cs
 8000fdc:	4632      	movcs	r2, r6
 8000fde:	f7ff ffc9 	bl	8000f74 <memcpy>
 8000fe2:	4629      	mov	r1, r5
 8000fe4:	4638      	mov	r0, r7
 8000fe6:	f7ff fbbf 	bl	8000768 <_free_r>
 8000fea:	e7f1      	b.n	8000fd0 <_realloc_r+0x40>

08000fec <_malloc_usable_size_r>:
 8000fec:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8000ff0:	1f18      	subs	r0, r3, #4
 8000ff2:	2b00      	cmp	r3, #0
 8000ff4:	bfbc      	itt	lt
 8000ff6:	580b      	ldrlt	r3, [r1, r0]
 8000ff8:	18c0      	addlt	r0, r0, r3
 8000ffa:	4770      	bx	lr

08000ffc <_init>:
 8000ffc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000ffe:	bf00      	nop
 8001000:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001002:	bc08      	pop	{r3}
 8001004:	469e      	mov	lr, r3
 8001006:	4770      	bx	lr

08001008 <_fini>:
 8001008:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800100a:	bf00      	nop
 800100c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800100e:	bc08      	pop	{r3}
 8001010:	469e      	mov	lr, r3
 8001012:	4770      	bx	lr
