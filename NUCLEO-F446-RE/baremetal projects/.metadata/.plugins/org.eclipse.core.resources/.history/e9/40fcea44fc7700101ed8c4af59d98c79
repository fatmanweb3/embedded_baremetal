#include "stm32f446xx.h"
#include "stdint.h"

void I2C1_Init(void) {
    // Enable clocks
    RCC->APB1ENR |= RCC_APB1ENR_I2C1EN; // I2C1 clock
    RCC->AHB1ENR |= RCC_AHB1ENR_GPIOBEN; // GPIOB clock

    // Configure PB8 (SCL) and PB9 (SDA) for I2C1 (AF4)
    GPIOB->MODER &= ~(GPIO_MODER_MODER8 | GPIO_MODER_MODER9);
    GPIOB->MODER |= (GPIO_MODER_MODER8_1 | GPIO_MODER_MODER9_1); // Alternate function
    GPIOB->OTYPER |= (GPIO_OTYPER_OT8 | GPIO_OTYPER_OT9); // Open-drain
    GPIOB->PUPDR &= ~(GPIO_PUPDR_PUPD8 | GPIO_PUPDR_PUPD9);
    GPIOB->PUPDR |= (GPIO_PUPDR_PUPD8_0 | GPIO_PUPDR_PUPD9_0); // Pull-ups
    GPIOB->AFR[1] &= ~(GPIO_AFRH_AFSEL8 | GPIO_AFRH_AFSEL9);
    GPIOB->AFR[1] |= (0x4 << GPIO_AFRH_AFSEL8_Pos) | (0x4 << GPIO_AFRH_AFSEL9_Pos); // AF4

    // Reset I2C1
    I2C1->CR1 |= I2C_CR1_SWRST;
    I2C1->CR1 &= ~I2C_CR1_SWRST;

    // Configure I2C1 for 100 kHz with 16 MHz APB1 clock
    I2C1->CR2 |= (16 << I2C_CR2_FREQ_Pos);
    I2C1->CCR &= ~I2C_CCR_FS; // Standard mode
    I2C1->CCR |= (80 << I2C_CCR_CCR_Pos); // CCR = 80
    I2C1->TRISE = 17; // TRISE = 17

    // Enable I2C1
    I2C1->CR1 |= I2C_CR1_PE;
}

void UART2_Init(void) {
    RCC->APB1ENR |= RCC_APB1ENR_USART2EN;
    RCC->AHB1ENR |= RCC_AHB1ENR_GPIOAEN;

    GPIOA->MODER &= ~(GPIO_MODER_MODER2 | GPIO_MODER_MODER3);
    GPIOA->MODER |= (GPIO_MODER_MODER2_1 | GPIO_MODER_MODER3_1);
    GPIOA->AFR[0] &= ~(GPIO_AFRL_AFSEL2 | GPIO_AFRL_AFSEL3);
    GPIOA->AFR[0] |= (0x7 << GPIO_AFRL_AFSEL2_Pos) | (0x7 << GPIO_AFRL_AFSEL3_Pos);

    USART2->BRR = 16000000 / 115200;
    USART2->CR1 |= USART_CR1_TE | USART_CR1_RE | USART_CR1_UE;
}

void UART2_Transmit(char *str) {
    while (*str) {
        while (!(USART2->SR & USART_SR_TXE));
        USART2->DR = *str++;
    }
}

int I2C1_SendByte(uint8_t slaveAddr, uint8_t data) {
    uint32_t timeout = 1000000;
    while (I2C1->SR2 & I2C_SR2_BUSY && timeout--) {
        if (timeout == 0) return -2; // Timeout
    }

    I2C1->CR1 |= I2C_CR1_START;
    while (!(I2C1->SR1 & I2C_SR1_SB));

    I2C1->DR = (slaveAddr << 1);
    while (!(I2C1->SR1 & I2C_SR1_ADDR));
    (void)I2C1->SR1; (void)I2C1->SR2;

    I2C1->DR = data;
    while (!(I2C1->SR1 & I2C_SR1_TXE));

    I2C1->CR1 |= I2C_CR1_STOP;
    while (I2C1->SR2 & I2C_SR2_MSL);

    if (I2C1->SR1 & I2C_SR1_AF) {
        I2C1->SR1 &= ~I2C_SR1_AF;
        return -1;
    }
    return 0;
}

void I2C1_ScanBus(void) {
    char buf[32];
    for (uint8_t addr = 0; addr <= 127; addr++) {
        UART2_Transmit("Testing address: ");
        buf[0] = '0'; buf[1] = 'x';
        buf[2] = (addr >> 4) > 9 ? (addr >> 4) + 'A' - 10 : (addr >> 4) + '0';
        buf[3] = (addr & 0xF) > 9 ? (addr & 0xF) + 'A' - 10 : (addr & 0xF) + '0';
        buf[4] = '\n'; buf[5] = '\0';
        UART2_Transmit(buf);
        if (I2C1_SendByte(addr, 0x00) == 0) {
            UART2_Transmit("Device found at: ");
            UART2_Transmit(buf);
        }
    }
}

int main(void) {
    RCC->CFGR &= ~RCC_CFGR_SW;
    while ((RCC->CFGR & RCC_CFGR_SWS) != RCC_CFGR_SWS_HSI);
    UART2_Init();
    UART2_Transmit("UART Test\r\n");
    I2C1_Init();
    I2C1_ScanBus();
    while (1) {}
}