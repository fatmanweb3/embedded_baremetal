#include "stm32f446xx.h"
#include "stdint.h"


#define I2C_ADDR_LCD  (027 << 1) // PCF8574 default adddress(7-bit shifted)
#define I2C_SCL_PIN   8 // PB8
#define I2C_SDA_PIN   9 // PB9

void I2C1_Init(void)
{
    // enablling the clock needed
    RCC->AHB1ENR |= RCC_AHB1ENR_GPIOBEN; //ENABLING THE GPIOB RCC CLOCK

    // SETTING THE GPIO PB8 AND PB9 TO AF4(WHICH IS THE ALTERNATE FUNCTION FOR I2C
    GPIOB->MODER &= ~((GPIO_MODER_MODER8_Msk) | (GPIO_MODER_MODER9_Msk));
    GPIOB->MODER |= ((2U << GPIO_MODER_MODER8_Pos) | (2U << GPIO_MODER_MODER9_Pos));
    GPIOB->OTYPER |= ((1U << I2C_SCL_PIN) | (1U << I2C_SDA_PIN));
    GPIOB->PUPDR &= ~((GPIO_PUPDR_PUPD8) | (GPIO_PUPDR_PUPD9));
    GPIOB->PUPDR |= ((1U << GPIO_PUPDR_PUPD8_Pos) | (1U << GPIO_PUPDR_PUPD9_Pos));
    GPIOB->AFR[1] |= ((4U << GPIO_AFRH_AFSEL8_Pos) | (4U << GPIO_AFRH_AFSEL9_Pos));

    RCC->APB1ENR |= RCC_APB1ENR_I2C1EN; // ENABLING THE PAB BUS FOR I2C

    //RESET I2C1
    I2C1->CR1 &= ~(I2C_CR1_PE);

    I2C1->CCR = 80;
    //CONFIGURE TIMING
    I2C1->TRISE = 17;

    // ENABLING THE I2C 
    I2C1->CR1 |= I2C_CR1_PE;
}

void I2C1_WriteByte(uint8_t addr, uint8_t data) 
{
    I2C1->CR2 = (addr & 1) | (1U << 16); // i byte transfer
    I2C1->CR1 |= I2C_CR1_START; // Generate START
    while (!(I2C1->SR1 & I2C_SR1_SB)); // Wait for start condition
    (void)I2C1->SR2; // Read SR2 to clear ADDR flag
    I2C1->DR = addr; // Send address
    while (!(I2C1->SR1 & I2C_SR1_ADDR)); // Wait for address acknowledgment
    (void)I2C1->SR2; // Clear ADDR flag
    while (!(I2C1->SR1 & I2C_SR1_TXE)); // Wait for TXE
    I2C1->DR = data; // Send data
    while (!(I2C1->SR1 & I2C_SR1_BTF)); // Wait for byte transfer finished
    I2C1->CR1 |= I2C_CR1_STOP; // Generate STOP

}


void LCD_SendNibble(uint8_t nibble, uint8_t rs) {
    uint8_t data = nibble  // D4-D7 on P0-P3
    data |= (1 << 3); // Backlight ON (P4)
    if (rs) data |= (1 << 7); // RS
    data |= (1 << 5); // EN HIGH
    I2C1_WriteByte(I2C_ADDR_LCD, data);
    for (volatile int i = 0; i < 1000; i++); // delay
    data &= ~(1 << 5); // EN LOW
    I2C1_WriteByte(I2C_ADDR_LCD, data);
}



void LCD_SendByte(uint8_t byte, uint8_t rs) {
    LCD_SendNibble(byte >> 4, rs);
    LCD_SendNibble(byte & 0x0F, rs);
}

void LCD_Init(void) {
    for (volatile int i = 0; i < 50000; i++); // Wait after power-on
    LCD_SendNibble(0x03, 0);
    LCD_SendNibble(0x03, 0);
    LCD_SendNibble(0x03, 0);
    LCD_SendNibble(0x02, 0); // 4-bit mode
    LCD_SendByte(0x28, 0); // Function set
    LCD_SendByte(0x0C, 0); // Display on
    LCD_SendByte(0x06, 0); // Entry mode
    LCD_SendByte(0x01, 0); // Clear
}

void LCD_SendString(char *str) {
    while (*str) {
        LCD_SendByte(*str++, 1);
    }
}

int main(void) {
    I2C1_Init();
    LCD_Init();
    LCD_SendString("Hello World");
    while (1);
}
